var searchIndex = JSON.parse('{\
"identity":{"doc":"IOTA IdentityIOTA Identity is a Rust implementation of…","i":[[0,"core","identity","Core Traits and Types",null,null],[3,"BitSet","identity::core","A general-purpose compressed bitset.",null,null],[12,"0","","",0,null],[4,"Context","","A reference to a JSON-LD context",null,null],[13,"Url","","A JSON-LD context expressed as a Url.",1,null],[13,"Obj","","A JSON-LD context expressed as a JSON object.",1,null],[6,"Object","","An alias for an ordered map of key-[value][`Value`] pairs.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",2,null],[13,"Bool","","Represents a JSON boolean.",2,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",2,null],[13,"String","","Represents a JSON string.",2,null],[13,"Array","","Represents a JSON array.",2,null],[13,"Object","","Represents a JSON object.",2,null],[4,"OneOrMany","","A generic container that stores one or many values of a…",null,null],[13,"One","","A single instance of `T`.",3,null],[13,"Many","","Multiple instances of `T`.",3,null],[3,"Timestamp","","A parsed Timestamp.",null,null],[12,"0","","",4,null],[3,"Url","","A parsed URL.",null,null],[12,"0","","",5,null],[8,"AsJson","","A convenience-trait for types that can be converted to and…",null,null],[11,"from_json","","Deserialize `Self` from a string of JSON text.",6,[[],[["result",4],["error",4]]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",6,[[],[["result",4],["error",4]]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",6,[[["value",4]],[["result",4],["error",4]]]],[11,"to_json","","Serialize `self` as a string of JSON.",6,[[],[["string",3],["result",4],["error",4]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",6,[[],[["error",4],["result",4],["vec",3]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",6,[[],[["result",4],["error",4],["value",4]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",6,[[],[["string",3],["result",4],["error",4]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",6,[[],[["error",4],["result",4],["vec",3]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",6,[[],[["genericarray",3],["result",4],["error",4]]]],[8,"FromJson","","A convenience-trait for types that can be deserialized…",null,null],[11,"from_json","","Deserialize `Self` from a string of JSON text.",7,[[],[["result",4],["error",4]]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",7,[[],[["result",4],["error",4]]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",7,[[["value",4]],[["result",4],["error",4]]]],[8,"ToJson","","A convenience-trait for types that can be serialized as…",null,null],[11,"to_json","","Serialize `self` as a string of JSON.",8,[[],[["string",3],["result",4],["error",4]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",8,[[],[["error",4],["result",4],["vec",3]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",8,[[],[["result",4],["error",4],["value",4]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",8,[[],[["string",3],["result",4],["error",4]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",8,[[],[["error",4],["result",4],["vec",3]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",8,[[],[["genericarray",3],["result",4],["error",4]]]],[8,"SerdeInto","","An escape-hatch for converting between types that…",null,null],[11,"serde_into","","Converts `self` to `T` by converting to/from JSON.",9,[[],[["result",4],["error",4]]]],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[4,"Error","","This type represents all possible errors that can occur in…",null,null],[13,"EncodeJSON","","Caused by a failure to encode Rust types as JSON.",10,null],[13,"DecodeJSON","","Caused by a failure to decode Rust types from JSON.",10,null],[13,"DecodeBase16","","Caused by a failure to decode base16-encoded data.",10,null],[13,"DecodeBase58","","Caused by a failure to decode base58-encoded data.",10,null],[13,"DecodeBase64","","Caused by a failure to decode base64-encoded data.",10,null],[13,"EncodeBitmap","","Cause by a failure to encode a Roaring Bitmap.",10,null],[13,"DecodeBitmap","","Cause by a failure to decode a Roaring Bitmap.",10,null],[13,"InvalidDiff","","Caused by attempting to perform an invalid `Diff` operation.",10,null],[13,"InvalidUrl","","Caused by attempting to parse an invalid `Url`.",10,null],[13,"InvalidTimestamp","","Caused by attempting to parse an invalid `Timestamp`.",10,null],[13,"InvalidProofValue","","Raised by a validation attempt against an invalid DID proof.",10,null],[13,"InvalidProofFormat","","Caused by attempting to parse an invalid DID proof.",10,null],[13,"InvalidKeyFormat","","Caused by attempting to parse an invalid cryptographic key.",10,null],[13,"InvalidMerkleKeyTag","","Caused by attempting to parse an invalid Merkle Key…",10,null],[13,"MissingSignature","","Caused by a failed attempt at retrieving a digital…",10,null],[13,"InvalidKeyCollectionSize","","Caused by attempting to create a KeyCollection of invalid…",10,null],[5,"decode_b64","","Decodes the given `data` as base64.",null,[[],[["error",4],["result",4],["vec",3]]]],[5,"encode_b64","","Encodes the given `data` as base64.",null,[[],["string",3]]],[5,"generate_ed25519_list","","Generates a list of public/secret ed25519 keys.",null,[[],[["error",4],["result",4],["vec",3]]]],[5,"generate_ed25519","","Generates a new pair of public/secret ed25519 keys.",null,[[],[["result",4],["error",4]]]],[5,"decode_b58","","Decodes the given `data` as base58-btc.",null,[[],[["error",4],["result",4],["vec",3]]]],[5,"encode_b58","","Encodes the given `data` as base58-btc.",null,[[],["string",3]]],[5,"decode_b16","","Decodes the given `data` as base16 (hex).",null,[[],[["error",4],["result",4],["vec",3]]]],[5,"encode_b16","","Encodes the given `data` as base16 (hex).",null,[[],["string",3]]],[4,"Error","identity::core::diff","",null,null],[13,"DiffError","","",11,null],[13,"MergeError","","",11,null],[13,"ConversionError","","",11,null],[6,"Result","","",null,null],[3,"DiffHashMap","","A `DiffHashMap` type which represents a Diffed `HashMap`.…",null,null],[12,"0","","",12,null],[3,"DiffHashSet","","",null,null],[12,"0","","",13,null],[6,"DiffObject","","",null,null],[4,"DiffOption","","A `DiffOption<T>` type which represents a Diffed…",null,null],[13,"Some","","",14,null],[13,"None","","",14,null],[3,"DiffString","","The Diff Type for a `String` type.",null,null],[12,"0","","",15,null],[8,"Diff","","The primary `Diff` Trait type.",null,null],[16,"Type","","The Corresponding Diff Type for the implemented Type.",16,null],[10,"diff","","Finds the difference between two types; `self` and `other`…",16,[[],[["error",4],["result",4]]]],[10,"merge","","Merges a `Self::Type` with `Self`",16,[[],[["error",4],["result",4]]]],[10,"from_diff","","Converts a `diff` of type `Self::Type` to a `Self`.",16,[[],[["error",4],["result",4]]]],[10,"into_diff","","Converts a type of `Self` to a `diff` of `Self::Type`.",16,[[],[["error",4],["result",4]]]],[24,"Diff","","Entry point for the `Diff` derive proc macro. `Diff`…",null,null],[3,"DiffVec","","The Diff Type for `Vec`.",null,null],[12,"0","","",17,null],[14,"json","identity::core","Construct a `serde_json::Value` from a JSON literal.",null,null],[0,"crypto","identity","Cryptographic Utilities",null,null],[0,"merkle_key","identity::crypto","An implementation of Merkle Key Collection Signatures.",null,null],[3,"MerkleKey","identity::crypto::merkle_key","Common utilities for working with Merkle Key Collection…",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash…",null,null],[12,"engine","","",18,null],[6,"DynSigner","","An alias for a [`Signer`] with a dynamic…",null,null],[3,"Signer","","A signature creation helper for Merkle Key Collection…",null,null],[12,"proof","","",19,null],[12,"public","","",19,null],[12,"suite","","",19,null],[8,"MerkleDigest","","A common interface for digest algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the digest algorithm.",20,[[],["merkletag",3]]],[8,"MerkleSignature","","A common interface for signature algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the signature algorithm.",21,[[],["merkletag",3]]],[3,"MerkleTag","","A tag identifying a Merkle Key Collection signature or…",null,null],[12,"0","","",22,null],[6,"DynVerifier","","An alias for a [`Verifier`] with a dynamic…",null,null],[3,"Verifier","","A signature verification helper for Merkle Key Collection…",null,null],[12,"suite","","",23,null],[12,"merkle_key","","",23,null],[12,"revocation","","",23,null],[12,"marker","","",23,null],[0,"merkle_tree","identity::crypto","Types and traits for Merkle tree operations.",null,null],[8,"Digest","identity::crypto::merkle_tree","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","Output size for `Digest`",24,null],[10,"new","","Create new hasher instance",24,[[]]],[10,"update","","Digest data, updating the internal state.",24,[[]]],[10,"chain","","Digest input data in a chained manner.",24,[[]]],[10,"finalize","","Retrieve result and consume hasher instance.",24,[[],["genericarray",3]]],[10,"finalize_reset","","Retrieve result and reset hasher instance.",24,[[],["genericarray",3]]],[10,"reset","","Reset hasher instance to its initial state.",24,[[]]],[10,"output_size","","Get output size of the hasher",24,[[]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",24,[[],["genericarray",3]]],[8,"DigestExt","","An extension of the [`Digest`] trait for Merkle tree…",null,null],[18,"OUTPUT_SIZE","","The output size of the digest function.",25,null],[11,"hash_leaf","","Computes the [`struct@Hash`] of a Merkle tree leaf node.",25,[[],["hash",3]]],[11,"hash_node","","Computes the parent [`struct@Hash`] of two Merkle tree…",25,[[["hash",3]],["hash",3]]],[11,"hash_empty","","Computes the [`struct@Hash`] of an empty Merkle tree.",25,[[],["hash",3]]],[6,"Output","","Output of a [`Digest`] function",null,null],[3,"Hash","","The output of a hash function.",null,null],[12,"0","","",26,null],[5,"compute_merkle_proof","","Generate a proof-of-inclusion for the leaf node at the…",null,[[],[["option",4],["proof",3]]]],[5,"compute_merkle_root","","Compute the Merkle root hash for the given slice of…",null,[[],["hash",3]]],[4,"Node","","A tagged [`struct@Hash`].",null,null],[13,"L","","A node tagged with `L`.",27,null],[13,"R","","A node tagged with `R`.",27,null],[3,"Proof","","An Merkle tree inclusion proof that allows proving the…",null,null],[12,"nodes","","",28,null],[8,"AsLeaf","","A helper trait for computing hash values used in Merkle…",null,null],[10,"hash","","Hashes `self` with the digest implentation `D`.",29,[[],["hash",3]]],[3,"KeyCollection","identity::crypto","A collection of cryptographic keys.",null,null],[12,"type_","","",30,null],[12,"public","","",30,null],[12,"secret","","",30,null],[3,"KeyPair","","A convenient type for representing a pair of cryptographic…",null,null],[12,"type_","","",31,null],[12,"public","","",31,null],[12,"secret","","",31,null],[3,"KeyRef","","A borrowed reference to a cryptographic key.",null,null],[12,"kty","","",32,null],[12,"key","","",32,null],[4,"KeyType","","Supported cryptographic key types.",null,null],[13,"Ed25519","","Identifies an `Ed25519` public/secret key.",33,null],[3,"PublicKey","","A public key object.",null,null],[12,"0","","",34,null],[3,"SecretKey","","A secret key object.",null,null],[12,"0","","",35,null],[3,"JcsEd25519Signature2020","","An implementation of the JCS Ed25519 Signature 2020…",null,null],[8,"SetSignature","","A trait for types that can store a digital…",null,null],[10,"set_signature","","Sets the [`Signature`] object of `self`.",36,[[["signature",3]]]],[3,"Signature","","A DID Document digital signature.",null,null],[12,"type_","","",37,null],[12,"value","","",37,null],[12,"method","","",37,null],[12,"hidden","","",37,null],[8,"SignatureName","","A trait for signature suites identified by a particular…",null,null],[10,"name","","Returns a unique identifier for the signatures created by…",38,[[],["string",3]]],[8,"SignatureSign","","A trait for general-purpose signature creation",null,null],[10,"sign","","Signs the given `data` with `secret` and returns a digital…",39,[[["serialize",8]],[["signaturevalue",4],["result",4],["error",4]]]],[4,"SignatureValue","","A DID Document signature with a dynamic JSON field name.",null,null],[13,"None","","An empty signature value.",40,null],[13,"Jws","","A signature value with the property name `jws`.",40,null],[13,"Proof","","A signature value with the property name `proofValue`.",40,null],[13,"Signature","","A signature value with the property name `signatureValue`.",40,null],[8,"SignatureVerify","","A trait for general-purpose signature verification",null,null],[10,"verify","","Verifies the authenticity of `data` using `signature` and…",41,[[["serialize",8],["signaturevalue",4]],[["result",4],["error",4]]]],[8,"TrySignature","","A trait for types that can provide a reference to a…",null,null],[10,"signature","","Returns a reference to the [`Signature`] object, if any.",42,[[],[["signature",3],["option",4]]]],[11,"try_signature","","Returns a reference to the [`Signature`] object.",42,[[],[["signature",3],["error",4],["result",4]]]],[8,"TrySignatureMut","","A trait for types that can provide a mutable reference to…",null,null],[10,"signature_mut","","Returns a mutable reference to the [`Signature`] object.",43,[[],[["option",4],["signature",3]]]],[11,"try_signature_mut","","Returns a mutable reference to the [`Signature`] object.",43,[[],[["signature",3],["result",4],["error",4]]]],[0,"credential","identity","Verifiable Credentials",null,null],[3,"CredentialBuilder","identity::credential","A `CredentialBuilder` is used to create a customized…",null,null],[12,"context","","",44,null],[12,"id","","",44,null],[12,"types","","",44,null],[12,"subject","","",44,null],[12,"issuer","","",44,null],[12,"issuance_date","","",44,null],[12,"expiration_date","","",44,null],[12,"status","","",44,null],[12,"schema","","",44,null],[12,"refresh","","",44,null],[12,"policy","","",44,null],[12,"evidence","","",44,null],[12,"non_transferable","","",44,null],[12,"properties","","",44,null],[3,"Credential","","A `Credential` represents a set of claims describing an…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Credential`.",45,null],[12,"id","","A unique `URI` referencing the subject of the `Credential`.",45,null],[12,"types","","One or more URIs defining the type of the `Credential`.",45,null],[12,"credential_subject","","One or more `Object`s representing the `Credential`…",45,null],[12,"issuer","","A reference to the issuer of the `Credential`.",45,null],[12,"issuance_date","","A timestamp of when the `Credential` becomes valid.",45,null],[12,"expiration_date","","A timestamp of when the `Credential` should no longer be…",45,null],[12,"credential_status","","Information used to determine the current status of the…",45,null],[12,"credential_schema","","Information used to assist in the enforcement of a…",45,null],[12,"refresh_service","","Service(s) used to refresh an expired `Credential`.",45,null],[12,"terms_of_use","","Terms-of-use specified by the `Credential` issuer.",45,null],[12,"evidence","","Human-readable evidence used to support the claims within…",45,null],[12,"non_transferable","","Indicates that the `Credential` must only be contained…",45,null],[12,"properties","","Miscellaneous properties.",45,null],[3,"Evidence","","Information used to increase confidence in the claims of a…",null,null],[12,"id","","A Url that allows retrieval of information about the…",46,null],[12,"types","","The type(s) of the credential evidence.",46,null],[12,"properties","","Additional properties of the credential evidence.",46,null],[4,"Issuer","","An identifier representing the issuer of a `Credential`.",null,null],[13,"Url","","A credential issuer expressed as a Url.",47,null],[13,"Obj","","A credential issuer expressed as a JSON object.",47,null],[3,"Policy","","Information used to express obligations, prohibitions, and…",null,null],[12,"id","","The instance id of the credential terms-of-use.",48,null],[12,"types","","The type(s) of the credential terms-of-use.",48,null],[12,"properties","","Additional properties of the credential terms-of-use.",48,null],[3,"Refresh","","Information used to refresh or assert the status of a…",null,null],[12,"id","","The Url of the credential refresh service.",49,null],[12,"types","","The type(s) of the credential refresh service.",49,null],[12,"properties","","Additional properties of the credential refresh service.",49,null],[3,"Schema","","Information used to validate the structure of a…",null,null],[12,"id","","A Url identifying the credential schema file.",50,null],[12,"types","","The type(s) of the credential schema.",50,null],[12,"properties","","Additional properties of the credential schema.",50,null],[3,"Status","","Information used to determine the current status of a…",null,null],[12,"id","","A Url identifying the credential status.",51,null],[12,"types","","The type(s) of the credential status.",51,null],[12,"properties","","Additional properties of the credential status.",51,null],[3,"Subject","","An entity who is the target of a set of claims.",null,null],[12,"id","","A Url identifying the credential subject.",52,null],[12,"properties","","Additional properties of the credential subject.",52,null],[3,"VerifiableCredential","","A `VerifiableCredential` represents a `Credential` with an…",null,null],[12,"credential","","",53,null],[12,"proof","","",53,null],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[4,"Error","","This type represents all possible errors that can occur in…",null,null],[13,"DIDError","","Caused by errors from the `identity_did` crate.",54,null],[13,"MissingBaseContext","","Caused when validating a Credential without a valid base…",54,null],[13,"MissingBaseType","","Caused when validating a Credential without a valid base…",54,null],[13,"MissingIssuer","","Caused when validating a Credential without an issuer.",54,null],[13,"MissingSubject","","Caused when validating a Credential without a subject.",54,null],[13,"InvalidSubject","","Caused when validating a Credential with a malformed…",54,null],[3,"PresentationBuilder","","A `PresentationBuilder` is used to create a customized…",null,null],[12,"context","","",55,null],[12,"id","","",55,null],[12,"types","","",55,null],[12,"credentials","","",55,null],[12,"holder","","",55,null],[12,"refresh","","",55,null],[12,"policy","","",55,null],[12,"properties","","",55,null],[3,"Presentation","","A `Presentation` represents a bundle of one or more…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Presentation`.",56,null],[12,"id","","A unique `URI` referencing the subject of the…",56,null],[12,"types","","One or more URIs defining the type of the `Presentation`.",56,null],[12,"verifiable_credential","","Credential(s) expressing the claims of the `Presentation`.",56,null],[12,"holder","","The entity that generated the presentation.",56,null],[12,"refresh_service","","Service(s) used to refresh an expired `Presentation`.",56,null],[12,"terms_of_use","","Terms-of-use specified by the `Presentation` holder.",56,null],[12,"properties","","Miscellaneous properties.",56,null],[3,"VerifiablePresentation","","A `VerifiablePresentation` represents a `Presentation`…",null,null],[12,"presentation","","",57,null],[12,"proof","","",57,null],[0,"did","identity","Decentralized Identifiers",null,null],[3,"DocumentBuilder","identity::did","A `DocumentBuilder` is used to generate a customized…",null,null],[12,"id","","",58,null],[12,"controller","","",58,null],[12,"also_known_as","","",58,null],[12,"verification_method","","",58,null],[12,"authentication","","",58,null],[12,"assertion_method","","",58,null],[12,"key_agreement","","",58,null],[12,"capability_delegation","","",58,null],[12,"capability_invocation","","",58,null],[12,"service","","",58,null],[12,"properties","","",58,null],[3,"Document","","A DID Document",null,null],[12,"id","","",59,null],[12,"controller","","",59,null],[12,"also_known_as","","",59,null],[12,"verification_method","","",59,null],[12,"authentication","","",59,null],[12,"assertion_method","","",59,null],[12,"key_agreement","","",59,null],[12,"capability_delegation","","",59,null],[12,"capability_invocation","","",59,null],[12,"service","","",59,null],[12,"properties","","",59,null],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[4,"Error","","This type represents all possible errors that can occur in…",null,null],[13,"CoreError","","Caused by errors from the `identity_core` crate.",60,null],[13,"DIDError","","Caused by errors from the `did_url` crate.",60,null],[13,"OrderedSetDuplicate","","",60,null],[13,"QueryMethodNotFound","","",60,null],[13,"BuilderInvalidDocumentId","","",60,null],[13,"BuilderInvalidServiceId","","",60,null],[13,"BuilderInvalidServiceType","","",60,null],[13,"BuilderInvalidServiceEndpoint","","",60,null],[13,"BuilderInvalidMethodId","","",60,null],[13,"BuilderInvalidMethodController","","",60,null],[13,"BuilderInvalidMethodType","","",60,null],[13,"BuilderInvalidMethodData","","",60,null],[13,"InvalidMethodFragment","","",60,null],[13,"InvalidMethodType","","",60,null],[13,"InvalidMethodDuplicate","","",60,null],[13,"UnknownMethodScope","","",60,null],[13,"UnknownMethodType","","",60,null],[13,"UnknownSignatureType","","",60,null],[13,"InvalidKeyData","","",60,null],[13,"InvalidKeyDataBase16","","",60,null],[13,"InvalidKeyDataBase58","","",60,null],[13,"MissingResolutionDID","","",60,null],[13,"MissingResolutionMetadata","","",60,null],[13,"MissingResolutionDocument","","",60,null],[13,"MissingResolutionData","","",60,null],[13,"InvalidDIDQuery","","",60,null],[13,"InvalidDIDFragment","","",60,null],[13,"InvalidServiceProtocol","","",60,null],[3,"ServiceBuilder","","A `ServiceBuilder` is used to generate a customized…",null,null],[12,"id","","",61,null],[12,"type_","","",61,null],[12,"service_endpoint","","",61,null],[12,"properties","","",61,null],[3,"Service","","A DID Document Service",null,null],[12,"id","","",62,null],[12,"type_","","",62,null],[12,"service_endpoint","","",62,null],[12,"properties","","",62,null],[3,"DIDKey","","A helper struct for comparing types only by `DID`.",null,null],[12,"0","","",63,null],[3,"OrderedSet","","An ordered set based on a `Vec<T>`.",null,null],[12,"0","","",64,null],[3,"MethodBuilder","","A `MethodBuilder` is used to generate a customized `Method`.",null,null],[12,"id","","",65,null],[12,"controller","","",65,null],[12,"key_type","","",65,null],[12,"key_data","","",65,null],[12,"properties","","",65,null],[3,"Method","","A DID Document Verification Method",null,null],[12,"id","","",66,null],[12,"controller","","",66,null],[12,"key_type","","",66,null],[12,"key_data","","",66,null],[12,"properties","","",66,null],[4,"MethodData","","Supported verification method data formats.",null,null],[13,"PublicKeyBase58","","",67,null],[13,"PublicKeyHex","","",67,null],[13,"PublicKeyJwk","","",67,null],[3,"MethodQuery","","Specifies the conditions of a DID document method…",null,null],[12,"0","","",68,null],[4,"MethodRef","","A reference to a verification method, either a `DID` or…",null,null],[13,"Embed","","",69,null],[13,"Refer","","",69,null],[4,"MethodScope","","Verification method group used to refine the scope of a…",null,null],[13,"VerificationMethod","","",70,null],[13,"Authentication","","",70,null],[13,"AssertionMethod","","",70,null],[13,"KeyAgreement","","",70,null],[13,"CapabilityDelegation","","",70,null],[13,"CapabilityInvocation","","",70,null],[4,"MethodType","","Supported verification method types.",null,null],[13,"Ed25519VerificationKey2018","","",71,null],[13,"MerkleKeyCollection2021","","",71,null],[14,"did","","A helper macro to assist with the construction of [`DID`]s.",null,null],[4,"DIDError","","",null,null],[13,"InvalidAuthority","","",72,null],[13,"InvalidFragment","","",72,null],[13,"InvalidMethodId","","",72,null],[13,"InvalidMethodName","","",72,null],[13,"InvalidPath","","",72,null],[13,"InvalidQuery","","",72,null],[13,"InvalidScheme","","",72,null],[3,"DID","","A Decentralized Identifier (DID).",null,null],[12,"data","","",73,null],[12,"core","","",73,null],[0,"resolution","","Types and traits for DID Document resolution.",null,null],[3,"Dereference","identity::did::resolution","The output returned from DID URL dereferencing.",null,null],[12,"metadata","","Metadata regarding the base resolution process.",74,null],[12,"content","","The output resource of a successful dereference.",74,null],[12,"content_metadata","","Content-specific metadata.",74,null],[3,"DocumentMetadata","","Metadata associated with a resolved DID Document.",null,null],[12,"created","","The timestamp of the Create operation.",75,null],[12,"updated","","The timestamp of the last Update operation.",75,null],[12,"properties","","Additional document metadata properties.",75,null],[4,"ErrorKind","","Types of errors that be returned from a DID resolution…",null,null],[13,"InvalidDID","","The DID supplied to the DID resolution function does not…",76,null],[13,"NotSupported","","The DID resolver does not support the specified method.",76,null],[13,"NotFound","","The DID resolver was unable to return the DID document…",76,null],[5,"dereference","","Dereferences a DID URL into a primary or secondary resource.",null,[[["inputmetadata",3]]]],[5,"resolve","","Resolves a DID into a DID Document by using the \\\"Read\\\"…",null,[[["inputmetadata",3]]]],[3,"InputMetadata","","Input options used to configure a DID resolution process.",null,null],[12,"accept","","The MIME type of the preferred representation of the DID…",77,null],[12,"properties","","Additional input metadata properties.",77,null],[17,"MIME_DID","","The content type of a JSON DID Document.",null,null],[17,"MIME_DID_LD","","The content type of a JSON-LD DID Document.",null,null],[3,"Resolution","","The output returned from DID resolution.",null,null],[12,"metadata","","Resolution-specific metadata.",78,null],[12,"document","","The DID Document of a successful resolution.",78,null],[12,"document_metadata","","Document-specific metadata.",78,null],[3,"ResolutionMetadata","","Metadata associated with a DID resolution process.",null,null],[12,"error","","The error code from the resolution process, if an error…",79,null],[12,"content_type","","The MIME type of the returned document stream.",79,null],[12,"duration","","The elapsed time of the resolution operation.",79,null],[12,"resolved","","The parsed DID that was used for resolution.",79,null],[12,"properties","","Additional resolution metadata properties.",79,null],[4,"PrimaryResource","","A primary resource returned from a DID URL dereferencing…",null,null],[13,"Document","","A dereferenced DID Document.",80,null],[13,"Service","","A dereferenced DID Document service endpoint.",80,null],[4,"Resource","","A resource returned from a DID URL dereferencing process.",null,null],[13,"Primary","","A dereferenced primary resource.",81,null],[13,"Secondary","","A dereferenced secondary resource.",81,null],[4,"SecondaryResource","","A secondary resource returned from a DID URL dereferencing…",null,null],[13,"VerificationDID","","A DID Document Method Id.",82,null],[13,"VerificationKey","","A DID Document Verification Method.",82,null],[13,"Service","","A DID Document Service.",82,null],[3,"MetaDocument","","A resolved [`Document`] and associated [`DocumentMetadata`].",null,null],[12,"data","","A resolved DID Document.",83,null],[12,"meta","","Information regarding the associated Documents resolution…",83,null],[8,"ResolverMethod","","A trait for generic DID Resolvers.",null,null],[10,"is_supported","","Returns `true` if the given `did` is supported by this DID…",84,[[["did",3]]]],[10,"read","","Performs the \\\"Read\\\" operation of the DID method.",84,[[["did",3],["inputmetadata",3]],[["pin",3],["box",3]]]],[0,"verifiable","identity::did","",null,null],[3,"DocumentSigner","identity::did::verifiable","",null,null],[12,"document","","",85,null],[12,"secret","","",85,null],[12,"method","","",85,null],[12,"merkle_key","","",85,null],[3,"DocumentVerifier","","",null,null],[12,"document","","",86,null],[3,"Properties","","A generic container for a set of properties (`T`) and a…",null,null],[12,"properties","","",87,null],[12,"proof","","",87,null],[8,"Revocation","","",null,null],[11,"revocation","","Returns a [`set`][`BitSet`] of Merkle Key Collection…",88,[[],[["error",4],["result",4],["option",4]]]],[0,"iota","identity","IOTA Tangle DID Method",null,null],[3,"AuthChain","identity::iota","",null,null],[12,"history","","",89,null],[12,"current","","",89,null],[3,"DiffChain","","",null,null],[12,"inner","","",90,null],[3,"DocumentChain","","",null,null],[12,"diff_chain","","",91,null],[12,"auth_chain","","",91,null],[12,"document","","",91,null],[3,"Client","","",null,null],[12,"client","","",92,null],[12,"network","","",92,null],[3,"ClientBuilder","","A `ClientBuilder` is used to generated a customized…",null,null],[12,"network","","",93,null],[12,"nodes","","",93,null],[4,"Network","","",null,null],[13,"Mainnet","","",94,null],[13,"Devnet","","",94,null],[13,"Comnet","","",94,null],[3,"TxnPrinter","","",null,null],[12,"0","","",95,null],[12,"1","","",95,null],[3,"CredentialValidation","","",null,null],[12,"credential","","",96,null],[12,"issuer","","",96,null],[12,"subjects","","",96,null],[12,"verified","","",96,null],[3,"CredentialValidator","","",null,null],[12,"client","","",97,null],[3,"DocumentValidation","","",null,null],[12,"did","","",98,null],[12,"document","","",98,null],[12,"metadata","","",98,null],[12,"verified","","",98,null],[3,"PresentationValidation","","",null,null],[12,"presentation","","",99,null],[12,"holder","","",99,null],[12,"credentials","","",99,null],[12,"verified","","",99,null],[3,"Document","","A DID Document adhering to the IOTA DID method…",null,null],[12,"document","","",100,null],[12,"message_id","","",100,null],[3,"DocumentDiff","","",null,null],[12,"did","","",101,null],[12,"diff","","",101,null],[12,"previous_message_id","","",101,null],[12,"proof","","",101,null],[12,"message_id","","",101,null],[3,"Method","","",null,null],[12,"0","","",102,null],[3,"Properties","","Additional properties stored in an IOTA DID Document.",null,null],[12,"created","","",103,null],[12,"updated","","",103,null],[12,"immutable","","",103,null],[12,"previous_message_id","","",103,null],[12,"properties","","",103,null],[6,"Signer","","",null,null],[6,"Verifier","","",null,null],[3,"DID","","A DID URL adhering to the IOTA DID method specification.",null,null],[12,"0","","",104,null],[6,"Result","","",null,null],[4,"Error","","",null,null],[13,"CoreError","","",105,null],[13,"DiffError","","",105,null],[13,"CredError","","",105,null],[13,"InvalidDID","","",105,null],[13,"InvalidDoc","","",105,null],[13,"ClientError","","",105,null],[13,"TernaryError","","",105,null],[13,"InvalidDocumentMessageId","","",105,null],[13,"InvalidDocumentAuthAuthority","","",105,null],[13,"InvalidDocumentAuthFragment","","",105,null],[13,"InvalidDocumentAuthType","","",105,null],[13,"InvalidDIDNetwork","","",105,null],[13,"InvalidTryteConversion","","",105,null],[13,"InvalidTransactionBundle","","",105,null],[13,"InvalidTransactionHashes","","",105,null],[13,"InvalidTransactionTrytes","","",105,null],[13,"InvalidBundleTail","","",105,null],[13,"InvalidPresentationHolder","","",105,null],[13,"ChainError","","",105,null],[12,"error","identity::iota::Error","",106,null],[13,"MissingMethodFragment","identity::iota","",105,null],[13,"MissingAuthenticationMethod","","",105,null],[13,"CannotRemoveAuthMethod","","",105,null],[13,"CannotRevokeMethod","","",105,null],[3,"Message","","",null,null],[12,"address","","",107,null],[12,"message","","",107,null],[12,"tail_hash","","",107,null],[12,"timestamp","","",107,null],[3,"MessageId","","",null,null],[12,"0","","",108,null],[3,"MessageIndex","","",null,null],[12,"inner","","",109,null],[8,"TangleRef","","",null,null],[10,"message_id","","",110,[[],["messageid",3]]],[10,"set_message_id","","",110,[[["messageid",3]]]],[10,"previous_message_id","","",110,[[],["messageid",3]]],[10,"set_previous_message_id","","",110,[[["messageid",3]]]],[0,"did","","",null,null],[3,"Document","identity::iota::did","A DID Document adhering to the IOTA DID method…",null,null],[12,"document","","",100,null],[12,"message_id","","",100,null],[3,"DocumentDiff","","",null,null],[12,"did","","",101,null],[12,"diff","","",101,null],[12,"previous_message_id","","",101,null],[12,"proof","","",101,null],[12,"message_id","","",101,null],[3,"Method","","",null,null],[12,"0","","",102,null],[3,"Properties","","Additional properties stored in an IOTA DID Document.",null,null],[12,"created","","",103,null],[12,"updated","","",103,null],[12,"immutable","","",103,null],[12,"previous_message_id","","",103,null],[12,"properties","","",103,null],[6,"Signer","","",null,null],[6,"Verifier","","",null,null],[3,"DID","","A DID URL adhering to the IOTA DID method specification.",null,null],[12,"0","","",104,null],[14,"did","identity::iota","Creates a new IOTA DID from a `public` key and optional…",null,null],[14,"try_did","","A fallible version of the `did` macro.",null,null],[11,"from","identity::core","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"hash","","",3,[[],["hash",3]]],[11,"equivalent","","",3,[[]]],[11,"encode_hex","","",3,[[]]],[11,"encode_hex_upper","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"as_fail","","",10,[[],["fail",8]]],[11,"from","identity::core::diff","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"as_fail","","",11,[[],["fail",8]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"erased_serialize","","",17,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",17,[[]]],[11,"from","identity::crypto::merkle_key","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"new","","",18,[[]]],[11,"update","","",18,[[]]],[11,"chain","","",18,[[]]],[11,"finalize","","",18,[[],["genericarray",3]]],[11,"finalize_reset","","",18,[[],["genericarray",3]]],[11,"reset","","",18,[[]]],[11,"output_size","","",18,[[]]],[11,"digest","","",18,[[],["genericarray",3]]],[11,"finalize_into","","",18,[[["genericarray",3]]]],[11,"finalize_into_reset","","",18,[[["genericarray",3]]]],[11,"update","","",18,[[]]],[11,"finalize_reset","","",18,[[],[["global",3],["box",3]]]],[11,"finalize","","",18,[[["global",3],["box",3]],[["global",3],["box",3]]]],[11,"reset","","",18,[[]]],[11,"output_size","","",18,[[]]],[11,"box_clone","","",18,[[],[["box",3],["dyndigest",8],["global",3]]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","identity::crypto::merkle_tree","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"hash","","",26,[[],["hash",3]]],[11,"equivalent","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","identity::crypto","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"zeroize","","",31,[[]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"zeroize","","",34,[[]]],[11,"hash","","",34,[[],["hash",3]]],[11,"encode_hex","","",34,[[]]],[11,"encode_hex_upper","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"zeroize","","",35,[[]]],[11,"hash","","",35,[[],["hash",3]]],[11,"encode_hex","","",35,[[]]],[11,"encode_hex_upper","","",35,[[]]],[11,"vzip","","",35,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"erased_serialize","","",37,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",37,[[]]],[11,"vzip","","",37,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"erased_serialize","","",40,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"from","identity::credential","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"erased_serialize","","",45,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"erased_serialize","","",46,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"erased_serialize","","",47,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"erased_serialize","","",48,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"erased_serialize","","",49,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"erased_serialize","","",50,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"erased_serialize","","",51,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"erased_serialize","","",52,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"to_string","","",53,[[],["string",3]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"erased_serialize","","",53,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_string","","",54,[[],["string",3]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"as_fail","","",54,[[],["fail",8]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"erased_serialize","","",56,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"erased_serialize","","",57,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",57,[[]]],[11,"from","identity::did","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"to_string","","",59,[[],["string",3]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"erased_serialize","","",59,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_string","","",60,[[],["string",3]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"as_fail","","",60,[[],["fail",8]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"to_string","","",62,[[],["string",3]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"erased_serialize","","",62,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"to_string","","",63,[[],["string",3]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"erased_serialize","","",63,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"hash","","",63,[[],["hash",3]]],[11,"equivalent","","",63,[[]]],[11,"encode_hex","","",63,[[]]],[11,"encode_hex_upper","","",63,[[]]],[11,"vzip","","",63,[[]]],[11,"reset","","",63,[[]]],[11,"absorb","","",63,[[["trits",3]],["result",4]]],[11,"squeeze_into","","",63,[[["trits",3]],["result",4]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"erased_serialize","","",64,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",64,[[]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"to_string","","",66,[[],["string",3]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"erased_serialize","","",66,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"erased_serialize","","",67,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"equivalent","","",68,[[]]],[11,"vzip","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"erased_serialize","","",69,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"equivalent","","",70,[[]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"erased_serialize","","",71,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",71,[[]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"to_string","","",72,[[],["string",3]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"equivalent","","",72,[[]]],[11,"vzip","","",72,[[]]],[11,"as_fail","","",72,[[],["fail",8]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"to_string","","",73,[[],["string",3]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"erased_serialize","","",73,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",73,[[]]],[11,"vzip","","",73,[[]]],[11,"from","identity::did::resolution","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"erased_serialize","","",75,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",75,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"erased_serialize","","",76,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",76,[[]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"erased_serialize","","",77,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"erased_serialize","","",78,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"erased_serialize","","",79,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"erased_serialize","","",80,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"erased_serialize","","",81,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",81,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"erased_serialize","","",82,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"erased_serialize","","",83,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",83,[[]]],[11,"from","identity::did::verifiable","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"erased_serialize","","",87,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",87,[[]]],[11,"vzip","","",87,[[]]],[11,"reset","","",87,[[]]],[11,"absorb","","",87,[[["trits",3]],["result",4]]],[11,"squeeze_into","","",87,[[["trits",3]],["result",4]]],[11,"from","identity::iota","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_string","","",89,[[],["string",3]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"erased_serialize","","",89,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_string","","",90,[[],["string",3]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"erased_serialize","","",90,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_string","","",91,[[],["string",3]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"erased_serialize","","",91,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"equivalent","","",94,[[]]],[11,"vzip","","",94,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_string","","",95,[[],["string",3]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"erased_serialize","","",96,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"erased_serialize","","",98,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",98,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"erased_serialize","","",99,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",99,[[]]],[11,"from","identity::iota::did","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"to_string","","",100,[[],["string",3]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"erased_serialize","","",100,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",100,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"erased_serialize","","",101,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",101,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"to_string","","",102,[[],["string",3]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"erased_serialize","","",102,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",102,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"erased_serialize","","",103,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",103,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"to_string","","",104,[[],["string",3]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"erased_serialize","","",104,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",104,[[]]],[11,"vzip","","",104,[[]]],[11,"from","identity::iota","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_string","","",105,[[],["string",3]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"as_fail","","",105,[[],["fail",8]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"to_string","","",108,[[],["string",3]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"erased_serialize","","",108,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",108,[[]]],[11,"vzip","","",108,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"default","identity::crypto::merkle_tree","",26,[[],["hash",3]]],[11,"default","identity::core","",4,[[],["timestamp",3]]],[11,"default","","",0,[[],["bitset",3]]],[11,"default","","",3,[[],["oneormany",4]]],[11,"diff","","",5,[[["url",3]],[["result",4],["error",4]]]],[11,"merge","","",5,[[],[["result",4],["url",3],["error",4]]]],[11,"from_diff","","",5,[[],[["result",4],["url",3],["error",4]]]],[11,"into_diff","","",5,[[],[["result",4],["error",4]]]],[11,"hash","identity::crypto::merkle_tree","",26,[[],["hash",3]]],[11,"deref","identity::core","",3,[[]]],[11,"deref","","",5,[[]]],[11,"cmp","identity::crypto","",33,[[["keytype",4]],["ordering",4]]],[11,"cmp","identity::crypto::merkle_tree","",26,[[["hash",3]],["ordering",4]]],[11,"cmp","identity::crypto::merkle_key","",22,[[["merkletag",3]],["ordering",4]]],[11,"cmp","identity::core","",5,[[["url",3]],["ordering",4]]],[11,"cmp","identity::crypto","",37,[[["signature",3]],["ordering",4]]],[11,"cmp","identity::core","",4,[[["timestamp",3]],["ordering",4]]],[11,"cmp","identity::crypto","",40,[[["signaturevalue",4]],["ordering",4]]],[11,"cmp","identity::core","",3,[[["oneormany",4]],["ordering",4]]],[11,"fmt","","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::core","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_tree","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::core","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_key","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::core","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_key","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",37,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",31,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_tree","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_key","",111,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",112,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_tree","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"index","","",30,[[]]],[11,"serialize","identity::core","",5,[[],["result",4]]],[11,"serialize","identity::crypto","",37,[[],["result",4]]],[11,"serialize","identity::core","",3,[[],["result",4]]],[11,"serialize","identity::crypto","",40,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","identity::core","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"eq","identity::crypto::merkle_key","",22,[[["merkletag",3]]]],[11,"ne","","",22,[[["merkletag",3]]]],[11,"eq","identity::core","",5,[[]]],[11,"eq","","",5,[[["url",3]]]],[11,"ne","","",5,[[["url",3]]]],[11,"eq","","",1,[[]]],[11,"eq","","",3,[[["oneormany",4]]]],[11,"ne","","",3,[[["oneormany",4]]]],[11,"eq","","",4,[[["timestamp",3]]]],[11,"ne","","",4,[[["timestamp",3]]]],[11,"eq","identity::crypto","",33,[[["keytype",4]]]],[11,"eq","","",37,[[["signature",3]]]],[11,"ne","","",37,[[["signature",3]]]],[11,"eq","","",40,[[["signaturevalue",4]]]],[11,"ne","","",40,[[["signaturevalue",4]]]],[11,"eq","identity::crypto::merkle_tree","",26,[[["hash",3]]]],[11,"eq","identity::core","",1,[[["context",4]]]],[11,"ne","","",1,[[["context",4]]]],[11,"sign","identity::crypto::merkle_key","",19,[[["serialize",8]],[["signaturevalue",4],["result",4],["error",4]]]],[11,"sign","identity::crypto","",112,[[["serialize",8]],[["signaturevalue",4],["result",4],["error",4]]]],[11,"from_str","identity::core","",4,[[],[["result",4],["timestamp",3]]]],[11,"from_str","","",5,[[],[["url",3],["result",4]]]],[11,"from_str","identity::crypto","",33,[[],[["result",4],["keytype",4]]]],[11,"tag","identity::crypto::merkle_key","",18,[[],["merkletag",3]]],[11,"try_from","identity::core","",4,[[],[["result",4],["timestamp",3]]]],[11,"try_from","","",4,[[["string",3]],[["result",4],["timestamp",3]]]],[11,"clone","","",4,[[],["timestamp",3]]],[11,"clone","","",3,[[],["oneormany",4]]],[11,"clone","identity::crypto::merkle_tree","",27,[[],["node",4]]],[11,"clone","","",28,[[],["proof",3]]],[11,"clone","identity::crypto","",35,[[],["secretkey",3]]],[11,"clone","","",33,[[],["keytype",4]]],[11,"clone","","",31,[[],["keypair",3]]],[11,"clone","identity::core","",5,[[],["url",3]]],[11,"clone","identity::crypto","",32,[[],["keyref",3]]],[11,"clone","identity::core","",1,[[],["context",4]]],[11,"clone","identity::crypto","",30,[[],["keycollection",3]]],[11,"clone","","",112,[[],["jcsed25519signature2020",3]]],[11,"clone","","",40,[[],["signaturevalue",4]]],[11,"clone","identity::crypto::merkle_key","",22,[[],["merkletag",3]]],[11,"clone","identity::core","",0,[[],["bitset",3]]],[11,"clone","identity::crypto::merkle_key","",111,[[],["merklekey",3]]],[11,"clone","identity::crypto","",34,[[],["publickey",3]]],[11,"clone","","",37,[[],["signature",3]]],[11,"clone","identity::crypto::merkle_key","",23,[[],["verifier",3]]],[11,"clone","","",19,[[],["signer",3]]],[11,"clone","identity::crypto::merkle_tree","",26,[[],["hash",3]]],[11,"hash","identity::core","",5,[[]]],[11,"hash","identity::crypto","",33,[[]]],[11,"hash","","",40,[[]]],[11,"hash","identity::crypto::merkle_key","",22,[[]]],[11,"hash","identity::core","",4,[[]]],[11,"hash","","",3,[[]]],[11,"source","","",10,[[],[["option",4],["error",8]]]],[11,"drop","identity::crypto","",34,[[]]],[11,"drop","","",31,[[]]],[11,"drop","","",35,[[]]],[11,"into_iter","","",30,[[]]],[11,"from","identity::core","",10,[[["error",4]],["error",4]]],[11,"from","","",10,[[["parseerror",3]],["error",4]]],[11,"from","","",5,[[["url",3]],["url",3]]],[11,"from","","",1,[[["btreemap",3],["string",3],["value",4]],["context",4]]],[11,"from","identity::crypto::merkle_key","",22,[[],["merkletag",3]]],[11,"from","identity::crypto::merkle_tree","",26,[[["genericarray",3]],["hash",3]]],[11,"from","identity::crypto","",34,[[["vec",3]],["publickey",3]]],[11,"from","identity::core","",10,[[["decodeerror",4]],["error",4]]],[11,"from","","",10,[[["error",4]],["error",4]]],[11,"from","","",3,[[],["oneormany",4]]],[11,"from","","",10,[[["parseerror",4]],["error",4]]],[11,"from","identity::crypto","",35,[[["vec",3]],["secretkey",3]]],[11,"from","","",34,[[["global",3],["box",3]],["publickey",3]]],[11,"from","identity::core","",10,[[["fromhexerror",4]],["error",4]]],[11,"from","","",1,[[["url",3]],["context",4]]],[11,"from","","",3,[[["vec",3]],["oneormany",4]]],[11,"from","identity::crypto","",31,[[],["keypair",3]]],[11,"from","","",35,[[["global",3],["box",3]],["secretkey",3]]],[11,"as_ref","identity::core","",3,[[]]],[11,"as_ref","identity::crypto","",34,[[]]],[11,"as_ref","","",35,[[]]],[11,"verify","","",112,[[["serialize",8],["signaturevalue",4]],[["result",4],["error",4]]]],[11,"verify","identity::crypto::merkle_key","",23,[[["serialize",8],["signaturevalue",4]],[["result",4],["error",4]]]],[11,"deserialize","identity::crypto","",40,[[],[["signaturevalue",4],["result",4]]]],[11,"deserialize","identity::core","",5,[[],[["result",4],["url",3]]]],[11,"deserialize","","",3,[[],[["oneormany",4],["result",4]]]],[11,"deserialize","","",4,[[],[["timestamp",3],["result",4]]]],[11,"deserialize","identity::crypto","",37,[[],[["result",4],["signature",3]]]],[11,"deserialize","identity::core","",0,[[],[["result",4],["bitset",3]]]],[11,"deserialize","","",1,[[],[["result",4],["context",4]]]],[11,"deserialize","identity::crypto","",33,[[],[["result",4],["keytype",4]]]],[11,"tag","","",112,[[],["merkletag",3]]],[11,"tag","","",33,[[],["merkletag",3]]],[11,"tag","","",32,[[],["merkletag",3]]],[11,"name","identity::crypto::merkle_key","",19,[[],["string",3]]],[11,"name","identity::crypto","",112,[[],["string",3]]],[11,"name","identity::crypto::merkle_key","",23,[[],["string",3]]],[11,"deref_mut","identity::core","",5,[[]]],[11,"partial_cmp","identity::crypto","",33,[[["keytype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",37,[[["signature",3]],[["ordering",4],["option",4]]]],[11,"lt","","",37,[[["signature",3]]]],[11,"le","","",37,[[["signature",3]]]],[11,"gt","","",37,[[["signature",3]]]],[11,"ge","","",37,[[["signature",3]]]],[11,"partial_cmp","identity::crypto::merkle_tree","",26,[[["hash",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","identity::core","",4,[[["timestamp",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["timestamp",3]]]],[11,"le","","",4,[[["timestamp",3]]]],[11,"gt","","",4,[[["timestamp",3]]]],[11,"ge","","",4,[[["timestamp",3]]]],[11,"partial_cmp","identity::crypto::merkle_key","",22,[[["merkletag",3]],[["ordering",4],["option",4]]]],[11,"lt","","",22,[[["merkletag",3]]]],[11,"le","","",22,[[["merkletag",3]]]],[11,"gt","","",22,[[["merkletag",3]]]],[11,"ge","","",22,[[["merkletag",3]]]],[11,"partial_cmp","identity::core","",5,[[["url",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["url",3]]]],[11,"le","","",5,[[["url",3]]]],[11,"gt","","",5,[[["url",3]]]],[11,"ge","","",5,[[["url",3]]]],[11,"partial_cmp","","",3,[[["oneormany",4]],[["ordering",4],["option",4]]]],[11,"lt","","",3,[[["oneormany",4]]]],[11,"le","","",3,[[["oneormany",4]]]],[11,"gt","","",3,[[["oneormany",4]]]],[11,"ge","","",3,[[["oneormany",4]]]],[11,"partial_cmp","identity::crypto","",40,[[["signaturevalue",4]],[["ordering",4],["option",4]]]],[11,"lt","","",40,[[["signaturevalue",4]]]],[11,"le","","",40,[[["signaturevalue",4]]]],[11,"gt","","",40,[[["signaturevalue",4]]]],[11,"ge","","",40,[[["signaturevalue",4]]]],[11,"ct_eq","identity::crypto::merkle_tree","",26,[[["hash",3]],["choice",3]]],[11,"fmt","identity::core","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::core","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"zeroize","identity::crypto","",31,[[]]],[11,"zeroize","","",34,[[]]],[11,"zeroize","","",35,[[]]],[11,"index_mut","","",30,[[]]],[11,"index_mut","identity::core","Write into a `serde_json::Value` using the syntax…",2,[[],["value",4]]],[11,"default","","",2,[[],["value",4]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[["string",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[["value",4]]]],[11,"ne","","",2,[[["value",4]]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"clone","","",2,[[],["value",4]]],[11,"from_iter","","Convert an iteratable type to a `Value`",2,[[],["value",4]]],[11,"from_iter","","Convert an iteratable type to a `Value`",2,[[],["value",4]]],[11,"deserialize","","",2,[[],[["result",4],["value",4]]]],[11,"deserialize_any","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_i8","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_i16","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_i32","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_i64","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_u8","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_u16","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_u32","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_u64","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_f32","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_f64","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_i128","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_u128","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_option","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_enum","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_newtype_struct","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_bool","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_char","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_str","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_string","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_bytes","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_byte_buf","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_unit","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_unit_struct","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_seq","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple_struct","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_map","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_struct","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_identifier","","",2,[[],[["error",3],["result",4]]]],[11,"deserialize_ignored_any","","",2,[[],[["error",3],["result",4]]]],[11,"index","","Index into a `serde_json::Value` using the syntax…",2,[[],["value",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"from_str","","",2,[[],[["value",4],["error",3],["result",4]]]],[11,"into_deserializer","","",2,[[]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","Convert boolean to `Value`",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","Convert 32-bit floating point number to `Value`",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","Convert copy-on-write string to `Value`",2,[[["cow",4]],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","Convert `String` to `Value`",2,[[["string",3]],["value",4]]],[11,"from","","Convert `()` to `Value`",2,[[],["value",4]]],[11,"from","","Convert 64-bit floating point number to `Value`",2,[[],["value",4]]],[11,"from","","Convert a `Vec` to `Value`",2,[[["vec",3]],["value",4]]],[11,"from","","Convert map (with string keys) to `Value`",2,[[["string",3],["map",3],["value",4]],["value",4]]],[11,"from","","Convert string slice to `Value`",2,[[],["value",4]]],[11,"from","","Convert `Number` to `Value`",2,[[["number",3]],["value",4]]],[11,"from","","Convert a slice to `Value`",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"from","","",2,[[],["value",4]]],[11,"fmt","","Display a JSON value as a string.",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","identity::core::diff","",15,[[],["diffstring",3]]],[11,"clone","","",13,[[],["diffhashset",3]]],[11,"clone","","",17,[[],["diffvec",3]]],[11,"clone","","",12,[[],["diffhashmap",3]]],[11,"clone","","",14,[[],["diffoption",4]]],[11,"hash","","",15,[[]]],[11,"default","","",14,[[],["diffoption",4]]],[11,"default","","",17,[[],["diffvec",3]]],[11,"default","","",12,[[],["diffhashmap",3]]],[11,"default","","",15,[[],["diffstring",3]]],[11,"from","","",14,[[["option",4]],["diffoption",4]]],[11,"into","","",14,[[],["option",4]]],[11,"cmp","","",15,[[["diffstring",3]],["ordering",4]]],[11,"fmt","","",12,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",13,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",14,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",17,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",13,[[["diffhashset",3]]]],[11,"ne","","",13,[[["diffhashset",3]]]],[11,"eq","","",12,[[["diffhashmap",3]]]],[11,"ne","","",12,[[["diffhashmap",3]]]],[11,"eq","","",17,[[["diffvec",3]]]],[11,"ne","","",17,[[["diffvec",3]]]],[11,"eq","","",14,[[["diffoption",4]]]],[11,"ne","","",14,[[["diffoption",4]]]],[11,"eq","","",15,[[["diffstring",3]]]],[11,"ne","","",15,[[["diffstring",3]]]],[11,"partial_cmp","","",15,[[["diffstring",3]],[["ordering",4],["option",4]]]],[11,"lt","","",15,[[["diffstring",3]]]],[11,"le","","",15,[[["diffstring",3]]]],[11,"gt","","",15,[[["diffstring",3]]]],[11,"ge","","",15,[[["diffstring",3]]]],[11,"deserialize","","",12,[[],[["result",4],["diffhashmap",3]]]],[11,"deserialize","","",15,[[],[["result",4],["diffstring",3]]]],[11,"deserialize","","",17,[[],[["diffvec",3],["result",4]]]],[11,"deserialize","","",13,[[],[["result",4],["diffhashset",3]]]],[11,"deserialize","","",14,[[],[["result",4],["diffoption",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"diff","identity::core","Compares two `serde_json::Value` types; `self`, `diff` and…",2,[[["value",4]],[["error",4],["result",4]]]],[11,"merge","","Merges a `DiffValue`; `diff` with `self`; a…",2,[[],[["error",4],["result",4],["value",4]]]],[11,"from_diff","","Converts from a `diff` of type `DiffValue` to a…",2,[[],[["error",4],["result",4],["value",4]]]],[11,"into_diff","","converts a `serde_json::Value` to a `DiffValue`.",2,[[],[["error",4],["result",4]]]],[11,"diff","identity::did","",73,[[["did",3]],[["result",4],["error",4]]]],[11,"merge","","",73,[[],[["result",4],["did",3],["error",4]]]],[11,"from_diff","","",73,[[],[["result",4],["did",3],["error",4]]]],[11,"into_diff","","",73,[[],[["result",4],["error",4]]]],[11,"serialize","identity::core::diff","",17,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"eq","identity::did","",72,[[["error",4]]]],[11,"eq","","",73,[[]]],[11,"eq","","",73,[[]]],[11,"eq","","",73,[[["did",3]]]],[11,"from_str","","",73,[[],[["result",4],["did",3]]]],[11,"cmp","","",73,[[["did",3]],["ordering",4]]],[11,"cmp","","",72,[[["error",4]],["ordering",4]]],[11,"as_ref","","",73,[[]]],[11,"partial_cmp","","",73,[[["did",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",72,[[["error",4]],[["ordering",4],["option",4]]]],[11,"deserialize","","",73,[[],[["result",4],["did",3]]]],[11,"fmt","","",73,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",72,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",72,[[],["error",4]]],[11,"clone","","",73,[[],["did",3]]],[11,"try_from","","",73,[[["string",3]],[["did",3],["result",4]]]],[11,"serialize","","",73,[[],["result",4]]],[11,"hash","","",73,[[]]],[11,"hash","","",72,[[]]],[11,"fmt","","",72,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",73,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::crypto::merkle_key","",18,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",18,[[],["sha256",3]]],[11,"update","","",18,[[]]],[11,"default","","",18,[[],["sha256",3]]],[11,"reset","","",18,[[]]],[11,"finalize_into_dirty","","",18,[[["genericarray",3]]]],[11,"write","","",18,[[],[["result",4],["error",3]]]],[11,"flush","","",18,[[],[["error",3],["result",4]]]],[11,"signature_mut","identity::credential","",57,[[],[["option",4],["signature",3]]]],[11,"signature_mut","","",53,[[],[["option",4],["signature",3]]]],[11,"clone","","",51,[[],["status",3]]],[11,"clone","","",53,[[],["verifiablecredential",3]]],[11,"clone","","",55,[[],["presentationbuilder",3]]],[11,"clone","","",49,[[],["refresh",3]]],[11,"clone","","",47,[[],["issuer",4]]],[11,"clone","","",45,[[],["credential",3]]],[11,"clone","","",56,[[],["presentation",3]]],[11,"clone","","",52,[[],["subject",3]]],[11,"clone","","",50,[[],["schema",3]]],[11,"clone","","",57,[[],["verifiablepresentation",3]]],[11,"clone","","",48,[[],["policy",3]]],[11,"clone","","",46,[[],["evidence",3]]],[11,"clone","","",44,[[],["credentialbuilder",3]]],[11,"set_signature","","",57,[[["signature",3]]]],[11,"set_signature","","",53,[[["signature",3]]]],[11,"source","","",54,[[],[["option",4],["error",8]]]],[11,"signature","","",57,[[],[["signature",3],["option",4]]]],[11,"signature","","",53,[[],[["signature",3],["option",4]]]],[11,"default","","",46,[[],["evidence",3]]],[11,"default","","",52,[[],["subject",3]]],[11,"default","","",44,[[],["credentialbuilder",3]]],[11,"default","","",55,[[],["presentationbuilder",3]]],[11,"default","","",48,[[],["policy",3]]],[11,"from","","",47,[[],["issuer",4]]],[11,"from","","",54,[[["error",4]],["error",4]]],[11,"deref","","",53,[[]]],[11,"deref","","",57,[[]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",44,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",56,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",52,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",46,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",55,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",46,[[["evidence",3]]]],[11,"ne","","",46,[[["evidence",3]]]],[11,"eq","","",50,[[["schema",3]]]],[11,"ne","","",50,[[["schema",3]]]],[11,"eq","","",45,[[["credential",3]]]],[11,"ne","","",45,[[["credential",3]]]],[11,"eq","","",51,[[["status",3]]]],[11,"ne","","",51,[[["status",3]]]],[11,"eq","","",57,[[["verifiablepresentation",3]]]],[11,"ne","","",57,[[["verifiablepresentation",3]]]],[11,"eq","","",56,[[["presentation",3]]]],[11,"ne","","",56,[[["presentation",3]]]],[11,"eq","","",47,[[["issuer",4]]]],[11,"ne","","",47,[[["issuer",4]]]],[11,"eq","","",53,[[["verifiablecredential",3]]]],[11,"ne","","",53,[[["verifiablecredential",3]]]],[11,"eq","","",48,[[["policy",3]]]],[11,"ne","","",48,[[["policy",3]]]],[11,"eq","","",52,[[["subject",3]]]],[11,"ne","","",52,[[["subject",3]]]],[11,"eq","","",49,[[["refresh",3]]]],[11,"ne","","",49,[[["refresh",3]]]],[11,"deref_mut","","",53,[[]]],[11,"deref_mut","","",57,[[]]],[11,"deserialize","","",48,[[],[["policy",3],["result",4]]]],[11,"deserialize","","",53,[[],[["verifiablecredential",3],["result",4]]]],[11,"deserialize","","",56,[[],[["presentation",3],["result",4]]]],[11,"deserialize","","",47,[[],[["issuer",4],["result",4]]]],[11,"deserialize","","",45,[[],[["credential",3],["result",4]]]],[11,"deserialize","","",46,[[],[["result",4],["evidence",3]]]],[11,"deserialize","","",51,[[],[["result",4],["status",3]]]],[11,"deserialize","","",50,[[],[["result",4],["schema",3]]]],[11,"deserialize","","",52,[[],[["result",4],["subject",3]]]],[11,"deserialize","","",57,[[],[["result",4],["verifiablepresentation",3]]]],[11,"deserialize","","",49,[[],[["refresh",3],["result",4]]]],[11,"fmt","","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",56,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",52,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",50,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"as_mut","identity::did","",63,[[]]],[11,"default","","",65,[[],["methodbuilder",3]]],[11,"default","identity::did::resolution","",77,[[],["inputmetadata",3]]],[11,"default","identity::did","",70,[[],["methodscope",4]]],[11,"default","","",64,[[],["orderedset",3]]],[11,"default","identity::did::resolution","",79,[[],["resolutionmetadata",3]]],[11,"default","","",74,[[],["dereference",3]]],[11,"default","identity::did","",58,[[],["documentbuilder",3]]],[11,"default","","",61,[[],["servicebuilder",3]]],[11,"default","identity::did::resolution","",78,[[],["resolution",3]]],[11,"default","","",75,[[],["documentmetadata",3]]],[11,"default","identity::did::verifiable","",87,[[],["properties",3]]],[11,"signature_mut","identity::did","",59,[[],[["option",4],["signature",3]]]],[11,"signature_mut","identity::did::verifiable","",87,[[],[["option",4],["signature",3]]]],[11,"deref","identity::did","",64,[[]]],[11,"deref","","",63,[[]]],[11,"deref","identity::did::verifiable","",87,[[]]],[11,"cmp","identity::did","",68,[[["methodquery",3]],["ordering",4]]],[11,"cmp","","",64,[[["orderedset",3]],["ordering",4]]],[11,"cmp","","",70,[[["methodscope",4]],["ordering",4]]],[11,"cmp","identity::did::resolution","",76,[[["errorkind",4]],["ordering",4]]],[11,"cmp","identity::did","",71,[[["methodtype",4]],["ordering",4]]],[11,"cmp","","",63,[[["didkey",3]],["ordering",4]]],[11,"cmp","identity::did::verifiable","",87,[[["properties",3]],["ordering",4]]],[11,"diff","identity::did","",69,[[["methodref",4]],[["error",4],["result",4]]]],[11,"merge","","",69,[[],[["result",4],["methodref",4],["error",4]]]],[11,"from_diff","","",69,[[],[["result",4],["methodref",4],["error",4]]]],[11,"into_diff","","",69,[[],[["error",4],["result",4]]]],[11,"diff","","",66,[[["method",3]],[["error",4],["result",4]]]],[11,"merge","","",66,[[],[["method",3],["result",4],["error",4]]]],[11,"from_diff","","",66,[[],[["method",3],["result",4],["error",4]]]],[11,"into_diff","","",66,[[],[["error",4],["result",4]]]],[11,"diff","","",71,[[["methodtype",4]],[["result",4],["error",4]]]],[11,"merge","","",71,[[],[["error",4],["methodtype",4],["result",4]]]],[11,"from_diff","","",71,[[],[["error",4],["methodtype",4],["result",4]]]],[11,"into_diff","","",71,[[],[["result",4],["error",4]]]],[11,"diff","","",64,[[["orderedset",3]],[["error",4],["result",4]]]],[11,"merge","","",64,[[],[["result",4],["orderedset",3],["error",4]]]],[11,"from_diff","","",64,[[],[["result",4],["orderedset",3],["error",4]]]],[11,"into_diff","","",64,[[],[["error",4],["result",4]]]],[11,"diff","","",63,[[["didkey",3]],[["result",4],["error",4]]]],[11,"merge","","",63,[[],[["error",4],["result",4],["didkey",3]]]],[11,"from_diff","","",63,[[],[["error",4],["result",4],["didkey",3]]]],[11,"into_diff","","",63,[[],[["result",4],["error",4]]]],[11,"diff","","",62,[[["service",3]],[["error",4],["result",4]]]],[11,"merge","","",62,[[],[["service",3],["result",4],["error",4]]]],[11,"from_diff","","",62,[[],[["service",3],["result",4],["error",4]]]],[11,"into_diff","","",62,[[],[["error",4],["result",4]]]],[11,"diff","","",59,[[["document",3]],[["result",4],["error",4]]]],[11,"merge","","",59,[[],[["result",4],["error",4],["document",3]]]],[11,"from_diff","","",59,[[],[["result",4],["error",4],["document",3]]]],[11,"into_diff","","",59,[[],[["result",4],["error",4]]]],[11,"diff","","",67,[[["methoddata",4]],[["error",4],["result",4]]]],[11,"merge","","",67,[[],[["result",4],["error",4],["methoddata",4]]]],[11,"from_diff","","",67,[[],[["result",4],["error",4],["methoddata",4]]]],[11,"into_diff","","",67,[[],[["error",4],["result",4]]]],[11,"fmt","identity::did::resolution","",82,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",76,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",63,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",78,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",65,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",77,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",75,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",71,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",67,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",64,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",83,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",68,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",66,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::verifiable","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",74,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",69,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::did::resolution","",79,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","identity::did","",64,[[["orderedset",3]]]],[11,"ne","","",64,[[["orderedset",3]]]],[11,"eq","identity::did::resolution","",79,[[["resolutionmetadata",3]]]],[11,"ne","","",79,[[["resolutionmetadata",3]]]],[11,"eq","","",74,[[["dereference",3]]]],[11,"ne","","",74,[[["dereference",3]]]],[11,"eq","identity::did","",62,[[["service",3]]]],[11,"ne","","",62,[[["service",3]]]],[11,"eq","identity::did::resolution","",78,[[["resolution",3]]]],[11,"ne","","",78,[[["resolution",3]]]],[11,"eq","identity::did","",67,[[["methoddata",4]]]],[11,"ne","","",67,[[["methoddata",4]]]],[11,"eq","","",59,[[["document",3]]]],[11,"ne","","",59,[[["document",3]]]],[11,"eq","","",63,[[["didkey",3]]]],[11,"eq","identity::did::resolution","",82,[[["secondaryresource",4]]]],[11,"ne","","",82,[[["secondaryresource",4]]]],[11,"eq","identity::did::verifiable","",87,[[["properties",3]]]],[11,"ne","","",87,[[["properties",3]]]],[11,"eq","identity::did::resolution","",77,[[["inputmetadata",3]]]],[11,"ne","","",77,[[["inputmetadata",3]]]],[11,"eq","","",75,[[["documentmetadata",3]]]],[11,"ne","","",75,[[["documentmetadata",3]]]],[11,"eq","identity::did","",69,[[["methodref",4]]]],[11,"ne","","",69,[[["methodref",4]]]],[11,"eq","","",71,[[["methodtype",4]]]],[11,"eq","","",68,[[["methodquery",3]]]],[11,"ne","","",68,[[["methodquery",3]]]],[11,"eq","identity::did::resolution","",83,[[["metadocument",3]]]],[11,"ne","","",83,[[["metadocument",3]]]],[11,"eq","identity::did","",70,[[["methodscope",4]]]],[11,"eq","identity::did::resolution","",81,[[["resource",4]]]],[11,"ne","","",81,[[["resource",4]]]],[11,"eq","","",80,[[["primaryresource",4]]]],[11,"ne","","",80,[[["primaryresource",4]]]],[11,"eq","identity::did","",66,[[["method",3]]]],[11,"ne","","",66,[[["method",3]]]],[11,"eq","identity::did::resolution","",76,[[["errorkind",4]]]],[11,"serialize","","",78,[[],["result",4]]],[11,"serialize","identity::did","",67,[[],["result",4]]],[11,"serialize","identity::did::resolution","",79,[[],["result",4]]],[11,"serialize","identity::did","",64,[[],["result",4]]],[11,"serialize","identity::did::resolution","",82,[[],["result",4]]],[11,"serialize","identity::did","",66,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","identity::did::resolution","",75,[[],["result",4]]],[11,"serialize","identity::did","",59,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","identity::did::resolution","",83,[[],["result",4]]],[11,"serialize","","",76,[[],["result",4]]],[11,"serialize","","",81,[[],["result",4]]],[11,"serialize","","",77,[[],["result",4]]],[11,"serialize","","",80,[[],["result",4]]],[11,"serialize","identity::did::verifiable","",87,[[],["result",4]]],[11,"serialize","identity::did","",63,[[],["result",4]]],[11,"serialize","identity::did::resolution","",74,[[],["result",4]]],[11,"serialize","identity::did","",69,[[],["result",4]]],[11,"from_str","","",70,[[],[["result",4],["methodscope",4]]]],[11,"from_str","","",71,[[],[["result",4],["methodtype",4]]]],[11,"borrow","","",63,[[],["did",3]]],[11,"signature","identity::did::verifiable","",87,[[],[["signature",3],["option",4]]]],[11,"signature","identity::did","",59,[[],[["signature",3],["option",4]]]],[11,"try_from","","",64,[[["vec",3]],[["result",4],["orderedset",3]]]],[11,"clone","identity::did::resolution","",83,[[],["metadocument",3]]],[11,"clone","identity::did","",62,[[],["service",3]]],[11,"clone","","",61,[[],["servicebuilder",3]]],[11,"clone","","",58,[[],["documentbuilder",3]]],[11,"clone","","",71,[[],["methodtype",4]]],[11,"clone","","",70,[[],["methodscope",4]]],[11,"clone","","",63,[[],["didkey",3]]],[11,"clone","","",59,[[],["document",3]]],[11,"clone","identity::did::resolution","",76,[[],["errorkind",4]]],[11,"clone","identity::did","",66,[[],["method",3]]],[11,"clone","identity::did::resolution","",79,[[],["resolutionmetadata",3]]],[11,"clone","identity::did","",64,[[],["orderedset",3]]],[11,"clone","","",67,[[],["methoddata",4]]],[11,"clone","identity::did::resolution","",78,[[],["resolution",3]]],[11,"clone","","",74,[[],["dereference",3]]],[11,"clone","identity::did::verifiable","",87,[[],["properties",3]]],[11,"clone","identity::did","",69,[[],["methodref",4]]],[11,"clone","identity::did::resolution","",77,[[],["inputmetadata",3]]],[11,"clone","","",81,[[],["resource",4]]],[11,"clone","identity::did","",68,[[],["methodquery",3]]],[11,"clone","","",65,[[],["methodbuilder",3]]],[11,"clone","identity::did::resolution","",80,[[],["primaryresource",4]]],[11,"clone","","",82,[[],["secondaryresource",4]]],[11,"clone","","",75,[[],["documentmetadata",3]]],[11,"hash","identity::did","",63,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",68,[[]]],[11,"hash","identity::did::resolution","",76,[[]]],[11,"source","identity::did","",60,[[],[["option",4],["error",8]]]],[11,"from_iter","","",64,[[],["orderedset",3]]],[11,"revocation","","",66,[[],[["error",4],["result",4],["option",4]]]],[11,"from","","",69,[[["method",3]],["methodref",4]]],[11,"from","","",69,[[["did",3]],["methodref",4]]],[11,"from","","",68,[[["string",3]],["methodquery",3]]],[11,"from","","",63,[[],["didkey",3]]],[11,"from","identity::did::resolution","",82,[[["method",3],["btreemap",3]],["secondaryresource",4]]],[11,"from","identity::did","",68,[[["signature",3]],["methodquery",3]]],[11,"from","identity::did::resolution","",80,[[["btreemap",3],["document",3]],["primaryresource",4]]],[11,"from","","",81,[[["primaryresource",4]],["resource",4]]],[11,"from","","",80,[[["url",3]],["primaryresource",4]]],[11,"from","","",82,[[["btreemap",3],["service",3]],["secondaryresource",4]]],[11,"from","identity::did","",68,[[["did",3]],["methodquery",3]]],[11,"from","identity::did::resolution","",82,[[["btreemap",3],["methodref",4]],["secondaryresource",4]]],[11,"from","identity::did","",68,[[],["methodquery",3]]],[11,"from","","",60,[[["error",4]],["error",4]]],[11,"from","identity::did::resolution","",82,[[["didkey",3]],["secondaryresource",4]]],[11,"from","","",81,[[["secondaryresource",4]],["resource",4]]],[11,"from","","",82,[[["did",3]],["secondaryresource",4]]],[11,"from","identity::did","",60,[[["error",4]],["error",4]]],[11,"as_ref","","",69,[[],["did",3]]],[11,"as_ref","","",63,[[]]],[11,"as_ref","","",62,[[],["did",3]]],[11,"as_ref","","",66,[[],["did",3]]],[11,"deserialize","identity::did::resolution","",81,[[],[["resource",4],["result",4]]]],[11,"deserialize","identity::did","",62,[[],[["service",3],["result",4]]]],[11,"deserialize","","",69,[[],[["result",4],["methodref",4]]]],[11,"deserialize","","",63,[[],[["didkey",3],["result",4]]]],[11,"deserialize","identity::did::resolution","",74,[[],[["dereference",3],["result",4]]]],[11,"deserialize","identity::did","",66,[[],[["result",4],["method",3]]]],[11,"deserialize","identity::did::resolution","",77,[[],[["result",4],["inputmetadata",3]]]],[11,"deserialize","","",75,[[],[["documentmetadata",3],["result",4]]]],[11,"deserialize","","",78,[[],[["resolution",3],["result",4]]]],[11,"deserialize","","",80,[[],[["result",4],["primaryresource",4]]]],[11,"deserialize","identity::did","",64,[[],[["result",4],["orderedset",3]]]],[11,"deserialize","identity::did::resolution","",83,[[],[["result",4],["metadocument",3]]]],[11,"deserialize","identity::did","",71,[[],[["result",4],["methodtype",4]]]],[11,"deserialize","identity::did::resolution","",82,[[],[["result",4],["secondaryresource",4]]]],[11,"deserialize","","",76,[[],[["errorkind",4],["result",4]]]],[11,"deserialize","identity::did","",67,[[],[["result",4],["methoddata",4]]]],[11,"deserialize","identity::did::verifiable","",87,[[],[["result",4],["properties",3]]]],[11,"deserialize","identity::did","",59,[[],[["result",4],["document",3]]]],[11,"deserialize","identity::did::resolution","",79,[[],[["result",4],["resolutionmetadata",3]]]],[11,"deref_mut","identity::did::verifiable","",87,[[]]],[11,"deref_mut","identity::did","",63,[[]]],[11,"partial_cmp","identity::did::resolution","",76,[[["errorkind",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","identity::did::verifiable","",87,[[["properties",3]],[["ordering",4],["option",4]]]],[11,"lt","","",87,[[["properties",3]]]],[11,"le","","",87,[[["properties",3]]]],[11,"gt","","",87,[[["properties",3]]]],[11,"ge","","",87,[[["properties",3]]]],[11,"partial_cmp","identity::did","",70,[[["methodscope",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",68,[[["methodquery",3]],[["ordering",4],["option",4]]]],[11,"lt","","",68,[[["methodquery",3]]]],[11,"le","","",68,[[["methodquery",3]]]],[11,"gt","","",68,[[["methodquery",3]]]],[11,"ge","","",68,[[["methodquery",3]]]],[11,"partial_cmp","","",64,[[["orderedset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",64,[[["orderedset",3]]]],[11,"le","","",64,[[["orderedset",3]]]],[11,"gt","","",64,[[["orderedset",3]]]],[11,"ge","","",64,[[["orderedset",3]]]],[11,"partial_cmp","","",63,[[["didkey",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",71,[[["methodtype",4]],[["ordering",4],["option",4]]]],[11,"set_signature","","",59,[[["signature",3]]]],[11,"set_signature","identity::did::verifiable","",87,[[["signature",3]]]],[11,"fmt","identity::did","",63,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",66,[[["formatter",3]],[["error",3],["result",4]]]],[11,"set_signature","identity::iota::did","",100,[[["signature",3]]]],[11,"set_signature","","",101,[[["signature",3]]]],[11,"default","identity::iota","",94,[[],["network",4]]],[11,"default","","",109,[[],["messageindex",3]]],[11,"default","","",108,[[],["messageid",3]]],[11,"default","identity::iota::did","",103,[[],["properties",3]]],[11,"default","identity::iota","",93,[[],["clientbuilder",3]]],[11,"default","","",90,[[],["diffchain",3]]],[11,"deref","identity::iota::did","",102,[[]]],[11,"deref","","",100,[[]]],[11,"deref","","",104,[[]]],[11,"deref","identity::iota","",109,[[]]],[11,"cmp","identity::iota::did","",104,[[["did",3]],["ordering",4]]],[11,"cmp","identity::iota","",108,[[["messageid",3]],["ordering",4]]],[11,"cmp","","",94,[[["network",4]],["ordering",4]]],[11,"deserialize","identity::iota::did","",101,[[],[["result",4],["documentdiff",3]]]],[11,"deserialize","identity::iota","",90,[[],[["diffchain",3],["result",4]]]],[11,"deserialize","identity::iota::did","",102,[[],[["method",3],["result",4]]]],[11,"deserialize","identity::iota","",91,[[],[["documentchain",3],["result",4]]]],[11,"deserialize","","",108,[[],[["result",4],["messageid",3]]]],[11,"deserialize","identity::iota::did","",100,[[],[["document",3],["result",4]]]],[11,"deserialize","identity::iota","",89,[[],[["authchain",3],["result",4]]]],[11,"deserialize","identity::iota::did","",104,[[],[["did",3],["result",4]]]],[11,"deserialize","","",103,[[],[["result",4],["properties",3]]]],[11,"fmt","identity::iota","",99,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",96,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",95,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",101,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota","",97,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",100,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",103,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota","",108,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",98,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",104,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",107,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",105,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",94,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",109,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",102,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota","",95,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",95,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",99,[[["presentationvalidation",3]]]],[11,"ne","","",99,[[["presentationvalidation",3]]]],[11,"eq","identity::iota::did","",101,[[["documentdiff",3]]]],[11,"ne","","",101,[[["documentdiff",3]]]],[11,"eq","identity::iota","",108,[[]]],[11,"eq","","",108,[[["messageid",3]]]],[11,"ne","","",108,[[["messageid",3]]]],[11,"eq","identity::iota::did","",104,[[["did",3]]]],[11,"ne","","",104,[[["did",3]]]],[11,"eq","","",103,[[["properties",3]]]],[11,"ne","","",103,[[["properties",3]]]],[11,"eq","identity::iota","",96,[[["credentialvalidation",3]]]],[11,"ne","","",96,[[["credentialvalidation",3]]]],[11,"eq","identity::iota::did","",102,[[["method",3]]]],[11,"ne","","",102,[[["method",3]]]],[11,"eq","identity::iota","",94,[[["network",4]]]],[11,"eq","","",98,[[["documentvalidation",3]]]],[11,"ne","","",98,[[["documentvalidation",3]]]],[11,"eq","identity::iota::did","",100,[[["document",3]]]],[11,"ne","","",100,[[["document",3]]]],[11,"from_str","","",104,[[],[["result",4],["did",3]]]],[11,"message_id","","",100,[[],["messageid",3]]],[11,"set_message_id","","",100,[[["messageid",3]]]],[11,"previous_message_id","","",100,[[],["messageid",3]]],[11,"set_previous_message_id","","",100,[[["messageid",3]]]],[11,"message_id","","",101,[[],["messageid",3]]],[11,"set_message_id","","",101,[[["messageid",3]]]],[11,"previous_message_id","","",101,[[],["messageid",3]]],[11,"set_previous_message_id","","",101,[[["messageid",3]]]],[11,"try_from","","",104,[[["did",3]],[["did",3],["result",4]]]],[11,"try_from","","",100,[[["btreemap",3],["document",3]],[["document",3],["result",4]]]],[11,"try_from","","",102,[[["method",3],["btreemap",3]],[["method",3],["result",4]]]],[11,"clone","identity::iota","",96,[[],["credentialvalidation",3]]],[11,"clone","identity::iota::did","",101,[[],["documentdiff",3]]],[11,"clone","","",104,[[],["did",3]]],[11,"clone","identity::iota","",92,[[],["client",3]]],[11,"clone","identity::iota::did","",100,[[],["document",3]]],[11,"clone","identity::iota","",99,[[],["presentationvalidation",3]]],[11,"clone","identity::iota::did","",103,[[],["properties",3]]],[11,"clone","identity::iota","",93,[[],["clientbuilder",3]]],[11,"clone","identity::iota::did","",102,[[],["method",3]]],[11,"clone","identity::iota","",108,[[],["messageid",3]]],[11,"clone","","",98,[[],["documentvalidation",3]]],[11,"clone","","",109,[[],["messageindex",3]]],[11,"clone","","",97,[[],["credentialvalidator",3]]],[11,"clone","","",94,[[],["network",4]]],[11,"hash","identity::iota::did","",104,[[]]],[11,"hash","identity::iota","",94,[[]]],[11,"source","","",105,[[],[["option",4],["error",8]]]],[11,"serialize","identity::iota::did","",103,[[],["result",4]]],[11,"serialize","","",101,[[],["result",4]]],[11,"serialize","","",102,[[],["result",4]]],[11,"serialize","","",100,[[],["result",4]]],[11,"serialize","identity::iota","",108,[[],["result",4]]],[11,"serialize","","",91,[[],["result",4]]],[11,"serialize","","",99,[[],["result",4]]],[11,"serialize","identity::iota::did","",104,[[],["result",4]]],[11,"serialize","identity::iota","",96,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","","",90,[[],["result",4]]],[11,"serialize","","",98,[[],["result",4]]],[11,"from_iter","","",109,[[],["messageindex",3]]],[11,"from","","",108,[[["string",3]],["messageid",3]]],[11,"from","","",105,[[["error",4]],["error",4]]],[11,"from","","",105,[[["error",4]],["error",4]]],[11,"from","","",94,[[["did",3]],["network",4]]],[11,"from","identity::iota::did","",100,[[["btreemap",3],["document",3],["properties",3]],["document",3]]],[11,"from","identity::did","",73,[[["did",3]],["did",3]]],[11,"from","identity::iota","",105,[[["error",4]],["error",4]]],[11,"from","","",105,[[["error",4]],["error",4]]],[11,"from","","",94,[[["network",4]],["network",4]]],[11,"from","identity::did","",59,[[["document",3]],[["properties",3],["btreemap",3],["document",3]]]],[11,"from","identity::iota","",105,[[["error",4]],["error",4]]],[11,"from","identity::did","",66,[[["method",3]],[["method",3],["btreemap",3]]]],[11,"from","identity::iota","",105,[[["error",4]],["error",4]]],[11,"from","","",105,[[["error",4]],["error",4]]],[11,"from","identity::did","",69,[[["method",3]],[["btreemap",3],["methodref",4]]]],[11,"revocation","identity::iota::did","",102,[[],[["error",4],["result",4],["option",4]]]],[11,"as_ref","","",104,[[],["did",3]]],[11,"signature_mut","","",101,[[],[["option",4],["signature",3]]]],[11,"signature_mut","","",100,[[],[["option",4],["signature",3]]]],[11,"deref_mut","identity::iota","",109,[[]]],[11,"partial_cmp","","",108,[[["messageid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",108,[[["messageid",3]]]],[11,"le","","",108,[[["messageid",3]]]],[11,"gt","","",108,[[["messageid",3]]]],[11,"ge","","",108,[[["messageid",3]]]],[11,"partial_cmp","identity::iota::did","",104,[[["did",3]],[["ordering",4],["option",4]]]],[11,"lt","","",104,[[["did",3]]]],[11,"le","","",104,[[["did",3]]]],[11,"gt","","",104,[[["did",3]]]],[11,"ge","","",104,[[["did",3]]]],[11,"partial_cmp","identity::iota","",94,[[["network",4]],[["ordering",4],["option",4]]]],[11,"is_supported","","",92,[[["did",3]]]],[11,"read","","",92,[[["did",3],["inputmetadata",3]],[["pin",3],["box",3]]]],[11,"fmt","","",105,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",102,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",100,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota","",108,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",95,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","identity::iota::did","",104,[[["formatter",3]],[["error",3],["result",4]]]],[11,"signature","","",101,[[],[["signature",3],["option",4]]]],[11,"signature","","",100,[[],[["signature",3],["option",4]]]],[11,"new","identity::core","Creates a new [`BitSet`].",0,[[],["bitset",3]]],[11,"len","","Returns the total number of values in the set.",0,[[]]],[11,"is_empty","","Returns true if the set is empty.",0,[[]]],[11,"clear","","Clears all values in the set.",0,[[]]],[11,"contains","","Returns `true` if the set contains the specified `index`.",0,[[]]],[11,"insert","","Adds a new `index` to the set.",0,[[]]],[11,"insert_all","","Extends the set with the indices from `iter`.",0,[[]]],[11,"remove","","Removes the specified `index` from the set.",0,[[]]],[11,"serialize_b64","","Serializes the [`BitSet`] as a base64-encoded `String`.",0,[[],[["string",3],["result",4],["error",4]]]],[11,"serialize_vec","","Serializes the [`BitSet`] as a vector of bytes.",0,[[],[["error",4],["result",4],["vec",3]]]],[11,"deserialize_b64","","Deserializes a [`BitSet`] from base64-encoded `data`.",0,[[],[["error",4],["result",4],["bitset",3]]]],[11,"deserialize_slice","","Deserializes a [`BitSet`] from a slice of bytes.",0,[[],[["error",4],["result",4],["bitset",3]]]],[11,"get","","Index into a JSON array or map. A string index can be used…",2,[[],[["value",4],["option",4]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can…",2,[[],[["option",4],["value",4]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false…",2,[[]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map.…",2,[[],[["option",4],["map",3]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated…",2,[[],[["map",3],["option",4]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false…",2,[[]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector.…",2,[[],[["vec",3],["option",4]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable…",2,[[],[["option",4],["vec",3]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false…",2,[[]]],[11,"as_str","","If the `Value` is a String, returns the associated str.…",2,[[],["option",4]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false…",2,[[]]],[11,"is_i64","","Returns true if the `Value` is an integer between…",2,[[]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and…",2,[[]]],[11,"is_f64","","Returns true if the `Value` is a number that can be…",2,[[]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if…",2,[[],["option",4]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if…",2,[[],["option",4]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if…",2,[[],["option",4]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false…",2,[[]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.…",2,[[],["option",4]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false…",2,[[]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None…",2,[[],["option",4]]],[11,"pointer","","Looks up a value by a JSON Pointer.",2,[[],[["value",4],["option",4]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable…",2,[[],[["option",4],["value",4]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in…",2,[[],["value",4]]],[11,"len","","Returns the number of elements in the collection",3,[[]]],[11,"is_empty","","Returns `true` if the collection is empty",3,[[]]],[11,"get","","Returns a reference to the element at the given index.",3,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to the element at the given…",3,[[],["option",4]]],[11,"contains","","Returns `true` if the collection contains the given value.",3,[[]]],[11,"push","","Adds a new value to the collection.",3,[[]]],[11,"iter","","Returns an `Iterator` that yields items from the collection.",3,[[]]],[11,"as_slice","","Returns a reference to the contents as a slice.",3,[[]]],[11,"into_vec","","Consumes the [`OneOrMany`] and returns the contents as a…",3,[[],["vec",3]]],[11,"parse","","Parses a [`Timestamp`] from the provided input string.",4,[[],[["result",4],["error",4],["timestamp",3]]]],[11,"now","","Creates a new [`Timestamp`] with the current date and time.",4,[[],["timestamp",3]]],[11,"to_unix","","Returns the [`Timestamp`] as a Unix timestamp.",4,[[]]],[11,"to_rfc3339","","Returns the [`Timestamp`] as an RFC 3339 `String`.",4,[[],["string",3]]],[11,"parse","","Parses an absolute [`Url`] from the given input string.",5,[[],[["url",3],["result",4],["error",4]]]],[11,"into_string","","Consumes the [`Url`] and returns the value as a `String`.",5,[[],["string",3]]],[11,"join","","Parses the given input string as a [`Url`], with `self` as…",5,[[],[["url",3],["result",4],["error",4]]]],[11,"diff","identity::core::diff","",11,[[],["error",4]]],[11,"merge","","",11,[[],["error",4]]],[11,"convert","","",11,[[],["error",4]]],[18,"TYPE_KEY","identity::crypto::merkle_key","The `type` value of a Merkle Key Collection Verification…",111,null],[18,"TYPE_SIG","","The `type` value of a Merkle Key Collection Signature.",111,null],[11,"extract_tags","","Extracts the signature and digest algorithm tags from the…",111,[[],[["error",4],["result",4]]]],[11,"encode_key","","Creates a DID Document public key value for the given…",111,[[["hash",3]],["vec",3]]],[11,"encode_ed25519_key","","Creates a DID Document public key value for the given…",111,[[["hash",3]],["vec",3]]],[11,"from_borrowed","","Creates a new Merkle Key Collection [`Signer`] from a…",19,[[["publickey",3],["proof",3]],["signer",3]]],[11,"from_owned","","Creates a new Merkle Key Collection [`Signer`] from an…",19,[[["publickey",3],["proof",3]],["signer",3]]],[18,"ED25519","","A Merkle Key Collection tag specifying `Ed25519` as the…",22,null],[18,"SHA256","","A Merkle Key Collection tag specifying `SHA-256` as the…",22,null],[11,"new","","Creates a new [`MerkleTag`] object.",22,[[],["merkletag",3]]],[11,"from_borrowed","","Creates a new [`Verifier`] from a slice of bytes.",23,[[],["verifier",3]]],[11,"from_owned","","Creates a new [`Verifier`] from a vector of bytes.",23,[[["vec",3]],["verifier",3]]],[11,"set_revocation","","Sets the revocation flags associated with the verification…",23,[[["bitset",3]]]],[11,"clear_revocation","","Clears the revocation flags associated with the…",23,[[]]],[11,"from_slice","identity::crypto::merkle_tree","Creates a new [`struct@Hash`] from a slice of bytes.",26,[[],[["option",4],["hash",3]]]],[11,"from_slice_unchecked","","Creates a new [`struct@Hash`] from a slice of bytes.",26,[[],["hash",3]]],[11,"as_slice","","Returns the [`struct@Hash`] as a slice of bytes.",26,[[]]],[11,"get","","Returns the [`struct@Hash`] of the node.",27,[[],["hash",3]]],[11,"hash","","Computes the parent hash of `self` and `other` using a…",27,[[["hash",3]],["hash",3]]],[11,"hash_with","","Computes the parent hash of `self` and `other` using the…",27,[[["hash",3]],["hash",3]]],[11,"encode","","Encodes `self` as a vector of bytes.",27,[[],["vec",3]]],[11,"encode_into","","Encodes `self` as a vector of bytes, appended to `output`.",27,[[["vec",3]]]],[11,"decode","","Decodes a [`Node`] from a slice of bytes.",27,[[],[["option",4],["node",4]]]],[11,"new","","Creates a new [`Proof`] from a boxed slice of nodes.",28,[[["global",3],["box",3]],["proof",3]]],[11,"nodes","","Returns the nodes as a slice.",28,[[]]],[11,"index","","Returns the index of underlying leaf node in the Merkle…",28,[[]]],[11,"verify","","Verifies the computed root of `self` with the given `root`…",28,[[["hash",3]]]],[11,"verify_hash","","Verifies the computed root of `self` with the given `root`…",28,[[["hash",3],["hash",3]]]],[11,"root","","Computes the root hash from `target` using a default digest.",28,[[["hash",3]],["hash",3]]],[11,"root_with","","Computes the root hash from `target` using the given…",28,[[["hash",3]],["hash",3]]],[11,"encode","","Encodes `self` as a vector of bytes.",28,[[],["vec",3]]],[11,"encode_into","","Encodes `self` as a vector of bytes, appended to `output`.",28,[[["vec",3]]]],[11,"decode","","Decodes a [`Proof`] from a slice of bytes.",28,[[],[["option",4],["proof",3]]]],[11,"from_iterator","identity::crypto","Creates a new [`KeyCollection`] from an iterator of…",30,[[["keytype",4]],[["error",4],["keycollection",3],["result",4]]]],[11,"new_ed25519","","Creates a new [`KeyCollection`] with…",30,[[],[["error",4],["keycollection",3],["result",4]]]],[11,"new","","Creates a new [`KeyCollection`] with the given [`key…",30,[[["keytype",4]],[["error",4],["keycollection",3],["result",4]]]],[11,"type_","","Returns the [`type`][`KeyType`] of the `KeyCollection`…",30,[[],["keytype",4]]],[11,"len","","Returns the number of keys in the collection.",30,[[]]],[11,"is_empty","","Returns `true` if the collection contains no keys.",30,[[]]],[11,"public","","Returns a reference to the public key at the specified…",30,[[],[["publickey",3],["option",4]]]],[11,"public_ref","","Returns a [`KeyRef`] object referencing the public key at…",30,[[],[["option",4],["keyref",3]]]],[11,"secret","","Returns a reference to the secret key at the specified…",30,[[],[["option",4],["secretkey",3]]]],[11,"secret_ref","","Returns a [`KeyRef`] object referencing the secret key at…",30,[[],[["option",4],["keyref",3]]]],[11,"keypair","","Returns a [`KeyPair`] object for the keys at the specified…",30,[[],[["option",4],["keypair",3]]]],[11,"iter","","Returns an iterator over the key pairs in the collection.",30,[[]]],[11,"iter_public","","Returns an iterator over the public keys in the collection.",30,[[],[["publickey",3],["iter",3]]]],[11,"iter_secret","","Returns an iterator over the secret keys in the collection.",30,[[],[["iter",3],["secretkey",3]]]],[11,"merkle_root","","Returns the Merkle root hash of the public keys in the…",30,[[],["hash",3]]],[11,"merkle_proof","","Returns a proof-of-inclusion for the public key at the…",30,[[],[["option",4],["proof",3]]]],[11,"merkle_key_signer","","Returns a Merkle Key [`Signer`][`DynSigner`] for the…",30,[[],[["signer",3],["option",4]]]],[11,"merkle_key_verifier","","Returns a Merkle Key [`Verifier`][`DynVerifier`] for the…",30,[[],[["verifier",3],["box",3]]]],[11,"encode_key","","Creates a DID Document public key value for the Merkle…",30,[[],["vec",3]]],[11,"new_ed25519","","Creates a new [`Ed25519`][`KeyType::Ed25519`] [`KeyPair`].",31,[[],[["result",4],["error",4],["keypair",3]]]],[11,"new","","Creates a new [`KeyPair`] with the given [`key…",31,[[["keytype",4]],[["result",4],["error",4],["keypair",3]]]],[11,"type_","","Returns the [`type`][`KeyType`] of the `KeyPair` object.",31,[[],["keytype",4]]],[11,"public","","Returns a reference to the [`PublicKey`] object.",31,[[],["publickey",3]]],[11,"public_ref","","Returns the public key as a [`KeyRef`] object.",31,[[],["keyref",3]]],[11,"secret","","Returns a reference to the [`SecretKey`] object.",31,[[],["secretkey",3]]],[11,"secret_ref","","Returns the secret key as a [`KeyRef`] object.",31,[[],["keyref",3]]],[11,"new","","Creates a new [`KeyRef`] object.",32,[[["keytype",4]],["keyref",3]]],[11,"kty","","Returns the [`KeyType`] of the key reference.",32,[[],["keytype",4]]],[11,"key","","Returns the key material as a slice of bytes.",32,[[]]],[11,"as_str","","Returns the [`KeyType`] name as a static `str`.",33,[[]]],[11,"encode_key","","Creates a DID Document public key value for the given…",33,[[["hash",3]],["vec",3]]],[11,"new","","Creates a new [`Signature`] instance with the given…",37,[[],["signature",3]]],[11,"type_","","Returns the `type` property of the signature.",37,[[]]],[11,"verification_method","","Returns the identifier of the DID method used to create…",37,[[]]],[11,"value","","Returns a reference to the signature `value`.",37,[[],["signaturevalue",4]]],[11,"value_mut","","Returns a mutable reference to the signature `value`.",37,[[],["signaturevalue",4]]],[11,"set_value","","Sets the [`SignatureValue`] of the object.",37,[[["signaturevalue",4]]]],[11,"clear_value","","Clears the current signature value - all other properties…",37,[[]]],[11,"hide_value","","Flag the signature value so it is ignored during…",37,[[]]],[11,"show_value","","Restore the signature value state so serialization behaves…",37,[[]]],[11,"is_none","","Returns `true` if the signature data is a `None` type.",40,[[]]],[11,"is_jws","","Returns `true` if the signature data is a `Jws` type.",40,[[]]],[11,"is_proof","","Returns `true` if the signature data is a `Proof` type.",40,[[]]],[11,"is_signature","","Returns `true` if the signature data is a `Signature` type.",40,[[]]],[11,"as_str","","Returns the signature data as a string slice.",40,[[]]],[11,"into_string","","Consumes the [`SignatureValue`] and returns the data as a…",40,[[],["string",3]]],[11,"as_jws","","Returns the `Jws` type signature data as a string slice.",40,[[],["option",4]]],[11,"as_proof","","Returns the `Proof` type signature data as a string slice.",40,[[],["option",4]]],[11,"as_signature","","Returns the `Signature` type signature data as a string…",40,[[],["option",4]]],[11,"new","identity::credential","Creates a new `CredentialBuilder`.",44,[[],["credentialbuilder",3]]],[11,"context","","Adds a value to the `Credential` context set.",44,[[],["credentialbuilder",3]]],[11,"id","","Sets the value of the `Credential` `id`.",44,[[["url",3]],["credentialbuilder",3]]],[11,"type_","","Adds a value to the `Credential` type set.",44,[[],["credentialbuilder",3]]],[11,"subject","","Adds a value to the `credentialSubject` set.",44,[[["subject",3]],["credentialbuilder",3]]],[11,"issuer","","Sets the value of the `Credential` `issuer`.",44,[[],["credentialbuilder",3]]],[11,"issuance_date","","Sets the value of the `Credential` `issuanceDate`.",44,[[["timestamp",3]],["credentialbuilder",3]]],[11,"expiration_date","","Sets the value of the `Credential` `expirationDate`.",44,[[["timestamp",3]],["credentialbuilder",3]]],[11,"status","","Adds a value to the `credentialStatus` set.",44,[[["status",3]],["credentialbuilder",3]]],[11,"schema","","Adds a value to the `credentialSchema` set.",44,[[["schema",3]],["credentialbuilder",3]]],[11,"refresh","","Adds a value to the `refreshService` set.",44,[[["refresh",3]],["credentialbuilder",3]]],[11,"policy","","Adds a value to the `termsOfUse` set.",44,[[["policy",3]],["credentialbuilder",3]]],[11,"evidence","","Adds a value to the `evidence` set.",44,[[["evidence",3]],["credentialbuilder",3]]],[11,"non_transferable","","Sets the value of the `Credential` `nonTransferable`…",44,[[],["credentialbuilder",3]]],[11,"build","","Returns a new `Credential` based on the…",44,[[],[["result",4],["credential",3],["error",4]]]],[11,"property","","Adds a new custom property to the `Credential`.",44,[[],[["btreemap",3],["credentialbuilder",3]]]],[11,"properties","","Adds a series of custom properties to the `Credential`.",44,[[],[["btreemap",3],["credentialbuilder",3]]]],[11,"base_context","","Returns the base JSON-LD context for `Credential`s.",45,[[],["context",4]]],[11,"base_type","","Returns the base type for `Credential`s.",45,[[]]],[11,"builder","","Creates a new `CredentialBuilder` to configure a…",45,[[],["credentialbuilder",3]]],[11,"from_builder","","Returns a new `Credential` based on the…",45,[[["credentialbuilder",3]],[["result",4],["credential",3],["error",4]]]],[11,"check_structure","","Validates the semantic structure of the `Credential`.",45,[[],[["result",4],["error",4]]]],[11,"sign","","Creates a new [`VerifiableCredential`] by signing `self`…",45,[[["document",3],["methodquery",3],["secretkey",3]],[["verifiablecredential",3],["error",4],["result",4]]]],[11,"new","","Creates a new [`Evidence`] instance.",46,[[],["evidence",3]]],[11,"with_id","","Creates a new [`Evidence`] instance with the given `id`.",46,[[],["evidence",3]]],[11,"with_properties","","Creates a new [`Evidence`] instance with the given…",46,[[["btreemap",3],["string",3],["value",4]],["evidence",3]]],[11,"with_id_and_properties","","Creates a new [`Evidence`] instance with the given `id`…",46,[[["btreemap",3],["string",3],["value",4]],["evidence",3]]],[11,"url","","Returns a reference to the credential issuer Url.",47,[[],["url",3]]],[11,"new","","Creates a new [`Policy`] instance.",48,[[],["policy",3]]],[11,"with_id","","Creates a new [`Policy`] instance with the given `id`.",48,[[["url",3]],["policy",3]]],[11,"with_properties","","Creates a new [`Policy`] instance with the given…",48,[[["btreemap",3],["string",3],["value",4]],["policy",3]]],[11,"with_id_and_properties","","Creates a new [`Policy`] instance with the given `id` and…",48,[[["string",3],["value",4],["url",3],["btreemap",3]],["policy",3]]],[11,"new","","Creates a new [`Refresh`].",49,[[["url",3]],["refresh",3]]],[11,"with_properties","","Creates a new [`Refresh`] with the given `properties`.",49,[[["string",3],["value",4],["url",3],["btreemap",3]],["refresh",3]]],[11,"new","","Creates a new [`Schema`].",50,[[["url",3]],["schema",3]]],[11,"with_properties","","Creates a new [`Schema`] with the given `properties`.",50,[[["string",3],["value",4],["url",3],["btreemap",3]],["schema",3]]],[11,"new","","Creates a new [`Status`].",51,[[["url",3]],["status",3]]],[11,"with_properties","","Creates a new [`Status`] with the given `properties`.",51,[[["string",3],["value",4],["url",3],["btreemap",3]],["status",3]]],[11,"new","","Creates a new [`Subject`].",52,[[],["subject",3]]],[11,"with_id","","Creates a new [`Subject`] with the given `id`.",52,[[["url",3]],["subject",3]]],[11,"with_properties","","Creates a new [`Subject`] with the given `properties`.",52,[[["btreemap",3],["string",3],["value",4]],["subject",3]]],[11,"with_id_and_properties","","Creates a new [`Subject`] with the given `id` and…",52,[[["string",3],["value",4],["url",3],["btreemap",3]],["subject",3]]],[11,"new","","Creates a new `VerifiableCredential`.",53,[[["credential",3]],["verifiablecredential",3]]],[11,"proof","","Returns a reference to the `VerifiableCredential` proof.",53,[[],["oneormany",4]]],[11,"proof_mut","","Returns a mutable reference to the `VerifiableCredential`…",53,[[],["oneormany",4]]],[11,"new","","Creates a new `PresentationBuilder`.",55,[[],["presentationbuilder",3]]],[11,"context","","Adds a value to the `Presentation` context set.",55,[[],["presentationbuilder",3]]],[11,"id","","Sets the value of the `Presentation` `id`.",55,[[["url",3]],["presentationbuilder",3]]],[11,"type_","","Adds a value to the `Presentation` type set.",55,[[],["presentationbuilder",3]]],[11,"credential","","Adds a value to the `verifiableCredential` set.",55,[[["verifiablecredential",3]],["presentationbuilder",3]]],[11,"holder","","Sets the value of the `Credential` `holder`.",55,[[["url",3]],["presentationbuilder",3]]],[11,"refresh","","Adds a value to the `refreshService` set.",55,[[["refresh",3]],["presentationbuilder",3]]],[11,"policy","","Adds a value to the `termsOfUse` set.",55,[[["policy",3]],["presentationbuilder",3]]],[11,"build","","Returns a new `Presentation` based on the…",55,[[],[["result",4],["presentation",3],["error",4]]]],[11,"property","","Adds a new custom property to the `Presentation`.",55,[[],[["btreemap",3],["presentationbuilder",3]]]],[11,"properties","","Adds a series of custom properties to the `Presentation`.",55,[[],[["btreemap",3],["presentationbuilder",3]]]],[11,"base_context","","Returns the base JSON-LD context for `Presentation`s.",56,[[],["context",4]]],[11,"base_type","","Returns the base type for `Presentation`s.",56,[[]]],[11,"builder","","Creates a `PresentationBuilder` to configure a new…",56,[[],["presentationbuilder",3]]],[11,"from_builder","","Returns a new `Presentation` based on the…",56,[[["presentationbuilder",3]],[["result",4],["presentation",3],["error",4]]]],[11,"check_structure","","Validates the semantic structure of the `Presentation`.",56,[[],[["result",4],["error",4]]]],[11,"new","","Creates a new `VerifiablePresentation`.",57,[[["presentation",3]],["verifiablepresentation",3]]],[11,"proof","","Returns a reference to the `VerifiablePresentation` proof.",57,[[],["oneormany",4]]],[11,"proof_mut","","Returns a mutable reference to the…",57,[[],["oneormany",4]]],[11,"new","identity::did","Creates a new `DocumentBuilder`.",58,[[],["documentbuilder",3]]],[11,"id","","Sets the `id` value of the generated `Document`.",58,[[["did",3]],["documentbuilder",3]]],[11,"controller","","Sets the `controller` value of the generated `Document`.",58,[[["did",3]],["documentbuilder",3]]],[11,"also_known_as","","Adds a value to the `alsoKnownAs` set of the generated…",58,[[["url",3]],["documentbuilder",3]]],[11,"verification_method","","Adds a value to the `verificationMethod` set of the…",58,[[["method",3]],["documentbuilder",3]]],[11,"authentication","","Adds a value to the `authentication` set of the generated…",58,[[],["documentbuilder",3]]],[11,"assertion_method","","Adds a value to the `assertionMethod` set of the generated…",58,[[],["documentbuilder",3]]],[11,"key_agreement","","Adds a value to the `keyAgreement` set of the generated…",58,[[],["documentbuilder",3]]],[11,"capability_delegation","","Adds a value to the `capabilityDelegation` set of the…",58,[[],["documentbuilder",3]]],[11,"capability_invocation","","Adds a value to the `capabilityInvocation` set of the…",58,[[],["documentbuilder",3]]],[11,"service","","Adds a value to the `service` set of the generated…",58,[[["service",3]],["documentbuilder",3]]],[11,"build","","Returns a new `Document` based on the `DocumentBuilder`…",58,[[],[["document",3],["error",4],["result",4]]]],[11,"builder","","Creates a `DocumentBuilder` to configure a new `Document`.",59,[[],["documentbuilder",3]]],[11,"from_builder","","Returns a new `Document` based on the `DocumentBuilder`…",59,[[["documentbuilder",3]],[["document",3],["error",4],["result",4]]]],[11,"id","","Returns a reference to the `Document` id.",59,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the `Document` id.",59,[[],["did",3]]],[11,"controller","","Returns a reference to the `Document` controller.",59,[[],[["option",4],["did",3]]]],[11,"controller_mut","","Returns a mutable reference to the `Document` controller.",59,[[],[["did",3],["option",4]]]],[11,"also_known_as","","Returns a reference to the `Document` alsoKnownAs set.",59,[[]]],[11,"also_known_as_mut","","Returns a mutable reference to the `Document` alsoKnownAs…",59,[[],["vec",3]]],[11,"verification_method","","Returns a reference to the `Document` verificationMethod…",59,[[],["orderedset",3]]],[11,"verification_method_mut","","Returns a mutable reference to the `Document`…",59,[[],["orderedset",3]]],[11,"authentication","","Returns a reference to the `Document` authentication set.",59,[[],["orderedset",3]]],[11,"authentication_mut","","Returns a mutable reference to the `Document`…",59,[[],["orderedset",3]]],[11,"assertion_method","","Returns a reference to the `Document` assertionMethod set.",59,[[],["orderedset",3]]],[11,"assertion_method_mut","","Returns a mutable reference to the `Document`…",59,[[],["orderedset",3]]],[11,"key_agreement","","Returns a reference to the `Document` keyAgreement set.",59,[[],["orderedset",3]]],[11,"key_agreement_mut","","Returns a mutable reference to the `Document` keyAgreement…",59,[[],["orderedset",3]]],[11,"capability_delegation","","Returns a reference to the `Document` capabilityDelegation…",59,[[],["orderedset",3]]],[11,"capability_delegation_mut","","Returns a mutable reference to the `Document`…",59,[[],["orderedset",3]]],[11,"capability_invocation","","Returns a reference to the `Document` capabilityInvocation…",59,[[],["orderedset",3]]],[11,"capability_invocation_mut","","Returns a mutable reference to the `Document`…",59,[[],["orderedset",3]]],[11,"service","","Returns a reference to the `Document` service set.",59,[[],["orderedset",3]]],[11,"service_mut","","Returns a mutable reference to the `Document` service set.",59,[[],["orderedset",3]]],[11,"properties","","Returns a reference to the custom `Document` properties.",59,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom `Document`…",59,[[]]],[11,"map","","Maps `Document<T>` to `Document<U>` by applying a function…",59,[[],["document",3]]],[11,"try_map","","A fallible version of `Document::map(..)`.",59,[[],[["result",4],["document",3]]]],[11,"insert_method","","Adds a new [`Method<U>`][`Method`] to the Document.",59,[[["methodscope",4],["method",3]]]],[11,"remove_method","","Removes all references to the specified…",59,[[["did",3]]]],[11,"methods","","Returns an iterator over all verification methods in the…",59,[[]]],[11,"resolve","","Returns the first verification [`method`][`Method`] with…",59,[[],[["option",4],["method",3]]]],[11,"try_resolve","","Returns the first verification [`method`][`Method`] with…",59,[[],[["result",4],["method",3],["error",4]]]],[11,"resolve_mut","","Returns a mutable reference to the first verification…",59,[[],[["option",4],["method",3]]]],[11,"try_resolve_mut","","Returns a mutable reference to the first verification…",59,[[],[["method",3],["result",4],["error",4]]]],[11,"into_verifiable","","",59,[[],[["properties",3],["document",3]]]],[11,"into_verifiable2","","",59,[[["signature",3]],[["properties",3],["document",3]]]],[11,"proof","","",59,[[],[["signature",3],["option",4]]]],[11,"proof_mut","","",59,[[],[["option",4],["signature",3]]]],[11,"set_proof","","",59,[[["signature",3]]]],[11,"sign_this","","",59,[[],[["result",4],["error",4]]]],[11,"verify_this","","",59,[[],[["result",4],["error",4]]]],[11,"signer","","Creates a new [`DocumentSigner`] that can be used to…",59,[[["secretkey",3]],["documentsigner",3]]],[11,"verifier","","Creates a new [`DocumentVerifier`] that can be used to…",59,[[],["documentverifier",3]]],[11,"new","","Creates a new `ServiceBuilder`.",61,[[],["servicebuilder",3]]],[11,"id","","Sets the `id` value of the generated `Service`.",61,[[["did",3]],["servicebuilder",3]]],[11,"type_","","Sets the `type` value of the generated `Service`.",61,[[],["servicebuilder",3]]],[11,"service_endpoint","","Sets the `serviceEndpoint` value of the generated `Service`.",61,[[["url",3]],["servicebuilder",3]]],[11,"build","","Returns a new `Service` based on the `ServiceBuilder`…",61,[[],[["service",3],["error",4],["result",4]]]],[11,"builder","","Creates a `ServiceBuilder` to configure a new `Service`.",62,[[],["servicebuilder",3]]],[11,"from_builder","","Returns a new `Service` based on the `ServiceBuilder`…",62,[[["servicebuilder",3]],[["service",3],["error",4],["result",4]]]],[11,"id","","Returns a reference to the `Service` id.",62,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the `Service` id.",62,[[],["did",3]]],[11,"type_","","Returns a reference to the `Service` type.",62,[[]]],[11,"type_mut","","Returns a mutable reference to the `Service` type.",62,[[],["string",3]]],[11,"service_endpoint","","Returns a reference to the `Service` endpoint.",62,[[],["url",3]]],[11,"service_endpoint_mut","","Returns a mutable reference to the `Service` endpoint.",62,[[],["url",3]]],[11,"properties","","Returns a reference to the custom `Service` properties.",62,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom `Service`…",62,[[]]],[11,"new","","Create a new `DIDKey`.",63,[[],["didkey",3]]],[11,"into_inner","","Consumes the `DIDKey` and returns the inner `T`.",63,[[]]],[11,"as_did","","Returns a reference to the `DID`.",63,[[],["did",3]]],[11,"new","","Creates a new `OrderedSet`.",64,[[],["orderedset",3]]],[11,"with_capacity","","Creates a new `OrderedSet` with the specified capacity.",64,[[],["orderedset",3]]],[11,"len","","Returns the number of elements in the `OrderedSet`.",64,[[]]],[11,"is_empty","","Returns `true` if the `OrderedSet` contains no elements.",64,[[]]],[11,"iter","","Returns an iterator over the slice of elements.",64,[[],["iter",3]]],[11,"head","","Returns the first element in the set, or `None` if the set…",64,[[],["option",4]]],[11,"head_mut","","Returns a mutable referece to the first element in the…",64,[[],["option",4]]],[11,"tail","","Returns the last element in the set, or `None` if the set…",64,[[],["option",4]]],[11,"tail_mut","","Returns a mutable referece the last element in the set, or…",64,[[],["option",4]]],[11,"as_slice","","Returns a slice containing all elements in the `OrderedSet`.",64,[[]]],[11,"into_vec","","Consumes the `OrderedSet` and returns the elements as a…",64,[[],["vec",3]]],[11,"clear","","Clears the `OrderedSet`, removing all values.",64,[[]]],[11,"contains","","Returns `true` if the `OrderedSet` contains the given value.",64,[[]]],[11,"append","","Adds a new value to the end of the `OrderedSet`; returns…",64,[[]]],[11,"prepend","","Adds a new value to the start of the `OrderedSet`; returns…",64,[[]]],[11,"replace","","Replaces a `current` value with the given `update` value;…",64,[[]]],[11,"update","","Updates an existing value in the `OrderedSet`; returns…",64,[[]]],[11,"remove","","Removes all matching items from the set.",64,[[]]],[11,"new","","Creates a new `MethodBuilder`.",65,[[],["methodbuilder",3]]],[11,"id","","Sets the `id` value of the generated verification `Method`.",65,[[["did",3]],["methodbuilder",3]]],[11,"controller","","Sets the `controller` value of the generated verification…",65,[[["did",3]],["methodbuilder",3]]],[11,"key_type","","Sets the `type` value of the generated verification…",65,[[["methodtype",4]],["methodbuilder",3]]],[11,"key_data","","Sets the `data` value of the generated verification…",65,[[["methoddata",4]],["methodbuilder",3]]],[11,"build","","Returns a new `Method` based on the `MethodBuilder`…",65,[[],[["method",3],["error",4],["result",4]]]],[11,"builder","","Creates a `MethodBuilder` to configure a new `Method`.",66,[[],["methodbuilder",3]]],[11,"from_builder","","Returns a new `Method` based on the `MethodBuilder`…",66,[[["methodbuilder",3]],[["method",3],["error",4],["result",4]]]],[11,"id","","Returns a reference to the verification `Method` id.",66,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the verification `Method` id.",66,[[],["did",3]]],[11,"controller","","Returns a reference to the verification `Method` controller.",66,[[],["did",3]]],[11,"controller_mut","","Returns a mutable reference to the verification `Method`…",66,[[],["did",3]]],[11,"key_type","","Returns a reference to the verification `Method` type.",66,[[],["methodtype",4]]],[11,"key_type_mut","","Returns a mutable reference to the verification `Method`…",66,[[],["methodtype",4]]],[11,"key_data","","Returns a reference to the verification `Method` data.",66,[[],["methoddata",4]]],[11,"key_data_mut","","Returns a mutable reference to the verification `Method`…",66,[[],["methoddata",4]]],[11,"properties","","Returns a reference to the custom verification `Method`…",66,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom verification…",66,[[]]],[11,"try_into_fragment","","",66,[[],[["string",3],["result",4],["error",4]]]],[11,"into_ref","","Creates a new [`MethodRef`] from `self`.",66,[[],["methodref",4]]],[11,"new_b16","","Creates a new `MethodData` variant with base16-encoded…",67,[[],["methoddata",4]]],[11,"new_b58","","Creates a new `MethodData` variant with base58-encoded…",67,[[],["methoddata",4]]],[11,"try_decode","","Returns a `Vec<u8>` containing the decoded bytes of the…",67,[[],[["error",4],["result",4],["vec",3]]]],[11,"id","","Returns a reference to the `MethodRef` id.",69,[[],["did",3]]],[11,"controller","","Returns a reference to the `MethodRef` controller.",69,[[],[["option",4],["did",3]]]],[11,"is_embedded","","Returns a `bool` indicating if the `MethodRef` is an…",69,[[]]],[11,"is_referred","","Returns a `bool` indicating if the `MethodRef` is a `DID`…",69,[[]]],[11,"try_into_embedded","","Returns the inner `Method` if this is an embedded…",69,[[],[["method",3],["result",4],["methodref",4]]]],[11,"try_into_referenced","","Returns the inner `Method` if this is an referenced…",69,[[],[["result",4],["did",3],["methodref",4]]]],[11,"as_str","","",70,[[]]],[11,"as_str","","",71,[[]]],[11,"as_str","","",72,[[]]],[18,"SCHEME","","The URL scheme for Decentralized Identifiers.",73,null],[11,"parse","","Parses a [`DID`] from the provided `input`.",73,[[],[["did",3],["result",4],["error",4]]]],[11,"inspect","","Returns a wrapped `DID` with a more detailed `Debug`…",73,[[],["inspect",3]]],[11,"as_str","","Returns the serialized [`DID`].",73,[[]]],[11,"into_string","","Consumes the [`DID`] and returns the serialization.",73,[[],["string",3]]],[11,"scheme","","Returns the [`DID`] scheme. See [`DID::SCHEME`].",73,[[]]],[11,"authority","","Returns the [`DID`] authority.",73,[[]]],[11,"method","","Returns the [`DID`] method name.",73,[[]]],[11,"method_id","","Returns the [`DID`] method-specific ID.",73,[[]]],[11,"path","","Returns the [`DID`] path.",73,[[]]],[11,"query","","Returns the [`DID`] method query, if any.",73,[[],["option",4]]],[11,"fragment","","Returns the [`DID`] method fragment, if any.",73,[[],["option",4]]],[11,"query_pairs","","Parses the [`DID`] query and returns an iterator of (key,…",73,[[],["parse",3]]],[11,"set_method","","Change the method of the [`DID`].",73,[[]]],[11,"set_method_id","","Change the method-specific-id of the [`DID`].",73,[[]]],[11,"set_path","","Change the path of the [`DID`].",73,[[]]],[11,"set_query","","Change the query of the [`DID`].",73,[[["option",4]]]],[11,"set_fragment","","Change the fragment of the [`DID`].",73,[[["option",4]]]],[11,"join","","Creates a new [`DID`] by joining `self` with the relative…",73,[[],[["did",3],["result",4],["error",4]]]],[11,"new","identity::did::resolution","Creates a new [`Dereference`].",74,[[],["dereference",3]]],[11,"new","","Creates a new [`DocumentMetadata`].",75,[[],["documentmetadata",3]]],[11,"new","","Creates a new [`InputMetadata`].",77,[[],["inputmetadata",3]]],[11,"new","","Creates a new [`Resolution`].",78,[[],["resolution",3]]],[11,"new","","Creates a new [`ResolutionMetadata`].",79,[[],["resolutionmetadata",3]]],[11,"new","identity::did::verifiable","",85,[[["secretkey",3],["document",3]],["documentsigner",3]]],[11,"method","","",85,[[],["documentsigner",3]]],[11,"merkle_key","","",85,[[],["documentsigner",3]]],[11,"sign","","Signs the provided data with the configured verification…",85,[[],[["result",4],["error",4]]]],[11,"new","","",86,[[["document",3]],["documentverifier",3]]],[11,"verify","","Verifies the signature of the provided data.",86,[[],[["result",4],["error",4]]]],[11,"new","","Creates a new [`Properties`] object.",87,[[],["properties",3]]],[11,"with_proof","","Creates a new [`Properties`] object with the given `proof`.",87,[[["signature",3]],["properties",3]]],[11,"proof","","Returns a reference to the [`proof`][`Signature`] object.",87,[[],[["signature",3],["option",4]]]],[11,"proof_mut","","Returns a mutable reference to the [`proof`][`Signature`]…",87,[[],[["option",4],["signature",3]]]],[11,"set_proof","","Sets the value of the [`proof`][`Signature`] object.",87,[[["signature",3]]]],[11,"try_from_messages","identity::iota","Constructs a new `AuthChain` from a slice of `Message`s.",89,[[["did",3]],[["result",4],["error",4],["authchain",3]]]],[11,"new","","Creates a new `AuthChain` with the given `Document` as the…",89,[[["document",3]],[["result",4],["error",4],["authchain",3]]]],[11,"current","","Returns a reference to the latest document in the auth…",89,[[],["document",3]]],[11,"current_mut","","Returns a mutable reference to the latest document in the…",89,[[],["document",3]]],[11,"current_message_id","","Returns the Tangle message Id of the latest auth document.",89,[[],["messageid",3]]],[11,"try_push","","Adds a new document to the auth chain.",89,[[["document",3]],[["result",4],["error",4]]]],[11,"is_valid","","Returns `true` if the `Document` can be added to the auth…",89,[[["document",3]]]],[11,"check_validity","","Checks if the `Document` can be added to the auth chain.",89,[[["document",3]],[["result",4],["error",4]]]],[11,"try_from_messages","","Constructs a new `DiffChain` for the given `AuthChain`…",90,[[["authchain",3]],[["diffchain",3],["result",4],["error",4]]]],[11,"new","","Creates a new `DiffChain`.",90,[[],["diffchain",3]]],[11,"len","","Returns the total number of diffs in the chain.",90,[[]]],[11,"is_empty","","Returns `true` if the diff chain is empty.",90,[[]]],[11,"clear","","Empties the diff chain, removing all diffs.",90,[[]]],[11,"iter","","Returns an iterator yielding references to `DocumentDiff`s.",90,[[],[["iter",3],["documentdiff",3]]]],[11,"current_message_id","","Returns the `MessageId` of the latest diff if the chain,…",90,[[],[["option",4],["messageid",3]]]],[11,"try_push","","Adds a new diff to the diff chain.",90,[[["authchain",3],["documentdiff",3]],[["result",4],["error",4]]]],[11,"push_unchecked","","Adds a new diff to the diff chain with performing…",90,[[["documentdiff",3]]]],[11,"is_valid","","Returns `true` if the `DocumentDiff` can be added to the…",90,[[["documentdiff",3],["authchain",3]]]],[11,"check_validity","","Checks if the `DocumentDiff` can be added to the diff chain.",90,[[["documentdiff",3],["authchain",3]],[["result",4],["error",4]]]],[11,"new","","Creates a new `DocumentChain` from given the `AuthChain`.",91,[[["authchain",3]],["documentchain",3]]],[11,"with_diff_chain","","Creates a new `DocumentChain` from given the `AuthChain`…",91,[[["diffchain",3],["authchain",3]],[["documentchain",3],["error",4],["result",4]]]],[11,"id","","Returns a reference to the DID identifying the document…",91,[[],["did",3]]],[11,"auth","","Returns a reference to the `AuthChain`.",91,[[],["authchain",3]]],[11,"auth_mut","","Returns a mutable reference to the `AuthChain`.",91,[[],["authchain",3]]],[11,"diff","","Returns a reference to the `DiffChain`.",91,[[],["diffchain",3]]],[11,"diff_mut","","Returns a mutable reference to the `DiffChain`.",91,[[],["diffchain",3]]],[11,"fold","","",91,[[],[["document",3],["result",4],["error",4]]]],[11,"current","","Returns a reference to the latest document in the chain.",91,[[],["document",3]]],[11,"current_mut","","Returns a mutable reference to the latest document in the…",91,[[],["document",3]]],[11,"auth_message_id","","Returns the Tangle message Id of the latest auth document.",91,[[],["messageid",3]]],[11,"diff_message_id","","Returns the Tangle message Id of the latest diff or auth…",91,[[],["messageid",3]]],[11,"try_push_auth","","Adds a new auth document to the chain.",91,[[["document",3]],[["result",4],["error",4]]]],[11,"try_push_diff","","Adds a new diff to the current diff chain.",91,[[["documentdiff",3]],[["result",4],["error",4]]]],[11,"new","","Creates a new `Client`  with default settings.",92,[[],[["error",4],["client",3],["result",4]]]],[11,"builder","","Creates a `ClientBuilder` to configure a new `Client`.",92,[[],["clientbuilder",3]]],[11,"from_network","","Creates a new `Client` with default settings for the given…",92,[[["network",4]],[["error",4],["client",3],["result",4]]]],[11,"from_builder","","Creates a new `Client` based on the `ClientBuilder`…",92,[[["clientbuilder",3]],[["error",4],["client",3],["result",4]]]],[11,"network","","Returns the `Client` Tangle network.",92,[[],["network",4]]],[11,"default_node_url","","Returns the default node URL of the `Client` network.",92,[[],["url",3]]],[11,"explorer_url","","Returns the web explorer URL of the `Client` network.",92,[[],["url",3]]],[11,"transaction_url","","Returns the web explorer URL of the given `transaction`.",92,[[["bundledtransaction",3]],["url",3]]],[11,"transaction_hash","","Returns the hash of the Tangle transaction as a…",92,[[["bundledtransaction",3]],["string",3]]],[11,"publish_document","","Publishes an DID Document to the Tangle; returns the…",92,[[["document",3]]]],[11,"publish_diff","","Publishes a `DocumentDiff` to the Tangle; returns the…",92,[[["documentdiff",3],["messageid",3]]]],[11,"read_document","","",92,[[["did",3]]]],[11,"read_document_chain","","",92,[[["did",3]]]],[11,"new","","Creates a new `ClientBuilder`.",93,[[],["clientbuilder",3]]],[11,"network","","Sets the network of the generated `Client`.",93,[[["network",4]],["clientbuilder",3]]],[11,"node","","Adds an IOTA node to the generated `Client`.",93,[[],["clientbuilder",3]]],[11,"nodes","","Adds an iterator of IOTA nodes to the generated `Client`.",93,[[],["clientbuilder",3]]],[11,"build","","Creates a new `Client` based on the `ClientBuilder`…",93,[[],[["error",4],["client",3],["result",4]]]],[11,"from_name","","",94,[[],["network",4]]],[11,"matches_did","","",94,[[["did",3]]]],[11,"node_url","","Returns the default node URL of the Tangle network.",94,[[],["url",3]]],[11,"explorer_url","","Returns the web explorer URL of the Tangle network.",94,[[],["url",3]]],[11,"as_str","","Returns the name of the network as a static `str`.",94,[[]]],[11,"full","","",95,[[["bundledtransaction",3]],[["txnprinter",3],["__full",4]]]],[11,"mini","","",95,[[["bundledtransaction",3]],[["__mini",4],["txnprinter",3]]]],[11,"hash","","",95,[[["bundledtransaction",3]],[["__hash",4],["txnprinter",3]]]],[11,"new","","Creates a new `CredentialValidator`.",97,[[["client",3]],["credentialvalidator",3]]],[11,"check","","Deserializes the given JSON-encoded `VerifiableCredential`…",97,[[]]],[11,"check_presentation","","Deserializes the given JSON-encoded…",97,[[]]],[11,"validate_credential","","Validates the `VerifiableCredential` proof and all…",97,[[["verifiablecredential",3]]]],[11,"validate_presentation","","Validates the `VerifiablePresentation` proof and all…",97,[[["verifiablepresentation",3]]]],[11,"from_keypair","identity::iota::did","Creates a new DID Document from the given KeyPair.",100,[[["keypair",3]],[["document",3],["result",4],["error",4]]]],[11,"from_authentication","","Creates a new DID Document from the given verification…",100,[[["method",3]],[["document",3],["result",4],["error",4]]]],[11,"from_authentication_unchecked","","Creates a new DID Document from the given verification…",100,[[["method",3]],["document",3]]],[11,"try_from_core","","Converts a generic DID `Document` to an IOTA DID Document.",100,[[["btreemap",3],["document",3]],[["document",3],["result",4],["error",4]]]],[11,"as_document","","Returns a reference to the underlying…",100,[[],["document",3]]],[11,"as_document_mut","","Returns a mutable reference to the underlying…",100,[[],["document",3]]],[11,"id","","Returns the DID document [`id`][`DID`].",100,[[],["did",3]]],[11,"authentication","","Returns the default authentication method of the DID…",100,[[],["method",3]]],[11,"created","","Returns the timestamp of when the DID document was created.",100,[[],["timestamp",3]]],[11,"set_created","","Sets the timestamp of when the DID document was created.",100,[[["timestamp",3]]]],[11,"updated","","Returns the timestamp of the last DID document update.",100,[[],["timestamp",3]]],[11,"set_updated","","Sets the timestamp of the last DID document update.",100,[[["timestamp",3]]]],[11,"previous_message_id","","Returns the Tangle message id of the previous DID…",100,[[],["messageid",3]]],[11,"set_previous_message_id","","Sets the Tangle message id the previous DID document.",100,[[]]],[11,"immutable","","Returns true if the DID Document is flagged as immutable.",100,[[]]],[11,"set_immutable","","Sets the value of the `immutable` flag.",100,[[]]],[11,"properties","","Returns a reference to the custom DID Document properties.",100,[[],["btreemap",3]]],[11,"properties_mut","","Returns a mutable reference to the custom DID Document…",100,[[],["btreemap",3]]],[11,"insert_method","","Adds a new Verification Method to the DID Document.",100,[[["method",3],["methodscope",4]]]],[11,"remove_method","","Removes all references to the specified Verification Method.",100,[[["did",3]],[["result",4],["error",4]]]],[11,"sign","","Signs the DID document with the default authentication…",100,[[["secretkey",3]],[["result",4],["error",4]]]],[11,"verify","","Verifies the signature of the DID document.",100,[[],[["result",4],["error",4]]]],[11,"sign_data","","Signs the provided data with the default authentication…",100,[[["secretkey",3]],[["result",4],["error",4]]]],[11,"verify_data","","Verifies the signature of the provided data.",100,[[],[["result",4],["error",4]]]],[11,"diff","","Creates a `DocumentDiff` representing the changes between…",100,[[["document",3],["messageid",3],["secretkey",3]],[["error",4],["result",4],["documentdiff",3]]]],[11,"merge","","Verifies a `DocumentDiff` signature and merges the changes…",100,[[["documentdiff",3]],[["result",4],["error",4]]]],[11,"publish","","Publishes the DID Document to the Tangle",100,[[]]],[11,"diff_address","","Returns the Tangle address of the DID diff chain.",100,[[["messageid",3]],[["string",3],["error",4],["result",4]]]],[11,"new","","",101,[[["document",3],["messageid",3]],[["error",4],["result",4],["documentdiff",3]]]],[11,"id","","Returns the DID of associated DID Document.",101,[[],["did",3]]],[11,"diff","","Returns the raw contents of the DID Document diff.",101,[[]]],[11,"previous_message_id","","Returns the Tangle message id of the previous DID Document…",101,[[],["messageid",3]]],[11,"proof","","Returns a reference to the DID Document proof.",101,[[],[["signature",3],["option",4]]]],[11,"merge","","Returns a new DID Document which is the result of merging…",101,[[["document",3]],[["document",3],["result",4],["error",4]]]],[11,"publish","","Publishes the DID Document diff to the Tangle",101,[[["messageid",3]]]],[18,"TAG","","The default verification method tag.",102,null],[11,"create_merkle_key","","Creates a new Merkle Key Collection Method from the given…",102,[[["keycollection",3],["did",3]],[["method",3],["result",4],["error",4]]]],[11,"from_keypair","","Creates a new [`Method`] object from the given `keypair`.",102,[[["keypair",3]],[["method",3],["result",4],["error",4]]]],[11,"from_did","","Creates a new [`Method`] object from the given `did` and…",102,[[["keypair",3],["did",3]],[["method",3],["result",4],["error",4]]]],[11,"try_from_core","","Converts a generic Verification Method to an IOTA…",102,[[["method",3],["btreemap",3]],[["method",3],["result",4],["error",4]]]],[11,"try_from_mut","","Converts a mutable `Method` reference to a mutable IOTA…",102,[[["method",3]],[["error",4],["method",3],["result",4]]]],[11,"new_unchecked_ref","","Converts a `Method` reference to an IOTA Verification…",102,[[["method",3]],["method",3]]],[11,"check_validity","","Checks if the given verification method is valid according…",102,[[["method",3]],[["result",4],["error",4]]]],[11,"is_valid","","Returns a `bool` indicating if the given verification…",102,[[["method",3]]]],[11,"id","","Returns the method `id` property.",102,[[],["did",3]]],[11,"controller","","Returns the method `controller` property.",102,[[],["did",3]]],[11,"revoke_merkle_key","","Revokes the public key of a Merkle Key Collection at the…",102,[[],[["result",4],["error",4]]]],[11,"new","","",103,[[],["properties",3]]],[18,"SCHEME","","The URL scheme for Decentralized Identifiers.",104,null],[18,"METHOD","","The DID method name.",104,null],[18,"DEFAULT_NETWORK","","The default Tangle network.",104,null],[11,"try_from_borrowed","","Converts a borrowed `DID` to an IOTA DID.",104,[[["did",3]],[["error",4],["result",4],["did",3]]]],[11,"try_from_owned","","Converts an owned `DID` to an IOTA DID.",104,[[["did",3]],[["error",4],["result",4],["did",3]]]],[11,"new_unchecked_ref","","Converts a `DID` reference to an IOTA DID reference…",104,[[["did",3]],["did",3]]],[11,"parse","","Parses an IOTA DID from the given `input`.",104,[[],[["error",4],["result",4],["did",3]]]],[11,"new","","Creates a new IOTA DID with a tag derived from the given…",104,[[],[["error",4],["result",4],["did",3]]]],[11,"with_network","","Creates a new IOTA DID from the given `public` key and…",104,[[],[["error",4],["result",4],["did",3]]]],[11,"with_network_and_shard","","Creates a new IOTA DID from the given `public` key,…",104,[[],[["error",4],["result",4],["did",3]]]],[11,"join","","Creates a new `DID` by joining `self` with the relative…",104,[[],[["error",4],["result",4],["did",3]]]],[11,"set_path","","Sets the `path` component of the DID Url.",104,[[]]],[11,"set_query","","Sets the `query` component of the DID Url.",104,[[["option",4]]]],[11,"set_fragment","","Sets the `fragment` component of the DID Url.",104,[[["option",4]]]],[11,"check_method","","Checks if the given `DID` has a valid IOTA DID `method`.",104,[[["did",3]],[["result",4],["error",4]]]],[11,"check_method_id","","Checks if the given `DID` has a valid IOTA DID `method_id`.",104,[[["did",3]],[["result",4],["error",4]]]],[11,"check_validity","","Checks if the given `DID` is valid according to the IOTA…",104,[[["did",3]],[["result",4],["error",4]]]],[11,"is_valid","","Returns a `bool` indicating if the given `DID` is valid…",104,[[["did",3]]]],[11,"network","","Returns the Tangle `network` of the `DID`.",104,[[]]],[11,"shard","","Returns the Tangle network `shard` of the `DID`.",104,[[],["option",4]]],[11,"tag","","Returns the unique Tangle tag of the `DID`.",104,[[]]],[11,"address","","Returns the Tangle address of the DID auth chain.",104,[[],["string",3]]],[11,"try_from_bundle","identity::iota","",107,[[["vec",3],["bundledtransaction",3]],[["result",4],["message",3],["error",4]]]],[11,"message_str","","Returns the contents of the message as a tryte-encoded…",107,[[],["string",3]]],[11,"message_utf8","","Returns the contents of the message as a utf8-encoded…",107,[[],[["string",3],["error",4],["result",4]]]],[11,"message_id","","Returns the `MessageId` identifying the Tangle message.",107,[[],["messageid",3]]],[11,"try_extract_document","","",107,[[["did",3]],[["document",3],["option",4]]]],[11,"try_extract_diff","","",107,[[["did",3]],[["option",4],["documentdiff",3]]]],[18,"NONE","","",108,null],[11,"new","","",108,[[],["messageid",3]]],[11,"is_none","","",108,[[]]],[11,"is_some","","",108,[[]]],[11,"as_str","","",108,[[]]],[11,"new","","Creates a new `MessageIndex`.",109,[[],["messageindex",3]]],[11,"size","","Returns the total size of the index.",109,[[]]],[11,"remove_where","","",109,[[],["option",4]]],[11,"insert","","",109,[[]]],[11,"extend","","",109,[[]]]],"p":[[3,"BitSet"],[4,"Context"],[4,"Value"],[4,"OneOrMany"],[3,"Timestamp"],[3,"Url"],[8,"AsJson"],[8,"FromJson"],[8,"ToJson"],[8,"SerdeInto"],[4,"Error"],[4,"Error"],[3,"DiffHashMap"],[3,"DiffHashSet"],[4,"DiffOption"],[3,"DiffString"],[8,"Diff"],[3,"DiffVec"],[3,"Sha256"],[3,"Signer"],[8,"MerkleDigest"],[8,"MerkleSignature"],[3,"MerkleTag"],[3,"Verifier"],[8,"Digest"],[8,"DigestExt"],[3,"Hash"],[4,"Node"],[3,"Proof"],[8,"AsLeaf"],[3,"KeyCollection"],[3,"KeyPair"],[3,"KeyRef"],[4,"KeyType"],[3,"PublicKey"],[3,"SecretKey"],[8,"SetSignature"],[3,"Signature"],[8,"SignatureName"],[8,"SignatureSign"],[4,"SignatureValue"],[8,"SignatureVerify"],[8,"TrySignature"],[8,"TrySignatureMut"],[3,"CredentialBuilder"],[3,"Credential"],[3,"Evidence"],[4,"Issuer"],[3,"Policy"],[3,"Refresh"],[3,"Schema"],[3,"Status"],[3,"Subject"],[3,"VerifiableCredential"],[4,"Error"],[3,"PresentationBuilder"],[3,"Presentation"],[3,"VerifiablePresentation"],[3,"DocumentBuilder"],[3,"Document"],[4,"Error"],[3,"ServiceBuilder"],[3,"Service"],[3,"DIDKey"],[3,"OrderedSet"],[3,"MethodBuilder"],[3,"Method"],[4,"MethodData"],[3,"MethodQuery"],[4,"MethodRef"],[4,"MethodScope"],[4,"MethodType"],[4,"DIDError"],[3,"DID"],[3,"Dereference"],[3,"DocumentMetadata"],[4,"ErrorKind"],[3,"InputMetadata"],[3,"Resolution"],[3,"ResolutionMetadata"],[4,"PrimaryResource"],[4,"Resource"],[4,"SecondaryResource"],[3,"MetaDocument"],[8,"ResolverMethod"],[3,"DocumentSigner"],[3,"DocumentVerifier"],[3,"Properties"],[8,"Revocation"],[3,"AuthChain"],[3,"DiffChain"],[3,"DocumentChain"],[3,"Client"],[3,"ClientBuilder"],[4,"Network"],[3,"TxnPrinter"],[3,"CredentialValidation"],[3,"CredentialValidator"],[3,"DocumentValidation"],[3,"PresentationValidation"],[3,"Document"],[3,"DocumentDiff"],[3,"Method"],[3,"Properties"],[3,"DID"],[4,"Error"],[13,"ChainError"],[3,"Message"],[3,"MessageId"],[3,"MessageIndex"],[8,"TangleRef"],[3,"MerkleKey"],[3,"JcsEd25519Signature2020"]]},\
"identity_core":{"doc":"Identity Core","i":[[14,"json","identity_core","Construct a `serde_json::Value` from a JSON literal.",null,null],[4,"Error","identity_core::diff","",null,null],[13,"DiffError","","",0,null],[13,"MergeError","","",0,null],[13,"ConversionError","","",0,null],[6,"Result","","",null,null],[3,"DiffHashMap","","A `DiffHashMap` type which represents a Diffed `HashMap`.…",null,null],[12,"0","","",1,null],[3,"DiffHashSet","","",null,null],[12,"0","","",2,null],[6,"DiffObject","","",null,null],[4,"DiffOption","","A `DiffOption<T>` type which represents a Diffed…",null,null],[13,"Some","","",3,null],[13,"None","","",3,null],[3,"DiffString","","The Diff Type for a `String` type.",null,null],[12,"0","","",4,null],[8,"Diff","","The primary `Diff` Trait type.",null,null],[16,"Type","","The Corresponding Diff Type for the implemented Type.",5,null],[10,"diff","","Finds the difference between two types; `self` and `other`…",5,[[],[["result",4],["error",4]]]],[10,"merge","","Merges a `Self::Type` with `Self`",5,[[],[["result",4],["error",4]]]],[10,"from_diff","","Converts a `diff` of type `Self::Type` to a `Self`.",5,[[],[["result",4],["error",4]]]],[10,"into_diff","","Converts a type of `Self` to a `diff` of `Self::Type`.",5,[[],[["result",4],["error",4]]]],[24,"Diff","","Entry point for the `Diff` derive proc macro. `Diff`…",null,null],[3,"DiffVec","","The Diff Type for `Vec`.",null,null],[12,"0","","",6,null],[0,"common","identity_core","Definitions of common types.",null,null],[4,"Value","identity_core::common","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",7,null],[13,"Bool","","Represents a JSON boolean.",7,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",7,null],[13,"String","","Represents a JSON string.",7,null],[13,"Array","","Represents a JSON array.",7,null],[13,"Object","","Represents a JSON object.",7,null],[3,"BitSet","","A general-purpose compressed bitset.",null,null],[12,"0","","",8,null],[3,"Timestamp","","A parsed Timestamp.",null,null],[12,"0","","",9,null],[3,"Url","","A parsed URL.",null,null],[12,"0","","",10,null],[4,"Context","","A reference to a JSON-LD context",null,null],[13,"Url","","A JSON-LD context expressed as a Url.",11,null],[13,"Obj","","A JSON-LD context expressed as a JSON object.",11,null],[4,"OneOrMany","","A generic container that stores one or many values of a…",null,null],[13,"One","","A single instance of `T`.",12,null],[13,"Many","","Multiple instances of `T`.",12,null],[0,"bitset","","",null,null],[3,"BitSet","identity_core::common::bitset","A general-purpose compressed bitset.",null,null],[12,"0","","",8,null],[11,"new","identity_core::common","Creates a new [`BitSet`].",8,[[]]],[11,"len","","Returns the total number of values in the set.",8,[[]]],[11,"is_empty","","Returns true if the set is empty.",8,[[]]],[11,"clear","","Clears all values in the set.",8,[[]]],[11,"contains","","Returns `true` if the set contains the specified `index`.",8,[[]]],[11,"insert","","Adds a new `index` to the set.",8,[[]]],[11,"insert_all","","Extends the set with the indices from `iter`.",8,[[]]],[11,"remove","","Removes the specified `index` from the set.",8,[[]]],[11,"serialize_b64","","Serializes the [`BitSet`] as a base64-encoded `String`.",8,[[],[["result",6],["string",3]]]],[11,"serialize_vec","","Serializes the [`BitSet`] as a vector of bytes.",8,[[],[["vec",3],["result",6]]]],[11,"deserialize_b64","","Deserializes a [`BitSet`] from base64-encoded `data`.",8,[[],["result",6]]],[11,"deserialize_slice","","Deserializes a [`BitSet`] from a slice of bytes.",8,[[],["result",6]]],[0,"context","","",null,null],[4,"Context","identity_core::common::context","A reference to a JSON-LD context",null,null],[13,"Url","","A JSON-LD context expressed as a Url.",11,null],[13,"Obj","","A JSON-LD context expressed as a JSON object.",11,null],[0,"object","identity_core::common","",null,null],[4,"Value","identity_core::common::object","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",7,null],[13,"Bool","","Represents a JSON boolean.",7,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",7,null],[13,"String","","Represents a JSON string.",7,null],[13,"Array","","Represents a JSON array.",7,null],[13,"Object","","Represents a JSON object.",7,null],[6,"Object","","An alias for an ordered map of key-[value][`Value`] pairs.",null,null],[0,"one_or_many","identity_core::common","",null,null],[3,"OneOrManyIter","identity_core::common::one_or_many","",null,null],[12,"inner","","",13,null],[12,"index","","",13,null],[4,"OneOrMany","","A generic container that stores one or many values of a…",null,null],[13,"One","","A single instance of `T`.",12,null],[13,"Many","","Multiple instances of `T`.",12,null],[11,"len","identity_core::common","Returns the number of elements in the collection",12,[[]]],[11,"is_empty","","Returns `true` if the collection is empty",12,[[]]],[11,"get","","Returns a reference to the element at the given index.",12,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to the element at the given…",12,[[],["option",4]]],[11,"contains","","Returns `true` if the collection contains the given value.",12,[[]]],[11,"push","","Adds a new value to the collection.",12,[[]]],[11,"iter","","Returns an `Iterator` that yields items from the collection.",12,[[]]],[11,"as_slice","","Returns a reference to the contents as a slice.",12,[[]]],[11,"into_vec","","Consumes the [`OneOrMany`] and returns the contents as a…",12,[[],["vec",3]]],[11,"new","identity_core::common::one_or_many","",13,[[["oneormany",4]]]],[0,"timestamp","identity_core::common","",null,null],[3,"Timestamp","identity_core::common::timestamp","A parsed Timestamp.",null,null],[12,"0","","",9,null],[11,"parse","identity_core::common","Parses a [`Timestamp`] from the provided input string.",9,[[],["result",6]]],[11,"now","","Creates a new [`Timestamp`] with the current date and time.",9,[[]]],[11,"to_unix","","Returns the [`Timestamp`] as a Unix timestamp.",9,[[]]],[11,"to_rfc3339","","Returns the [`Timestamp`] as an RFC 3339 `String`.",9,[[],["string",3]]],[0,"url","","",null,null],[3,"Url","identity_core::common::url","A parsed URL.",null,null],[12,"0","","",10,null],[11,"parse","identity_core::common","Parses an absolute [`Url`] from the given input string.",10,[[],["result",6]]],[11,"into_string","","Consumes the [`Url`] and returns the value as a `String`.",10,[[],["string",3]]],[11,"join","","Parses the given input string as a [`Url`], with `self` as…",10,[[],["result",6]]],[6,"Object","","An alias for an ordered map of key-[value][`Value`] pairs.",null,null],[0,"convert","identity_core","Traits for conversions between types.",null,null],[0,"json","identity_core::convert","",null,null],[8,"ToJson","identity_core::convert::json","A convenience-trait for types that can be serialized as…",null,null],[11,"to_json","","Serialize `self` as a string of JSON.",14,[[],[["result",6],["string",3]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",14,[[],[["vec",3],["result",6]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",14,[[],[["value",4],["result",6]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",14,[[],[["result",6],["string",3]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",14,[[],[["vec",3],["result",6]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",14,[[],[["result",6],["output",6]]]],[8,"FromJson","","A convenience-trait for types that can be deserialized…",null,null],[11,"from_json","","Deserialize `Self` from a string of JSON text.",15,[[],["result",6]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",15,[[],["result",6]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",15,[[["value",4]],["result",6]]],[8,"AsJson","","A convenience-trait for types that can be converted to and…",null,null],[11,"from_json","","Deserialize `Self` from a string of JSON text.",16,[[],["result",6]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",16,[[],["result",6]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",16,[[["value",4]],["result",6]]],[11,"to_json","","Serialize `self` as a string of JSON.",16,[[],[["result",6],["string",3]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",16,[[],[["vec",3],["result",6]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",16,[[],[["value",4],["result",6]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",16,[[],[["result",6],["string",3]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",16,[[],[["vec",3],["result",6]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",16,[[],[["result",6],["output",6]]]],[0,"serde_into","identity_core::convert","",null,null],[8,"SerdeInto","identity_core::convert::serde_into","An escape-hatch for converting between types that…",null,null],[11,"serde_into","","Converts `self` to `T` by converting to/from JSON.",17,[[],["result",6]]],[8,"AsJson","identity_core::convert","A convenience-trait for types that can be converted to and…",null,null],[11,"from_json","identity_core::convert::json","Deserialize `Self` from a string of JSON text.",16,[[],["result",6]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",16,[[],["result",6]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",16,[[["value",4]],["result",6]]],[11,"to_json","","Serialize `self` as a string of JSON.",16,[[],[["result",6],["string",3]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",16,[[],[["vec",3],["result",6]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",16,[[],[["value",4],["result",6]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",16,[[],[["result",6],["string",3]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",16,[[],[["vec",3],["result",6]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",16,[[],[["result",6],["output",6]]]],[8,"FromJson","identity_core::convert","A convenience-trait for types that can be deserialized…",null,null],[11,"from_json","identity_core::convert::json","Deserialize `Self` from a string of JSON text.",15,[[],["result",6]]],[11,"from_json_slice","","Deserialize `Self` from bytes of JSON text.",15,[[],["result",6]]],[11,"from_json_value","","Deserialize `Self` from a [`serde_json::Value`].",15,[[["value",4]],["result",6]]],[8,"ToJson","identity_core::convert","A convenience-trait for types that can be serialized as…",null,null],[11,"to_json","identity_core::convert::json","Serialize `self` as a string of JSON.",14,[[],[["result",6],["string",3]]]],[11,"to_json_vec","","Serialize `self` as a JSON byte vector.",14,[[],[["vec",3],["result",6]]]],[11,"to_json_value","","Serialize `self` as a [`serde_json::Value`].",14,[[],[["value",4],["result",6]]]],[11,"to_json_pretty","","Serialize `self` as a pretty-printed string of JSON.",14,[[],[["result",6],["string",3]]]],[11,"to_jcs","","Serialize `self` as a JSON byte vector, normalized using…",14,[[],[["vec",3],["result",6]]]],[11,"to_jcs_sha256","","Returns the given `data` serialized using JSON…",14,[[],[["result",6],["output",6]]]],[8,"SerdeInto","identity_core::convert","An escape-hatch for converting between types that…",null,null],[11,"serde_into","identity_core::convert::serde_into","Converts `self` to `T` by converting to/from JSON.",17,[[],["result",6]]],[0,"crypto","identity_core","Cryptographic Utilities",null,null],[3,"KeyCollection","identity_core::crypto","A collection of cryptographic keys.",null,null],[12,"type_","","",18,null],[12,"public","","",18,null],[12,"secret","","",18,null],[3,"KeyPair","","A convenient type for representing a pair of cryptographic…",null,null],[12,"type_","","",19,null],[12,"public","","",19,null],[12,"secret","","",19,null],[3,"KeyRef","","A borrowed reference to a cryptographic key.",null,null],[12,"kty","","",20,null],[12,"key","","",20,null],[3,"PublicKey","","A public key object.",null,null],[12,"0","","",21,null],[3,"SecretKey","","A secret key object.",null,null],[12,"0","","",22,null],[3,"JcsEd25519Signature2020","","An implementation of the JCS Ed25519 Signature 2020…",null,null],[3,"Signature","","A DID Document digital signature.",null,null],[12,"type_","","",23,null],[12,"value","","",23,null],[12,"method","","",23,null],[12,"hidden","","",23,null],[4,"KeyType","","Supported cryptographic key types.",null,null],[13,"Ed25519","","Identifies an `Ed25519` public/secret key.",24,null],[4,"SignatureValue","","A DID Document signature with a dynamic JSON field name.",null,null],[13,"None","","An empty signature value.",25,null],[13,"Jws","","A signature value with the property name `jws`.",25,null],[13,"Proof","","A signature value with the property name `proofValue`.",25,null],[13,"Signature","","A signature value with the property name `signatureValue`.",25,null],[0,"ed25519","","",null,null],[5,"ed25519_sign","identity_core::crypto::ed25519","",null,[[],["result",6]]],[5,"ed25519_verify","","",null,[[],["result",6]]],[5,"parse_public","","",null,[[],[["verificationkey",3],["option",4]]]],[5,"parse_secret","","",null,[[],[["signingkey",3],["option",4]]]],[5,"parse_signature","","",null,[[],[["signature",3],["option",4]]]],[17,"SIGNATURE_LEN","","",null,null],[17,"PUBLIC_KEY_LEN","","",null,null],[17,"SECRET_KEY_LEN","","",null,null],[0,"key","identity_core::crypto","",null,null],[0,"collection","identity_core::crypto::key","",null,null],[3,"KeyCollection","identity_core::crypto::key::collection","A collection of cryptographic keys.",null,null],[12,"type_","","",18,null],[12,"public","","",18,null],[12,"secret","","",18,null],[11,"from_iterator","identity_core::crypto","Creates a new [`KeyCollection`] from an iterator of…",18,[[["keytype",4]],["result",6]]],[11,"new_ed25519","","Creates a new [`KeyCollection`] with…",18,[[],["result",6]]],[11,"new","","Creates a new [`KeyCollection`] with the given [`key…",18,[[["keytype",4]],["result",6]]],[11,"type_","","Returns the [`type`][`KeyType`] of the `KeyCollection`…",18,[[],["keytype",4]]],[11,"len","","Returns the number of keys in the collection.",18,[[]]],[11,"is_empty","","Returns `true` if the collection contains no keys.",18,[[]]],[11,"public","","Returns a reference to the public key at the specified…",18,[[],[["option",4],["publickey",3]]]],[11,"public_ref","","Returns a [`KeyRef`] object referencing the public key at…",18,[[],[["keyref",3],["option",4]]]],[11,"secret","","Returns a reference to the secret key at the specified…",18,[[],[["secretkey",3],["option",4]]]],[11,"secret_ref","","Returns a [`KeyRef`] object referencing the secret key at…",18,[[],[["keyref",3],["option",4]]]],[11,"keypair","","Returns a [`KeyPair`] object for the keys at the specified…",18,[[],[["option",4],["keypair",3]]]],[11,"iter","","Returns an iterator over the key pairs in the collection.",18,[[]]],[11,"iter_public","","Returns an iterator over the public keys in the collection.",18,[[],[["iter",3],["publickey",3]]]],[11,"iter_secret","","Returns an iterator over the secret keys in the collection.",18,[[],[["iter",3],["secretkey",3]]]],[11,"merkle_root","","Returns the Merkle root hash of the public keys in the…",18,[[],["hash",3]]],[11,"merkle_proof","","Returns a proof-of-inclusion for the public key at the…",18,[[],[["proof",3],["option",4]]]],[11,"merkle_key_signer","","Returns a Merkle Key [`Signer`][`DynSigner`] for the…",18,[[],[["dynsigner",6],["option",4]]]],[11,"merkle_key_verifier","","Returns a Merkle Key [`Verifier`][`DynVerifier`] for the…",18,[[],["dynverifier",6]]],[11,"encode_key","","Creates a DID Document public key value for the Merkle…",18,[[],["vec",3]]],[0,"key","identity_core::crypto::key","",null,null],[3,"PublicKey","identity_core::crypto::key::key","A public key object.",null,null],[12,"0","","",21,null],[3,"SecretKey","","A secret key object.",null,null],[12,"0","","",22,null],[0,"pair","identity_core::crypto::key","",null,null],[3,"KeyPair","identity_core::crypto::key::pair","A convenient type for representing a pair of cryptographic…",null,null],[12,"type_","","",19,null],[12,"public","","",19,null],[12,"secret","","",19,null],[11,"new_ed25519","identity_core::crypto","Creates a new [`Ed25519`][`KeyType::Ed25519`] [`KeyPair`].",19,[[],["result",6]]],[11,"new","","Creates a new [`KeyPair`] with the given [`key…",19,[[["keytype",4]],["result",6]]],[11,"type_","","Returns the [`type`][`KeyType`] of the `KeyPair` object.",19,[[],["keytype",4]]],[11,"public","","Returns a reference to the [`PublicKey`] object.",19,[[],["publickey",3]]],[11,"public_ref","","Returns the public key as a [`KeyRef`] object.",19,[[],["keyref",3]]],[11,"secret","","Returns a reference to the [`SecretKey`] object.",19,[[],["secretkey",3]]],[11,"secret_ref","","Returns the secret key as a [`KeyRef`] object.",19,[[],["keyref",3]]],[0,"reference","identity_core::crypto::key","",null,null],[3,"KeyRef","identity_core::crypto::key::reference","A borrowed reference to a cryptographic key.",null,null],[12,"kty","","",20,null],[12,"key","","",20,null],[11,"new","identity_core::crypto","Creates a new [`KeyRef`] object.",20,[[["keytype",4]]]],[11,"kty","","Returns the [`KeyType`] of the key reference.",20,[[],["keytype",4]]],[11,"key","","Returns the key material as a slice of bytes.",20,[[]]],[0,"type_","identity_core::crypto::key","",null,null],[4,"KeyType","identity_core::crypto::key::type_","Supported cryptographic key types.",null,null],[13,"Ed25519","","Identifies an `Ed25519` public/secret key.",24,null],[11,"as_str","identity_core::crypto","Returns the [`KeyType`] name as a static `str`.",24,[[]]],[11,"encode_key","","Creates a DID Document public key value for the given…",24,[[["hash",3]],["vec",3]]],[0,"proof","","Types and traits for helping ensure the authenticity and…",null,null],[0,"jcs_ed25519","identity_core::crypto::proof","",null,null],[3,"JcsEd25519Signature2020","identity_core::crypto::proof::jcs_ed25519","An implementation of the JCS Ed25519 Signature 2020…",null,null],[17,"SIGNATURE_NAME","","",null,null],[0,"signature","identity_core::crypto","",null,null],[0,"signature","identity_core::crypto::signature","",null,null],[3,"Signature","identity_core::crypto::signature::signature","A DID Document digital signature.",null,null],[12,"type_","","",23,null],[12,"value","","",23,null],[12,"method","","",23,null],[12,"hidden","","",23,null],[11,"new","identity_core::crypto","Creates a new [`Signature`] instance with the given…",23,[[]]],[11,"type_","","Returns the `type` property of the signature.",23,[[]]],[11,"verification_method","","Returns the identifier of the DID method used to create…",23,[[]]],[11,"value","","Returns a reference to the signature `value`.",23,[[],["signaturevalue",4]]],[11,"value_mut","","Returns a mutable reference to the signature `value`.",23,[[],["signaturevalue",4]]],[11,"set_value","","Sets the [`SignatureValue`] of the object.",23,[[["signaturevalue",4]]]],[11,"clear_value","","Clears the current signature value - all other properties…",23,[[]]],[11,"hide_value","","Flag the signature value so it is ignored during…",23,[[]]],[11,"show_value","","Restore the signature value state so serialization behaves…",23,[[]]],[11,"__hide","","",23,[[]]],[0,"signature_value","identity_core::crypto::signature","",null,null],[4,"SignatureValue","identity_core::crypto::signature::signature_value","A DID Document signature with a dynamic JSON field name.",null,null],[13,"None","","An empty signature value.",25,null],[13,"Jws","","A signature value with the property name `jws`.",25,null],[13,"Proof","","A signature value with the property name `proofValue`.",25,null],[13,"Signature","","A signature value with the property name `signatureValue`.",25,null],[11,"is_none","identity_core::crypto","Returns `true` if the signature data is a `None` type.",25,[[]]],[11,"is_jws","","Returns `true` if the signature data is a `Jws` type.",25,[[]]],[11,"is_proof","","Returns `true` if the signature data is a `Proof` type.",25,[[]]],[11,"is_signature","","Returns `true` if the signature data is a `Signature` type.",25,[[]]],[11,"as_str","","Returns the signature data as a string slice.",25,[[]]],[11,"into_string","","Consumes the [`SignatureValue`] and returns the data as a…",25,[[],["string",3]]],[11,"as_jws","","Returns the `Jws` type signature data as a string slice.",25,[[],["option",4]]],[11,"as_proof","","Returns the `Proof` type signature data as a string slice.",25,[[],["option",4]]],[11,"as_signature","","Returns the `Signature` type signature data as a string…",25,[[],["option",4]]],[0,"traits","identity_core::crypto::signature","",null,null],[8,"SignatureName","identity_core::crypto::signature::traits","A trait for signature suites identified by a particular…",null,null],[10,"name","","Returns a unique identifier for the signatures created by…",26,[[],["string",3]]],[8,"SignatureSign","","A trait for general-purpose signature creation",null,null],[10,"sign","","Signs the given `data` with `secret` and returns a digital…",27,[[["serialize",8]],[["result",6],["signaturevalue",4]]]],[8,"SignatureVerify","","A trait for general-purpose signature verification",null,null],[10,"verify","","Verifies the authenticity of `data` using `signature` and…",28,[[["serialize",8],["signaturevalue",4]],["result",6]]],[8,"TrySignature","","A trait for types that can provide a reference to a…",null,null],[10,"signature","","Returns a reference to the [`Signature`] object, if any.",29,[[],[["signature",3],["option",4]]]],[11,"try_signature","","Returns a reference to the [`Signature`] object.",29,[[],[["signature",3],["result",6]]]],[8,"TrySignatureMut","","A trait for types that can provide a mutable reference to…",null,null],[10,"signature_mut","","Returns a mutable reference to the [`Signature`] object.",30,[[],[["signature",3],["option",4]]]],[11,"try_signature_mut","","Returns a mutable reference to the [`Signature`] object.",30,[[],[["result",6],["signature",3]]]],[8,"SetSignature","","A trait for types that can store a digital…",null,null],[10,"set_signature","","Sets the [`Signature`] object of `self`.",31,[[["signature",3]]]],[0,"merkle_key","identity_core::crypto","An implementation of Merkle Key Collection Signatures.",null,null],[3,"Sha256","identity_core::crypto::merkle_key","The SHA-256 hash algorithm with the SHA-256 initial hash…",null,null],[12,"engine","","",32,null],[3,"MerkleKey","","Common utilities for working with Merkle Key Collection…",null,null],[3,"Signer","","A signature creation helper for Merkle Key Collection…",null,null],[12,"proof","","",33,null],[12,"public","","",33,null],[12,"suite","","",33,null],[3,"MerkleTag","","A tag identifying a Merkle Key Collection signature or…",null,null],[12,"0","","",34,null],[3,"Verifier","","A signature verification helper for Merkle Key Collection…",null,null],[12,"suite","","",35,null],[12,"merkle_key","","",35,null],[12,"revocation","","",35,null],[12,"marker","","",35,null],[0,"base","","",null,null],[3,"MerkleKey","identity_core::crypto::merkle_key::base","Common utilities for working with Merkle Key Collection…",null,null],[18,"TYPE_KEY","identity_core::crypto::merkle_key","The `type` value of a Merkle Key Collection Verification…",36,null],[18,"TYPE_SIG","","The `type` value of a Merkle Key Collection Signature.",36,null],[11,"extract_tags","","Extracts the signature and digest algorithm tags from the…",36,[[],["result",6]]],[11,"encode_key","","Creates a DID Document public key value for the given…",36,[[["hash",3]],["vec",3]]],[11,"encode_ed25519_key","","Creates a DID Document public key value for the given…",36,[[["hash",3]],["vec",3]]],[11,"__tag","","",36,[[],[["result",6],["merkletag",3]]]],[0,"impls","","",null,null],[3,"Sha256","identity_core::crypto::merkle_key::impls","The SHA-256 hash algorithm with the SHA-256 initial hash…",null,null],[12,"engine","","",32,null],[0,"signer","identity_core::crypto::merkle_key","",null,null],[3,"Signer","identity_core::crypto::merkle_key::signer","A signature creation helper for Merkle Key Collection…",null,null],[12,"proof","","",33,null],[12,"public","","",33,null],[12,"suite","","",33,null],[6,"DynSigner","","An alias for a [`Signer`] with a dynamic…",null,null],[11,"from_borrowed","identity_core::crypto::merkle_key","Creates a new Merkle Key Collection [`Signer`] from a…",33,[[["publickey",3],["proof",3]]]],[11,"from_owned","","Creates a new Merkle Key Collection [`Signer`] from an…",33,[[["publickey",3],["proof",3]]]],[0,"traits","","",null,null],[3,"MerkleTag","identity_core::crypto::merkle_key::traits","A tag identifying a Merkle Key Collection signature or…",null,null],[12,"0","","",34,null],[8,"MerkleSignature","","A common interface for signature algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the signature algorithm.",37,[[],["merkletag",3]]],[8,"MerkleDigest","","A common interface for digest algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the digest algorithm.",38,[[],["merkletag",3]]],[18,"ED25519","identity_core::crypto::merkle_key","A Merkle Key Collection tag specifying `Ed25519` as the…",34,null],[18,"SHA256","","A Merkle Key Collection tag specifying `SHA-256` as the…",34,null],[11,"new","","Creates a new [`MerkleTag`] object.",34,[[]]],[0,"verifier","","",null,null],[3,"Verifier","identity_core::crypto::merkle_key::verifier","A signature verification helper for Merkle Key Collection…",null,null],[12,"suite","","",35,null],[12,"merkle_key","","",35,null],[12,"revocation","","",35,null],[12,"marker","","",35,null],[5,"expand_signature_value","","",null,[[["signaturevalue",4]],["result",6]]],[6,"DynVerifier","","An alias for a [`Verifier`] with a dynamic…",null,null],[11,"from_borrowed","identity_core::crypto::merkle_key","Creates a new [`Verifier`] from a slice of bytes.",35,[[]]],[11,"from_owned","","Creates a new [`Verifier`] from a vector of bytes.",35,[[["vec",3]]]],[11,"set_revocation","","Sets the revocation flags associated with the verification…",35,[[["bitset",3]]]],[11,"clear_revocation","","Clears the revocation flags associated with the…",35,[[]]],[11,"decompose_public_key","","",35,[[],[["hash",3],["result",6]]]],[6,"DynSigner","","An alias for a [`Signer`] with a dynamic…",null,null],[6,"DynVerifier","","An alias for a [`Verifier`] with a dynamic…",null,null],[8,"MerkleDigest","","A common interface for digest algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the digest algorithm.",38,[[],["merkletag",3]]],[8,"MerkleSignature","","A common interface for signature algorithms supported by…",null,null],[10,"tag","","A unique tag identifying the signature algorithm.",37,[[],["merkletag",3]]],[0,"merkle_tree","identity_core::crypto","Types and traits for Merkle tree operations.",null,null],[8,"Digest","identity_core::crypto::merkle_tree","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","Output size for `Digest`",39,null],[10,"new","","Create new hasher instance",39,[[]]],[10,"update","","Digest data, updating the internal state.",39,[[]]],[10,"chain","","Digest input data in a chained manner.",39,[[]]],[10,"finalize","","Retrieve result and consume hasher instance.",39,[[],["genericarray",3]]],[10,"finalize_reset","","Retrieve result and reset hasher instance.",39,[[],["genericarray",3]]],[10,"reset","","Reset hasher instance to its initial state.",39,[[]]],[10,"output_size","","Get output size of the hasher",39,[[]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",39,[[],["genericarray",3]]],[6,"Output","","Output of a [`Digest`] function",null,null],[3,"Hash","","The output of a hash function.",null,null],[12,"0","","",40,null],[3,"Proof","","An Merkle tree inclusion proof that allows proving the…",null,null],[12,"nodes","","",41,null],[4,"Node","","A tagged [`struct@Hash`].",null,null],[13,"L","","A node tagged with `L`.",42,null],[13,"R","","A node tagged with `R`.",42,null],[5,"compute_merkle_proof","","Generate a proof-of-inclusion for the leaf node at the…",null,[[],[["proof",3],["option",4]]]],[5,"compute_merkle_root","","Compute the Merkle root hash for the given slice of…",null,[[],["hash",3]]],[0,"digest","","",null,null],[8,"Digest","identity_core::crypto::merkle_tree::digest","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","Output size for `Digest`",39,null],[10,"new","","Create new hasher instance",39,[[]]],[10,"update","","Digest data, updating the internal state.",39,[[]]],[10,"chain","","Digest input data in a chained manner.",39,[[]]],[10,"finalize","","Retrieve result and consume hasher instance.",39,[[],["genericarray",3]]],[10,"finalize_reset","","Retrieve result and reset hasher instance.",39,[[],["genericarray",3]]],[10,"reset","","Reset hasher instance to its initial state.",39,[[]]],[10,"output_size","","Get output size of the hasher",39,[[]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",39,[[],["genericarray",3]]],[6,"Output","","Output of a [`Digest`] function",null,null],[17,"PREFIX_LEAF","","Leaf domain separation prefix.",null,null],[17,"PREFIX_NODE","","Node domain separation prefix.",null,null],[8,"DigestExt","","An extension of the [`Digest`] trait for Merkle tree…",null,null],[18,"OUTPUT_SIZE","","The output size of the digest function.",43,null],[11,"hash_leaf","","Computes the [`struct@Hash`] of a Merkle tree leaf node.",43,[[],["hash",3]]],[11,"hash_node","","Computes the parent [`struct@Hash`] of two Merkle tree…",43,[[["hash",3]],["hash",3]]],[11,"hash_empty","","Computes the [`struct@Hash`] of an empty Merkle tree.",43,[[],["hash",3]]],[0,"hash","identity_core::crypto::merkle_tree","",null,null],[3,"Hash","identity_core::crypto::merkle_tree::hash","The output of a hash function.",null,null],[12,"0","","",40,null],[11,"from_slice","identity_core::crypto::merkle_tree","Creates a new [`struct@Hash`] from a slice of bytes.",40,[[],["option",4]]],[11,"from_slice_unchecked","","Creates a new [`struct@Hash`] from a slice of bytes.",40,[[]]],[11,"as_slice","","Returns the [`struct@Hash`] as a slice of bytes.",40,[[]]],[0,"merkle","","",null,null],[5,"compute_merkle_root","identity_core::crypto::merkle_tree::merkle","Compute the Merkle root hash for the given slice of…",null,[[],["hash",3]]],[5,"compute_merkle_proof","","Generate a proof-of-inclusion for the leaf node at the…",null,[[],[["proof",3],["option",4]]]],[5,"__pow2","","",null,[[]]],[5,"__log2c","","",null,[[]]],[5,"__split_pow2","","",null,[[]]],[0,"node","identity_core::crypto::merkle_tree","",null,null],[4,"Node","identity_core::crypto::merkle_tree::node","A tagged [`struct@Hash`].",null,null],[13,"L","","A node tagged with `L`.",42,null],[13,"R","","A node tagged with `R`.",42,null],[11,"get","identity_core::crypto::merkle_tree","Returns the [`struct@Hash`] of the node.",42,[[],["hash",3]]],[11,"hash","","Computes the parent hash of `self` and `other` using a…",42,[[["hash",3]],["hash",3]]],[11,"hash_with","","Computes the parent hash of `self` and `other` using the…",42,[[["hash",3]],["hash",3]]],[0,"proof","","",null,null],[3,"Proof","identity_core::crypto::merkle_tree::proof","An Merkle tree inclusion proof that allows proving the…",null,null],[12,"nodes","","",41,null],[11,"new","identity_core::crypto::merkle_tree","Creates a new [`Proof`] from a boxed slice of nodes.",41,[[["box",3]]]],[11,"nodes","","Returns the nodes as a slice.",41,[[]]],[11,"index","","Returns the index of underlying leaf node in the Merkle…",41,[[]]],[11,"verify","","Verifies the computed root of `self` with the given `root`…",41,[[["hash",3]]]],[11,"verify_hash","","Verifies the computed root of `self` with the given `root`…",41,[[["hash",3],["hash",3]]]],[11,"root","","Computes the root hash from `target` using a default digest.",41,[[["hash",3]],["hash",3]]],[11,"root_with","","Computes the root hash from `target` using the given…",41,[[["hash",3]],["hash",3]]],[0,"serde","","",null,null],[5,"__proof_len","identity_core::crypto::merkle_tree::serde","",null,[[]]],[5,"__decode_hash","","",null,[[],[["hash",3],["option",4]]]],[17,"TAG_L","","",null,null],[17,"TAG_R","","",null,null],[11,"encode","identity_core::crypto::merkle_tree","Encodes `self` as a vector of bytes.",42,[[],["vec",3]]],[11,"encode_into","","Encodes `self` as a vector of bytes, appended to `output`.",42,[[["vec",3]]]],[11,"decode","","Decodes a [`Node`] from a slice of bytes.",42,[[],["option",4]]],[11,"encode","","Encodes `self` as a vector of bytes.",41,[[],["vec",3]]],[11,"encode_into","","Encodes `self` as a vector of bytes, appended to `output`.",41,[[["vec",3]]]],[11,"decode","","Decodes a [`Proof`] from a slice of bytes.",41,[[],["option",4]]],[0,"traits","","",null,null],[0,"private","identity_core::crypto::merkle_tree::traits","",null,null],[8,"Sealed","identity_core::crypto::merkle_tree::traits::private","",null,null],[8,"AsLeaf","identity_core::crypto::merkle_tree::traits","A helper trait for computing hash values used in Merkle…",null,null],[10,"hash","","Hashes `self` with the digest implentation `D`.",44,[[],["hash",3]]],[8,"DigestExt","identity_core::crypto::merkle_tree","An extension of the [`Digest`] trait for Merkle tree…",null,null],[18,"OUTPUT_SIZE","identity_core::crypto::merkle_tree::digest","The output size of the digest function.",43,null],[11,"hash_leaf","","Computes the [`struct@Hash`] of a Merkle tree leaf node.",43,[[],["hash",3]]],[11,"hash_node","","Computes the parent [`struct@Hash`] of two Merkle tree…",43,[[["hash",3]],["hash",3]]],[11,"hash_empty","","Computes the [`struct@Hash`] of an empty Merkle tree.",43,[[],["hash",3]]],[8,"AsLeaf","identity_core::crypto::merkle_tree","A helper trait for computing hash values used in Merkle…",null,null],[10,"hash","","Hashes `self` with the digest implentation `D`.",44,[[],["hash",3]]],[8,"SetSignature","identity_core::crypto","A trait for types that can store a digital…",null,null],[10,"set_signature","","Sets the [`Signature`] object of `self`.",31,[[["signature",3]]]],[8,"SignatureName","","A trait for signature suites identified by a particular…",null,null],[10,"name","","Returns a unique identifier for the signatures created by…",26,[[],["string",3]]],[8,"SignatureSign","","A trait for general-purpose signature creation",null,null],[10,"sign","","Signs the given `data` with `secret` and returns a digital…",27,[[["serialize",8]],[["result",6],["signaturevalue",4]]]],[8,"SignatureVerify","","A trait for general-purpose signature verification",null,null],[10,"verify","","Verifies the authenticity of `data` using `signature` and…",28,[[["serialize",8],["signaturevalue",4]],["result",6]]],[8,"TrySignature","","A trait for types that can provide a reference to a…",null,null],[10,"signature","","Returns a reference to the [`Signature`] object, if any.",29,[[],[["signature",3],["option",4]]]],[11,"try_signature","identity_core::crypto::signature::traits","Returns a reference to the [`Signature`] object.",29,[[],[["signature",3],["result",6]]]],[8,"TrySignatureMut","identity_core::crypto","A trait for types that can provide a mutable reference to…",null,null],[10,"signature_mut","","Returns a mutable reference to the [`Signature`] object.",30,[[],[["signature",3],["option",4]]]],[11,"try_signature_mut","identity_core::crypto::signature::traits","Returns a mutable reference to the [`Signature`] object.",30,[[],[["result",6],["signature",3]]]],[0,"error","identity_core","Errors that may occur when Self-sovereign Identity goes…",null,null],[4,"Error","identity_core::error","This type represents all possible errors that can occur in…",null,null],[13,"EncodeJSON","","Caused by a failure to encode Rust types as JSON.",45,null],[13,"DecodeJSON","","Caused by a failure to decode Rust types from JSON.",45,null],[13,"DecodeBase16","","Caused by a failure to decode base16-encoded data.",45,null],[13,"DecodeBase58","","Caused by a failure to decode base58-encoded data.",45,null],[13,"DecodeBase64","","Caused by a failure to decode base64-encoded data.",45,null],[13,"EncodeBitmap","","Cause by a failure to encode a Roaring Bitmap.",45,null],[13,"DecodeBitmap","","Cause by a failure to decode a Roaring Bitmap.",45,null],[13,"InvalidDiff","","Caused by attempting to perform an invalid `Diff` operation.",45,null],[13,"InvalidUrl","","Caused by attempting to parse an invalid `Url`.",45,null],[13,"InvalidTimestamp","","Caused by attempting to parse an invalid `Timestamp`.",45,null],[13,"InvalidProofValue","","Raised by a validation attempt against an invalid DID proof.",45,null],[13,"InvalidProofFormat","","Caused by attempting to parse an invalid DID proof.",45,null],[13,"InvalidKeyFormat","","Caused by attempting to parse an invalid cryptographic key.",45,null],[13,"InvalidMerkleKeyTag","","Caused by attempting to parse an invalid Merkle Key…",45,null],[13,"MissingSignature","","Caused by a failed attempt at retrieving a digital…",45,null],[13,"InvalidKeyCollectionSize","","Caused by attempting to create a KeyCollection of invalid…",45,null],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[0,"utils","identity_core","Misc. utility functions.",null,null],[5,"decode_b58","identity_core::utils","Decodes the given `data` as base58-btc.",null,[[],[["vec",3],["result",6]]]],[5,"encode_b58","","Encodes the given `data` as base58-btc.",null,[[],["string",3]]],[5,"decode_b16","","Decodes the given `data` as base16 (hex).",null,[[],[["vec",3],["result",6]]]],[5,"encode_b16","","Encodes the given `data` as base16 (hex).",null,[[],["string",3]]],[5,"decode_b64","","Decodes the given `data` as base64.",null,[[],[["vec",3],["result",6]]]],[5,"encode_b64","","Encodes the given `data` as base64.",null,[[],["string",3]]],[5,"generate_ed25519","","Generates a new pair of public/secret ed25519 keys.",null,[[],["result",6]]],[5,"generate_ed25519_list","","Generates a list of public/secret ed25519 keys.",null,[[],[["result",6],["vec",3]]]],[0,"base_encoding","","",null,null],[5,"decode_b58","identity_core::utils::base_encoding","Decodes the given `data` as base58-btc.",null,[[],[["vec",3],["result",6]]]],[5,"encode_b58","","Encodes the given `data` as base58-btc.",null,[[],["string",3]]],[5,"decode_b16","","Decodes the given `data` as base16 (hex).",null,[[],[["vec",3],["result",6]]]],[5,"encode_b16","","Encodes the given `data` as base16 (hex).",null,[[],["string",3]]],[5,"decode_b64","","Decodes the given `data` as base64.",null,[[],[["vec",3],["result",6]]]],[5,"encode_b64","","Encodes the given `data` as base64.",null,[[],["string",3]]],[0,"generate_ed25519","identity_core::utils","",null,null],[5,"generate_ed25519","identity_core::utils::generate_ed25519","Generates a new pair of public/secret ed25519 keys.",null,[[],["result",6]]],[5,"generate_ed25519_list","","Generates a list of public/secret ed25519 keys.",null,[[],[["result",6],["vec",3]]]],[11,"from","identity_core::diff","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"equivalent","","",4,[[]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",6,[[]]],[11,"from","identity_core::common::object","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"equivalent","","",7,[[]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",7,[[]]],[11,"from","identity_core::common","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"equivalent","","",9,[[]]],[11,"erased_serialize","","",9,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"equivalent","","",10,[[]]],[11,"erased_serialize","","",10,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"equivalent","","",12,[[]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"encode_hex","","",12,[[]]],[11,"encode_hex_upper","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"from","identity_core::common::one_or_many","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","identity_core::crypto","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"zeroize","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"zeroize","","",21,[[]]],[11,"encode_hex","","",21,[[]]],[11,"encode_hex_upper","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"zeroize","","",22,[[]]],[11,"encode_hex","","",22,[[]]],[11,"encode_hex_upper","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"equivalent","","",23,[[]]],[11,"erased_serialize","","",23,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"equivalent","","",24,[[]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"equivalent","","",25,[[]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",25,[[]]],[11,"from","identity_core::crypto::merkle_key::impls","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"new","","",32,[[]]],[11,"update","","",32,[[]]],[11,"chain","","",32,[[]]],[11,"finalize","","",32,[[],["genericarray",3]]],[11,"finalize_reset","","",32,[[],["genericarray",3]]],[11,"reset","","",32,[[]]],[11,"output_size","","",32,[[]]],[11,"digest","","",32,[[],["genericarray",3]]],[11,"finalize_into","","",32,[[["genericarray",3]]]],[11,"finalize_into_reset","","",32,[[["genericarray",3]]]],[11,"update","","",32,[[]]],[11,"finalize_reset","","",32,[[],[["global",3],["box",3]]]],[11,"finalize","","",32,[[["global",3],["box",3]],[["global",3],["box",3]]]],[11,"reset","","",32,[[]]],[11,"output_size","","",32,[[]]],[11,"box_clone","","",32,[[],[["global",3],["dyndigest",8],["box",3]]]],[11,"vzip","","",32,[[]]],[11,"from","identity_core::crypto::merkle_key","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"equivalent","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","identity_core::crypto::merkle_tree","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"equivalent","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","identity_core::error","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"index_mut","identity_core::common::object","Write into a `serde_json::Value` using the syntax…",7,[[],["value",4]]],[11,"default","","",7,[[],["value",4]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[["string",3]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[["value",4]]]],[11,"ne","","",7,[[["value",4]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"clone","","",7,[[],["value",4]]],[11,"from_iter","","Convert an iteratable type to a `Value`",7,[[],["value",4]]],[11,"from_iter","","Convert an iteratable type to a `Value`",7,[[],["value",4]]],[11,"deserialize","","",7,[[],[["value",4],["result",4]]]],[11,"deserialize_any","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_i8","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_i16","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_i32","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_i64","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_u8","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_u16","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_u32","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_u64","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_f32","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_f64","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_i128","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_u128","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_option","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_enum","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_newtype_struct","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_bool","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_char","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_str","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_string","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_bytes","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_byte_buf","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_unit","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_unit_struct","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_seq","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple_struct","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_map","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_struct","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_identifier","","",7,[[],[["error",3],["result",4]]]],[11,"deserialize_ignored_any","","",7,[[],[["error",3],["result",4]]]],[11,"index","","Index into a `serde_json::Value` using the syntax…",7,[[],["value",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"from_str","","",7,[[],[["value",4],["error",3],["result",4]]]],[11,"into_deserializer","","",7,[[]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","Convert boolean to `Value`",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","Convert 32-bit floating point number to `Value`",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","Convert copy-on-write string to `Value`",7,[[["cow",4]],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","Convert `String` to `Value`",7,[[["string",3]],["value",4]]],[11,"from","","Convert `()` to `Value`",7,[[],["value",4]]],[11,"from","","Convert 64-bit floating point number to `Value`",7,[[],["value",4]]],[11,"from","","Convert a `Vec` to `Value`",7,[[["vec",3]],["value",4]]],[11,"from","","Convert map (with string keys) to `Value`",7,[[["string",3],["value",4],["map",3]],["value",4]]],[11,"from","","Convert string slice to `Value`",7,[[],["value",4]]],[11,"from","","Convert `Number` to `Value`",7,[[["number",3]],["value",4]]],[11,"from","","Convert a slice to `Value`",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"from","","",7,[[],["value",4]]],[11,"fmt","","Display a JSON value as a string.",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","identity_core::diff","",4,[[],["diffstring",3]]],[11,"clone","","",2,[[],["diffhashset",3]]],[11,"clone","","",6,[[],["diffvec",3]]],[11,"clone","","",1,[[],["diffhashmap",3]]],[11,"clone","","",3,[[],["diffoption",4]]],[11,"hash","","",4,[[]]],[11,"default","","",3,[[],["diffoption",4]]],[11,"default","","",6,[[],["diffvec",3]]],[11,"default","","",1,[[],["diffhashmap",3]]],[11,"default","","",4,[[],["diffstring",3]]],[11,"from","","",3,[[["option",4]],["diffoption",4]]],[11,"into","","",3,[[],["option",4]]],[11,"cmp","","",4,[[["diffstring",3]],["ordering",4]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",2,[[["diffhashset",3]]]],[11,"ne","","",2,[[["diffhashset",3]]]],[11,"eq","","",1,[[["diffhashmap",3]]]],[11,"ne","","",1,[[["diffhashmap",3]]]],[11,"eq","","",6,[[["diffvec",3]]]],[11,"ne","","",6,[[["diffvec",3]]]],[11,"eq","","",3,[[["diffoption",4]]]],[11,"ne","","",3,[[["diffoption",4]]]],[11,"eq","","",4,[[["diffstring",3]]]],[11,"ne","","",4,[[["diffstring",3]]]],[11,"partial_cmp","","",4,[[["diffstring",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["diffstring",3]]]],[11,"le","","",4,[[["diffstring",3]]]],[11,"gt","","",4,[[["diffstring",3]]]],[11,"ge","","",4,[[["diffstring",3]]]],[11,"deserialize","","",1,[[],[["diffhashmap",3],["result",4]]]],[11,"deserialize","","",4,[[],[["result",4],["diffstring",3]]]],[11,"deserialize","","",6,[[],[["diffvec",3],["result",4]]]],[11,"deserialize","","",2,[[],[["diffhashset",3],["result",4]]]],[11,"deserialize","","",3,[[],[["result",4],["diffoption",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"diff","identity_core::common::object","Compares two `serde_json::Value` types; `self`, `diff` and…",7,[[["value",4]],[["result",4],["error",4]]]],[11,"merge","","Merges a `DiffValue`; `diff` with `self`; a…",7,[[],[["value",4],["result",4],["error",4]]]],[11,"from_diff","","Converts from a `diff` of type `DiffValue` to a…",7,[[],[["value",4],["result",4],["error",4]]]],[11,"into_diff","","converts a `serde_json::Value` to a `DiffValue`.",7,[[],[["result",4],["error",4]]]],[11,"serialize","identity_core::diff","",6,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"fmt","identity_core::crypto::merkle_key::impls","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",32,[[],["sha256",3]]],[11,"update","","",32,[[]]],[11,"default","","",32,[[],["sha256",3]]],[11,"reset","","",32,[[]]],[11,"finalize_into_dirty","","",32,[[["genericarray",3]]]],[11,"write","","",32,[[],[["result",4],["error",3]]]],[11,"flush","","",32,[[],[["error",3],["result",4]]]],[11,"name","identity_core::crypto","",46,[[],["string",3]]],[11,"name","identity_core::crypto::merkle_key","",33,[[],["string",3]]],[11,"name","","",35,[[],["string",3]]],[11,"sign","identity_core::crypto","",46,[[["serialize",8]],[["result",6],["signaturevalue",4]]]],[11,"sign","identity_core::crypto::merkle_key","",33,[[["serialize",8]],[["result",6],["signaturevalue",4]]]],[11,"verify","identity_core::crypto","",46,[[["serialize",8],["signaturevalue",4]],["result",6]]],[11,"verify","identity_core::crypto::merkle_key","",35,[[["serialize",8],["signaturevalue",4]],["result",6]]],[11,"tag","identity_core::crypto","",46,[[],["merkletag",3]]],[11,"tag","","",24,[[],["merkletag",3]]],[11,"tag","","",20,[[],["merkletag",3]]],[11,"tag","identity_core::crypto::merkle_key::impls","",32,[[],["merkletag",3]]],[11,"hash","identity_core::crypto::merkle_tree","",40,[[],["hash",3]]],[11,"drop","identity_core::crypto","",21,[[]]],[11,"drop","","",22,[[]]],[11,"drop","","",19,[[]]],[11,"as_ref","identity_core::common","",12,[[]]],[11,"as_ref","identity_core::crypto","",21,[[]]],[11,"as_ref","","",22,[[]]],[11,"from","identity_core::common","",11,[[["url",3]]]],[11,"from","","",11,[[["object",6]]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[["vec",3]]]],[11,"from","","",10,[[["url",3]]]],[11,"from","identity_core::crypto","",21,[[["box",3]]]],[11,"from","","",21,[[["vec",3]]]],[11,"from","","",22,[[["box",3]]]],[11,"from","","",22,[[["vec",3]]]],[11,"from","","",19,[[]]],[11,"from","identity_core::crypto::merkle_key","",34,[[]]],[11,"from","identity_core::crypto::merkle_tree","",40,[[["output",6]]]],[11,"from","identity_core::error","",45,[[["fromhexerror",4]]]],[11,"from","","",45,[[["error",4]]]],[11,"from","","",45,[[["decodeerror",4]]]],[11,"from","","",45,[[["error",4]]]],[11,"from","","",45,[[["parseerror",4]]]],[11,"from","","",45,[[["parseerror",3]]]],[11,"into_iter","identity_core::crypto","",18,[[]]],[11,"next","identity_core::common::one_or_many","",13,[[],["option",4]]],[11,"clone","identity_core::common","",8,[[],["bitset",3]]],[11,"clone","","",11,[[],["context",4]]],[11,"clone","","",12,[[],["oneormany",4]]],[11,"clone","","",9,[[],["timestamp",3]]],[11,"clone","","",10,[[],["url",3]]],[11,"clone","identity_core::crypto","",18,[[],["keycollection",3]]],[11,"clone","","",21,[[],["publickey",3]]],[11,"clone","","",22,[[],["secretkey",3]]],[11,"clone","","",19,[[],["keypair",3]]],[11,"clone","","",20,[[],["keyref",3]]],[11,"clone","","",24,[[],["keytype",4]]],[11,"clone","","",46,[[],["jcsed25519signature2020",3]]],[11,"clone","","",23,[[],["signature",3]]],[11,"clone","","",25,[[],["signaturevalue",4]]],[11,"clone","identity_core::crypto::merkle_key","",36,[[],["merklekey",3]]],[11,"clone","","",33,[[],["signer",3]]],[11,"clone","","",34,[[],["merkletag",3]]],[11,"clone","","",35,[[],["verifier",3]]],[11,"clone","identity_core::crypto::merkle_tree","",40,[[]]],[11,"clone","","",42,[[]]],[11,"clone","","",41,[[]]],[11,"default","identity_core::common","",8,[[]]],[11,"default","","",12,[[]]],[11,"default","","",9,[[]]],[11,"default","identity_core::crypto::merkle_tree","",40,[[]]],[11,"cmp","identity_core::common","",12,[[["oneormany",4]],["ordering",4]]],[11,"cmp","","",9,[[["timestamp",3]],["ordering",4]]],[11,"cmp","","",10,[[["url",3]],["ordering",4]]],[11,"cmp","identity_core::crypto","",24,[[["keytype",4]],["ordering",4]]],[11,"cmp","","",23,[[["signature",3]],["ordering",4]]],[11,"cmp","","",25,[[["signaturevalue",4]],["ordering",4]]],[11,"cmp","identity_core::crypto::merkle_key","",34,[[["merkletag",3]],["ordering",4]]],[11,"cmp","identity_core::crypto::merkle_tree","",40,[[],["ordering",4]]],[11,"eq","identity_core::common","",11,[[["context",4]]]],[11,"ne","","",11,[[["context",4]]]],[11,"eq","","",11,[[]]],[11,"eq","","",12,[[["oneormany",4]]]],[11,"ne","","",12,[[["oneormany",4]]]],[11,"eq","","",9,[[["timestamp",3]]]],[11,"ne","","",9,[[["timestamp",3]]]],[11,"eq","","",10,[[["url",3]]]],[11,"ne","","",10,[[["url",3]]]],[11,"eq","","",10,[[]]],[11,"eq","identity_core::crypto","",24,[[["keytype",4]]]],[11,"eq","","",23,[[["signature",3]]]],[11,"ne","","",23,[[["signature",3]]]],[11,"eq","","",25,[[["signaturevalue",4]]]],[11,"ne","","",25,[[["signaturevalue",4]]]],[11,"eq","identity_core::crypto::merkle_key","",34,[[["merkletag",3]]]],[11,"ne","","",34,[[["merkletag",3]]]],[11,"eq","identity_core::crypto::merkle_tree","",40,[[]]],[11,"partial_cmp","identity_core::common","",12,[[["oneormany",4]],[["ordering",4],["option",4]]]],[11,"lt","","",12,[[["oneormany",4]]]],[11,"le","","",12,[[["oneormany",4]]]],[11,"gt","","",12,[[["oneormany",4]]]],[11,"ge","","",12,[[["oneormany",4]]]],[11,"partial_cmp","","",9,[[["timestamp",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["timestamp",3]]]],[11,"le","","",9,[[["timestamp",3]]]],[11,"gt","","",9,[[["timestamp",3]]]],[11,"ge","","",9,[[["timestamp",3]]]],[11,"partial_cmp","","",10,[[["url",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["url",3]]]],[11,"le","","",10,[[["url",3]]]],[11,"gt","","",10,[[["url",3]]]],[11,"ge","","",10,[[["url",3]]]],[11,"partial_cmp","identity_core::crypto","",24,[[["keytype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",23,[[["signature",3]],[["ordering",4],["option",4]]]],[11,"lt","","",23,[[["signature",3]]]],[11,"le","","",23,[[["signature",3]]]],[11,"gt","","",23,[[["signature",3]]]],[11,"ge","","",23,[[["signature",3]]]],[11,"partial_cmp","","",25,[[["signaturevalue",4]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["signaturevalue",4]]]],[11,"le","","",25,[[["signaturevalue",4]]]],[11,"gt","","",25,[[["signaturevalue",4]]]],[11,"ge","","",25,[[["signaturevalue",4]]]],[11,"partial_cmp","identity_core::crypto::merkle_key","",34,[[["merkletag",3]],[["ordering",4],["option",4]]]],[11,"lt","","",34,[[["merkletag",3]]]],[11,"le","","",34,[[["merkletag",3]]]],[11,"gt","","",34,[[["merkletag",3]]]],[11,"ge","","",34,[[["merkletag",3]]]],[11,"partial_cmp","identity_core::crypto::merkle_tree","",40,[[],[["ordering",4],["option",4]]]],[11,"deref","identity_core::common","",12,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",9,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",10,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_core::crypto","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","identity_core::crypto::merkle_key","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","identity_core::crypto::merkle_tree","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","identity_core::error","",45,[[["formatter",3]],["result",6]]],[11,"fmt","identity_core::common","",12,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",9,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",10,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_core::crypto","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","identity_core::error","",45,[[["formatter",3]],["result",6]]],[11,"index","identity_core::crypto","",18,[[]]],[11,"index_mut","","",18,[[]]],[11,"hash","identity_core::common","",12,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","identity_core::crypto","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","identity_core::crypto::merkle_key","",34,[[]]],[11,"try_from","identity_core::common","",9,[[],["result",6]]],[11,"try_from","","",9,[[["string",3]],["result",6]]],[11,"from_str","","",9,[[],["result",6]]],[11,"from_str","","",10,[[],["result",6]]],[11,"from_str","identity_core::crypto","",24,[[],["result",6]]],[11,"source","identity_core::error","",45,[[],[["option",4],["error",8]]]],[11,"serialize","identity_core::common","",8,[[],["result",6]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","identity_core::crypto","",24,[[],["result",4]]],[11,"serialize","","",23,[[],["result",6]]],[11,"serialize","","",25,[[],["result",4]]],[11,"deserialize","identity_core::common","",8,[[],["result",6]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","identity_core::crypto","",24,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"diff","identity_core::common","",10,[[],["result",6]]],[11,"merge","","",10,[[],["result",6]]],[11,"from_diff","","",10,[[],["result",6]]],[11,"into_diff","","",10,[[],["result",6]]],[11,"ct_eq","identity_core::crypto::merkle_tree","",40,[[],["choice",3]]],[11,"zeroize","identity_core::crypto","",21,[[]]],[11,"zeroize","","",22,[[]]],[11,"zeroize","","",19,[[]]],[11,"diff","identity_core::diff","",0,[[],["error",4]]],[11,"merge","","",0,[[],["error",4]]],[11,"convert","","",0,[[],["error",4]]],[11,"get","identity_core::common::object","Index into a JSON array or map. A string index can be used…",7,[[],[["option",4],["value",4]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can…",7,[[],[["value",4],["option",4]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false…",7,[[]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map.…",7,[[],[["map",3],["option",4]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated…",7,[[],[["option",4],["map",3]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false…",7,[[]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector.…",7,[[],[["vec",3],["option",4]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable…",7,[[],[["vec",3],["option",4]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false…",7,[[]]],[11,"as_str","","If the `Value` is a String, returns the associated str.…",7,[[],["option",4]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false…",7,[[]]],[11,"is_i64","","Returns true if the `Value` is an integer between…",7,[[]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and…",7,[[]]],[11,"is_f64","","Returns true if the `Value` is a number that can be…",7,[[]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if…",7,[[],["option",4]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if…",7,[[],["option",4]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if…",7,[[],["option",4]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false…",7,[[]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.…",7,[[],["option",4]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false…",7,[[]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None…",7,[[],["option",4]]],[11,"pointer","","Looks up a value by a JSON Pointer.",7,[[],[["option",4],["value",4]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable…",7,[[],[["value",4],["option",4]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in…",7,[[],["value",4]]]],"p":[[4,"Error"],[3,"DiffHashMap"],[3,"DiffHashSet"],[4,"DiffOption"],[3,"DiffString"],[8,"Diff"],[3,"DiffVec"],[4,"Value"],[3,"BitSet"],[3,"Timestamp"],[3,"Url"],[4,"Context"],[4,"OneOrMany"],[3,"OneOrManyIter"],[8,"ToJson"],[8,"FromJson"],[8,"AsJson"],[8,"SerdeInto"],[3,"KeyCollection"],[3,"KeyPair"],[3,"KeyRef"],[3,"PublicKey"],[3,"SecretKey"],[3,"Signature"],[4,"KeyType"],[4,"SignatureValue"],[8,"SignatureName"],[8,"SignatureSign"],[8,"SignatureVerify"],[8,"TrySignature"],[8,"TrySignatureMut"],[8,"SetSignature"],[3,"Sha256"],[3,"Signer"],[3,"MerkleTag"],[3,"Verifier"],[3,"MerkleKey"],[8,"MerkleSignature"],[8,"MerkleDigest"],[8,"Digest"],[3,"Hash"],[3,"Proof"],[4,"Node"],[8,"DigestExt"],[8,"AsLeaf"],[4,"Error"],[3,"JcsEd25519Signature2020"]]},\
"identity_credential":{"doc":"Types and traits for working with Verifiable…","i":[[0,"credential","identity_credential","The core types used to create Verifiable Credentials",null,null],[3,"CredentialBuilder","identity_credential::credential","A `CredentialBuilder` is used to create a customized…",null,null],[12,"context","","",0,null],[12,"id","","",0,null],[12,"types","","",0,null],[12,"subject","","",0,null],[12,"issuer","","",0,null],[12,"issuance_date","","",0,null],[12,"expiration_date","","",0,null],[12,"status","","",0,null],[12,"schema","","",0,null],[12,"refresh","","",0,null],[12,"policy","","",0,null],[12,"evidence","","",0,null],[12,"non_transferable","","",0,null],[12,"properties","","",0,null],[3,"Credential","","A `Credential` represents a set of claims describing an…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Credential`.",1,null],[12,"id","","A unique `URI` referencing the subject of the `Credential`.",1,null],[12,"types","","One or more URIs defining the type of the `Credential`.",1,null],[12,"credential_subject","","One or more `Object`s representing the `Credential`…",1,null],[12,"issuer","","A reference to the issuer of the `Credential`.",1,null],[12,"issuance_date","","A timestamp of when the `Credential` becomes valid.",1,null],[12,"expiration_date","","A timestamp of when the `Credential` should no longer be…",1,null],[12,"credential_status","","Information used to determine the current status of the…",1,null],[12,"credential_schema","","Information used to assist in the enforcement of a…",1,null],[12,"refresh_service","","Service(s) used to refresh an expired `Credential`.",1,null],[12,"terms_of_use","","Terms-of-use specified by the `Credential` issuer.",1,null],[12,"evidence","","Human-readable evidence used to support the claims within…",1,null],[12,"non_transferable","","Indicates that the `Credential` must only be contained…",1,null],[12,"properties","","Miscellaneous properties.",1,null],[3,"Evidence","","Information used to increase confidence in the claims of a…",null,null],[12,"id","","A Url that allows retrieval of information about the…",2,null],[12,"types","","The type(s) of the credential evidence.",2,null],[12,"properties","","Additional properties of the credential evidence.",2,null],[3,"Policy","","Information used to express obligations, prohibitions, and…",null,null],[12,"id","","The instance id of the credential terms-of-use.",3,null],[12,"types","","The type(s) of the credential terms-of-use.",3,null],[12,"properties","","Additional properties of the credential terms-of-use.",3,null],[3,"Refresh","","Information used to refresh or assert the status of a…",null,null],[12,"id","","The Url of the credential refresh service.",4,null],[12,"types","","The type(s) of the credential refresh service.",4,null],[12,"properties","","Additional properties of the credential refresh service.",4,null],[3,"Schema","","Information used to validate the structure of a…",null,null],[12,"id","","A Url identifying the credential schema file.",5,null],[12,"types","","The type(s) of the credential schema.",5,null],[12,"properties","","Additional properties of the credential schema.",5,null],[3,"Status","","Information used to determine the current status of a…",null,null],[12,"id","","A Url identifying the credential status.",6,null],[12,"types","","The type(s) of the credential status.",6,null],[12,"properties","","Additional properties of the credential status.",6,null],[3,"Subject","","An entity who is the target of a set of claims.",null,null],[12,"id","","A Url identifying the credential subject.",7,null],[12,"properties","","Additional properties of the credential subject.",7,null],[3,"VerifiableCredential","","A `VerifiableCredential` represents a `Credential` with an…",null,null],[12,"credential","","",8,null],[12,"proof","","",8,null],[4,"Issuer","","An identifier representing the issuer of a `Credential`.",null,null],[13,"Url","","A credential issuer expressed as a Url.",9,null],[13,"Obj","","A credential issuer expressed as a JSON object.",9,null],[0,"builder","","",null,null],[3,"CredentialBuilder","identity_credential::credential::builder","A `CredentialBuilder` is used to create a customized…",null,null],[12,"context","","",0,null],[12,"id","","",0,null],[12,"types","","",0,null],[12,"subject","","",0,null],[12,"issuer","","",0,null],[12,"issuance_date","","",0,null],[12,"expiration_date","","",0,null],[12,"status","","",0,null],[12,"schema","","",0,null],[12,"refresh","","",0,null],[12,"policy","","",0,null],[12,"evidence","","",0,null],[12,"non_transferable","","",0,null],[12,"properties","","",0,null],[11,"new","identity_credential::credential","Creates a new `CredentialBuilder`.",0,[[]]],[11,"context","","Adds a value to the `Credential` context set.",0,[[]]],[11,"id","","Sets the value of the `Credential` `id`.",0,[[["url",3]]]],[11,"type_","","Adds a value to the `Credential` type set.",0,[[]]],[11,"subject","","Adds a value to the `credentialSubject` set.",0,[[["subject",3]]]],[11,"issuer","","Sets the value of the `Credential` `issuer`.",0,[[]]],[11,"issuance_date","","Sets the value of the `Credential` `issuanceDate`.",0,[[["timestamp",3]]]],[11,"expiration_date","","Sets the value of the `Credential` `expirationDate`.",0,[[["timestamp",3]]]],[11,"status","","Adds a value to the `credentialStatus` set.",0,[[["status",3]]]],[11,"schema","","Adds a value to the `credentialSchema` set.",0,[[["schema",3]]]],[11,"refresh","","Adds a value to the `refreshService` set.",0,[[["refresh",3]]]],[11,"policy","","Adds a value to the `termsOfUse` set.",0,[[["policy",3]]]],[11,"evidence","","Adds a value to the `evidence` set.",0,[[["evidence",3]]]],[11,"non_transferable","","Sets the value of the `Credential` `nonTransferable`…",0,[[]]],[11,"build","","Returns a new `Credential` based on the…",0,[[],[["result",6],["credential",3]]]],[11,"property","","Adds a new custom property to the `Credential`.",0,[[]]],[11,"properties","","Adds a series of custom properties to the `Credential`.",0,[[]]],[0,"credential","","",null,null],[3,"BASE_CONTEXT","identity_credential::credential::credential","",null,null],[12,"__private_field","","",10,null],[3,"Credential","","A `Credential` represents a set of claims describing an…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Credential`.",1,null],[12,"id","","A unique `URI` referencing the subject of the `Credential`.",1,null],[12,"types","","One or more URIs defining the type of the `Credential`.",1,null],[12,"credential_subject","","One or more `Object`s representing the `Credential`…",1,null],[12,"issuer","","A reference to the issuer of the `Credential`.",1,null],[12,"issuance_date","","A timestamp of when the `Credential` becomes valid.",1,null],[12,"expiration_date","","A timestamp of when the `Credential` should no longer be…",1,null],[12,"credential_status","","Information used to determine the current status of the…",1,null],[12,"credential_schema","","Information used to assist in the enforcement of a…",1,null],[12,"refresh_service","","Service(s) used to refresh an expired `Credential`.",1,null],[12,"terms_of_use","","Terms-of-use specified by the `Credential` issuer.",1,null],[12,"evidence","","Human-readable evidence used to support the claims within…",1,null],[12,"non_transferable","","Indicates that the `Credential` must only be contained…",1,null],[12,"properties","","Miscellaneous properties.",1,null],[11,"base_context","identity_credential::credential","Returns the base JSON-LD context for `Credential`s.",1,[[],["context",4]]],[11,"base_type","","Returns the base type for `Credential`s.",1,[[]]],[11,"builder","","Creates a new `CredentialBuilder` to configure a…",1,[[],["credentialbuilder",3]]],[11,"from_builder","","Returns a new `Credential` based on the…",1,[[["credentialbuilder",3]],["result",6]]],[11,"check_structure","","Validates the semantic structure of the `Credential`.",1,[[],["result",6]]],[11,"sign","","Creates a new [`VerifiableCredential`] by signing `self`…",1,[[["document",3],["methodquery",3],["secretkey",3]],[["result",6],["verifiablecredential",3]]]],[0,"evidence","","",null,null],[3,"Evidence","identity_credential::credential::evidence","Information used to increase confidence in the claims of a…",null,null],[12,"id","","A Url that allows retrieval of information about the…",2,null],[12,"types","","The type(s) of the credential evidence.",2,null],[12,"properties","","Additional properties of the credential evidence.",2,null],[11,"new","identity_credential::credential","Creates a new [`Evidence`] instance.",2,[[]]],[11,"with_id","","Creates a new [`Evidence`] instance with the given `id`.",2,[[]]],[11,"with_properties","","Creates a new [`Evidence`] instance with the given…",2,[[["object",6]]]],[11,"with_id_and_properties","","Creates a new [`Evidence`] instance with the given `id`…",2,[[["object",6]]]],[0,"issuer","","",null,null],[3,"IssuerData","identity_credential::credential::issuer","A `Credential` issuer in object form.",null,null],[12,"id","","A Url identifying the credential issuer.",11,null],[12,"properties","","Additional properties of the credential issuer.",11,null],[4,"Issuer","","An identifier representing the issuer of a `Credential`.",null,null],[13,"Url","","A credential issuer expressed as a Url.",9,null],[13,"Obj","","A credential issuer expressed as a JSON object.",9,null],[11,"url","identity_credential::credential","Returns a reference to the credential issuer Url.",9,[[],["url",3]]],[0,"policy","","",null,null],[3,"Policy","identity_credential::credential::policy","Information used to express obligations, prohibitions, and…",null,null],[12,"id","","The instance id of the credential terms-of-use.",3,null],[12,"types","","The type(s) of the credential terms-of-use.",3,null],[12,"properties","","Additional properties of the credential terms-of-use.",3,null],[11,"new","identity_credential::credential","Creates a new [`Policy`] instance.",3,[[]]],[11,"with_id","","Creates a new [`Policy`] instance with the given `id`.",3,[[["url",3]]]],[11,"with_properties","","Creates a new [`Policy`] instance with the given…",3,[[["object",6]]]],[11,"with_id_and_properties","","Creates a new [`Policy`] instance with the given `id` and…",3,[[["object",6],["url",3]]]],[0,"refresh","","",null,null],[3,"Refresh","identity_credential::credential::refresh","Information used to refresh or assert the status of a…",null,null],[12,"id","","The Url of the credential refresh service.",4,null],[12,"types","","The type(s) of the credential refresh service.",4,null],[12,"properties","","Additional properties of the credential refresh service.",4,null],[11,"new","identity_credential::credential","Creates a new [`Refresh`].",4,[[["url",3]]]],[11,"with_properties","","Creates a new [`Refresh`] with the given `properties`.",4,[[["object",6],["url",3]]]],[0,"schema","","",null,null],[3,"Schema","identity_credential::credential::schema","Information used to validate the structure of a…",null,null],[12,"id","","A Url identifying the credential schema file.",5,null],[12,"types","","The type(s) of the credential schema.",5,null],[12,"properties","","Additional properties of the credential schema.",5,null],[11,"new","identity_credential::credential","Creates a new [`Schema`].",5,[[["url",3]]]],[11,"with_properties","","Creates a new [`Schema`] with the given `properties`.",5,[[["object",6],["url",3]]]],[0,"status","","",null,null],[3,"Status","identity_credential::credential::status","Information used to determine the current status of a…",null,null],[12,"id","","A Url identifying the credential status.",6,null],[12,"types","","The type(s) of the credential status.",6,null],[12,"properties","","Additional properties of the credential status.",6,null],[11,"new","identity_credential::credential","Creates a new [`Status`].",6,[[["url",3]]]],[11,"with_properties","","Creates a new [`Status`] with the given `properties`.",6,[[["object",6],["url",3]]]],[0,"subject","","",null,null],[3,"Subject","identity_credential::credential::subject","An entity who is the target of a set of claims.",null,null],[12,"id","","A Url identifying the credential subject.",7,null],[12,"properties","","Additional properties of the credential subject.",7,null],[11,"new","identity_credential::credential","Creates a new [`Subject`].",7,[[]]],[11,"with_id","","Creates a new [`Subject`] with the given `id`.",7,[[["url",3]]]],[11,"with_properties","","Creates a new [`Subject`] with the given `properties`.",7,[[["object",6]]]],[11,"with_id_and_properties","","Creates a new [`Subject`] with the given `id` and…",7,[[["object",6],["url",3]]]],[0,"verifiable","","",null,null],[3,"VerifiableCredential","identity_credential::credential::verifiable","A `VerifiableCredential` represents a `Credential` with an…",null,null],[12,"credential","","",8,null],[12,"proof","","",8,null],[11,"new","identity_credential::credential","Creates a new `VerifiableCredential`.",8,[[["credential",3]]]],[11,"proof","","Returns a reference to the `VerifiableCredential` proof.",8,[[],["oneormany",4]]],[11,"proof_mut","","Returns a mutable reference to the `VerifiableCredential`…",8,[[],["oneormany",4]]],[0,"error","identity_credential","Errors that may occur when working with Verifiable…",null,null],[4,"Error","identity_credential::error","This type represents all possible errors that can occur in…",null,null],[13,"DIDError","","Caused by errors from the `identity_did` crate.",12,null],[13,"MissingBaseContext","","Caused when validating a Credential without a valid base…",12,null],[13,"MissingBaseType","","Caused when validating a Credential without a valid base…",12,null],[13,"MissingIssuer","","Caused when validating a Credential without an issuer.",12,null],[13,"MissingSubject","","Caused when validating a Credential without a subject.",12,null],[13,"InvalidSubject","","Caused when validating a Credential with a malformed…",12,null],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[0,"presentation","identity_credential","The core types used to create Verifiable Presentations",null,null],[3,"PresentationBuilder","identity_credential::presentation","A `PresentationBuilder` is used to create a customized…",null,null],[12,"context","","",13,null],[12,"id","","",13,null],[12,"types","","",13,null],[12,"credentials","","",13,null],[12,"holder","","",13,null],[12,"refresh","","",13,null],[12,"policy","","",13,null],[12,"properties","","",13,null],[3,"Presentation","","A `Presentation` represents a bundle of one or more…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Presentation`.",14,null],[12,"id","","A unique `URI` referencing the subject of the…",14,null],[12,"types","","One or more URIs defining the type of the `Presentation`.",14,null],[12,"verifiable_credential","","Credential(s) expressing the claims of the `Presentation`.",14,null],[12,"holder","","The entity that generated the presentation.",14,null],[12,"refresh_service","","Service(s) used to refresh an expired `Presentation`.",14,null],[12,"terms_of_use","","Terms-of-use specified by the `Presentation` holder.",14,null],[12,"properties","","Miscellaneous properties.",14,null],[3,"VerifiablePresentation","","A `VerifiablePresentation` represents a `Presentation`…",null,null],[12,"presentation","","",15,null],[12,"proof","","",15,null],[0,"builder","","",null,null],[3,"PresentationBuilder","identity_credential::presentation::builder","A `PresentationBuilder` is used to create a customized…",null,null],[12,"context","","",13,null],[12,"id","","",13,null],[12,"types","","",13,null],[12,"credentials","","",13,null],[12,"holder","","",13,null],[12,"refresh","","",13,null],[12,"policy","","",13,null],[12,"properties","","",13,null],[11,"new","identity_credential::presentation","Creates a new `PresentationBuilder`.",13,[[]]],[11,"context","","Adds a value to the `Presentation` context set.",13,[[]]],[11,"id","","Sets the value of the `Presentation` `id`.",13,[[["url",3]]]],[11,"type_","","Adds a value to the `Presentation` type set.",13,[[]]],[11,"credential","","Adds a value to the `verifiableCredential` set.",13,[[["verifiablecredential",3]]]],[11,"holder","","Sets the value of the `Credential` `holder`.",13,[[["url",3]]]],[11,"refresh","","Adds a value to the `refreshService` set.",13,[[["refresh",3]]]],[11,"policy","","Adds a value to the `termsOfUse` set.",13,[[["policy",3]]]],[11,"build","","Returns a new `Presentation` based on the…",13,[[],[["result",6],["presentation",3]]]],[11,"property","","Adds a new custom property to the `Presentation`.",13,[[]]],[11,"properties","","Adds a series of custom properties to the `Presentation`.",13,[[]]],[0,"presentation","","",null,null],[3,"Presentation","identity_credential::presentation::presentation","A `Presentation` represents a bundle of one or more…",null,null],[12,"context","","The JSON-LD context(s) applicable to the `Presentation`.",14,null],[12,"id","","A unique `URI` referencing the subject of the…",14,null],[12,"types","","One or more URIs defining the type of the `Presentation`.",14,null],[12,"verifiable_credential","","Credential(s) expressing the claims of the `Presentation`.",14,null],[12,"holder","","The entity that generated the presentation.",14,null],[12,"refresh_service","","Service(s) used to refresh an expired `Presentation`.",14,null],[12,"terms_of_use","","Terms-of-use specified by the `Presentation` holder.",14,null],[12,"properties","","Miscellaneous properties.",14,null],[11,"base_context","identity_credential::presentation","Returns the base JSON-LD context for `Presentation`s.",14,[[],["context",4]]],[11,"base_type","","Returns the base type for `Presentation`s.",14,[[]]],[11,"builder","","Creates a `PresentationBuilder` to configure a new…",14,[[],["presentationbuilder",3]]],[11,"from_builder","","Returns a new `Presentation` based on the…",14,[[["presentationbuilder",3]],["result",6]]],[11,"check_structure","","Validates the semantic structure of the `Presentation`.",14,[[],["result",6]]],[0,"verifiable","","",null,null],[3,"VerifiablePresentation","identity_credential::presentation::verifiable","A `VerifiablePresentation` represents a `Presentation`…",null,null],[12,"presentation","","",15,null],[12,"proof","","",15,null],[11,"new","identity_credential::presentation","Creates a new `VerifiablePresentation`.",15,[[["presentation",3]]]],[11,"proof","","Returns a reference to the `VerifiablePresentation` proof.",15,[[],["oneormany",4]]],[11,"proof_mut","","Returns a mutable reference to the…",15,[[],["oneormany",4]]],[11,"from","identity_credential::credential","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"erased_serialize","","",9,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",9,[[]]],[11,"from","identity_credential::credential::credential","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","identity_credential::credential::issuer","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",11,[[]]],[11,"from","identity_credential::error","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","identity_credential::presentation","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",15,[[]]],[11,"from","identity_credential::credential","",9,[[]]],[11,"from","identity_credential::error","",12,[[["error",4]]]],[11,"clone","identity_credential::credential","",0,[[],["credentialbuilder",3]]],[11,"clone","","",1,[[],["credential",3]]],[11,"clone","","",2,[[],["evidence",3]]],[11,"clone","identity_credential::credential::issuer","",11,[[],["issuerdata",3]]],[11,"clone","identity_credential::credential","",9,[[],["issuer",4]]],[11,"clone","","",3,[[],["policy",3]]],[11,"clone","","",4,[[],["refresh",3]]],[11,"clone","","",5,[[],["schema",3]]],[11,"clone","","",6,[[],["status",3]]],[11,"clone","","",7,[[],["subject",3]]],[11,"clone","","",8,[[],["verifiablecredential",3]]],[11,"clone","identity_credential::presentation","",13,[[],["presentationbuilder",3]]],[11,"clone","","",14,[[],["presentation",3]]],[11,"clone","","",15,[[],["verifiablepresentation",3]]],[11,"default","identity_credential::credential","",0,[[]]],[11,"default","","",2,[[],["evidence",3]]],[11,"default","","",3,[[],["policy",3]]],[11,"default","","",7,[[],["subject",3]]],[11,"default","identity_credential::presentation","",13,[[]]],[11,"eq","identity_credential::credential","",1,[[["credential",3]]]],[11,"ne","","",1,[[["credential",3]]]],[11,"eq","","",2,[[["evidence",3]]]],[11,"ne","","",2,[[["evidence",3]]]],[11,"eq","identity_credential::credential::issuer","",11,[[["issuerdata",3]]]],[11,"ne","","",11,[[["issuerdata",3]]]],[11,"eq","identity_credential::credential","",9,[[["issuer",4]]]],[11,"ne","","",9,[[["issuer",4]]]],[11,"eq","","",3,[[["policy",3]]]],[11,"ne","","",3,[[["policy",3]]]],[11,"eq","","",4,[[["refresh",3]]]],[11,"ne","","",4,[[["refresh",3]]]],[11,"eq","","",5,[[["schema",3]]]],[11,"ne","","",5,[[["schema",3]]]],[11,"eq","","",6,[[["status",3]]]],[11,"ne","","",6,[[["status",3]]]],[11,"eq","","",7,[[["subject",3]]]],[11,"ne","","",7,[[["subject",3]]]],[11,"eq","","",8,[[["verifiablecredential",3]]]],[11,"ne","","",8,[[["verifiablecredential",3]]]],[11,"eq","identity_credential::presentation","",14,[[["presentation",3]]]],[11,"ne","","",14,[[["presentation",3]]]],[11,"eq","","",15,[[["verifiablepresentation",3]]]],[11,"ne","","",15,[[["verifiablepresentation",3]]]],[11,"deref","identity_credential::credential::credential","",10,[[],["context",4]]],[11,"deref","identity_credential::credential","",8,[[]]],[11,"deref","identity_credential::presentation","",15,[[]]],[11,"deref_mut","identity_credential::credential","",8,[[]]],[11,"deref_mut","identity_credential::presentation","",15,[[]]],[11,"fmt","identity_credential::credential","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::credential::issuer","",11,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::credential","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::presentation","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::credential","",1,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",8,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_credential::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","identity_credential::presentation","",14,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",15,[[["formatter",3]],["fmtresult",6]]],[11,"source","identity_credential::error","",12,[[],[["option",4],["error",8]]]],[11,"initialize","identity_credential::credential::credential","",10,[[]]],[11,"serialize","identity_credential::credential","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","identity_credential::credential::issuer","",11,[[],["result",4]]],[11,"serialize","identity_credential::credential","",9,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","identity_credential::presentation","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"deserialize","identity_credential::credential","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","identity_credential::credential::issuer","",11,[[],["result",4]]],[11,"deserialize","identity_credential::credential","",9,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","identity_credential::presentation","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"signature","identity_credential::credential","",8,[[],[["signature",3],["option",4]]]],[11,"signature","identity_credential::presentation","",15,[[],[["signature",3],["option",4]]]],[11,"signature_mut","identity_credential::credential","",8,[[],[["option",4],["signature",3]]]],[11,"signature_mut","identity_credential::presentation","",15,[[],[["option",4],["signature",3]]]],[11,"set_signature","identity_credential::credential","",8,[[["signature",3]]]],[11,"set_signature","identity_credential::presentation","",15,[[["signature",3]]]]],"p":[[3,"CredentialBuilder"],[3,"Credential"],[3,"Evidence"],[3,"Policy"],[3,"Refresh"],[3,"Schema"],[3,"Status"],[3,"Subject"],[3,"VerifiableCredential"],[4,"Issuer"],[3,"BASE_CONTEXT"],[3,"IssuerData"],[4,"Error"],[3,"PresentationBuilder"],[3,"Presentation"],[3,"VerifiablePresentation"]]},\
"identity_derive":{"doc":"","i":[[5,"internal","identity_derive","Function for dealing with the internal logic of the macro.",null,[[["deriveinput",3]],["tokenstream",3]]],[0,"impls","","",null,null],[0,"enums","identity_derive::impls","",null,null],[5,"derive_diff_enum","identity_derive::impls::enums","derive a Diff type Enum from an incoming `InputModel`.",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"impl_debug_enum","","",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"impl_diff_enum","","derive the `Diff` trait for incoming Enum in `InputModel`.",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"parse_evariants","","function that parses and sorts the variants into twp Vec…",null,[[["ident",3]]]],[5,"parse_merge","","",null,[[["ident",3],["svariant",4]]]],[5,"parse_diff","","parses data for the derived diff function.",null,[[["ident",3],["svariant",4]]]],[5,"parse_from_into","","",null,[[["ident",3],["evariant",3],["svariant",4]]]],[5,"populate_field_names","","",null,[[["svariant",4]]]],[0,"structs","identity_derive::impls","",null,null],[5,"derive_diff_struct","identity_derive::impls::structs","Derive the difference struct code from the `InputModel`",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"debug_impl","","Implement the Debug trait on a derived struct.",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"impl_from_into","","",null,[[["inputmodel",4]],["tokenstream",3]]],[5,"diff_impl","","implement Diff for the struct.",null,[[["inputmodel",4]],["tokenstream",3]]],[0,"model","identity_derive","",null,null],[3,"InputEnum","identity_derive::model","Sorts attributes regarding incoming Enums.",null,null],[12,"name","","",0,null],[12,"diff","","",0,null],[12,"variants","","",0,null],[12,"param_decls","","",0,null],[12,"params","","",0,null],[12,"clause","","",0,null],[12,"from_into","","",0,null],[3,"InputStruct","","Sorts data regarding incoming Structs.",null,null],[12,"variant","","",1,null],[12,"name","","",1,null],[12,"diff","","",1,null],[12,"fields","","",1,null],[12,"param_decls","","",1,null],[12,"params","","",1,null],[12,"clause","","",1,null],[12,"from_into","","",1,null],[3,"EVariant","","Enum variant data.",null,null],[12,"variant","","",2,null],[12,"name","","",2,null],[12,"fields","","",2,null],[4,"InputModel","","A model for dealing with the different input from the…",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"SVariant","","Struct Variant structure types.",null,null],[13,"Named","","",4,null],[13,"Tuple","","",4,null],[13,"Unit","","",4,null],[4,"DataFields","","sorts data for fields inside of a struct or enum.",null,null],[13,"Named","","",5,null],[12,"name","identity_derive::model::DataFields","",6,null],[12,"typ","","",6,null],[12,"should_ignore","","",6,null],[13,"Unnamed","identity_derive::model","",5,null],[12,"position","identity_derive::model::DataFields","",7,null],[12,"typ","","",7,null],[12,"should_ignore","","",7,null],[11,"parse","identity_derive::model","",3,[[["deriveinput",3]]]],[11,"parse_struct","","parse structs.",3,[[["fields",4],["deriveinput",3]]]],[11,"parse_unit","","parse unit structs.",3,[[["deriveinput",3]]]],[11,"parse_enum","","parse enums.",3,[[["punctuated",3],["deriveinput",3]]]],[11,"s_variant","","get struct variant.",3,[[],["svariant",4]]],[11,"e_variants","","get enum variant.",3,[[],["vec",3]]],[11,"name","","get name of struct or enum.",3,[[],["ident",3]]],[11,"diff","","get diff name for enum or struct.",3,[[],["ident",3]]],[11,"params","","get the params for the Enum or Struct.",3,[[],["punctuated",3]]],[11,"param_decls","","get the param declarations for the Enum or Struct.",3,[[],["punctuated",3]]],[11,"fields","","get the fields for the Enum or Struct.",3,[[],["vec",3]]],[11,"clause","","Get the where clause.",3,[[],["whereclause",3]]],[11,"impl_debug","","Implement the `Debug` trait on Enums and Structs.",3,[[],["tokenstream",3]]],[11,"impl_from_into","","",3,[[],["tokenstream",3]]],[11,"impl_diff","","Implement the `Diff` trait on Enums and Structs.",3,[[],["tokenstream",3]]],[11,"derive_diff","","Build the Diff Type for the Enum or Struct.",3,[[],["tokenstream",3]]],[11,"from_into","","",3,[[]]],[11,"new","","create a new `InputEnum`.",0,[[["deriveinput",3]]]],[11,"parse","","parse the enum.",0,[[["punctuated",3],["deriveinput",3]]]],[11,"new","","create a new `InputStruct`.",1,[[["deriveinput",3]]]],[11,"parse","","parse the ast into for the `InputStruct`.",1,[[["fields",4],["deriveinput",3]]]],[11,"parse_unit","","parse data for a unit struct.",1,[[["deriveinput",3]]]],[11,"new","","create a new enum variant type.",2,[[["ident",3]]]],[11,"name","","get the field name.",5,[[],["ident",3]]],[11,"position","","get the field position.",5,[[],["literal",3]]],[11,"typ","","get the field type.",5,[[],["type",4]]],[11,"typ_as_tokens","","get the type of the field wrapped in an `Option<T>` where…",5,[[],["tokenstream",3]]],[11,"is_option","","check if the field is an Option to avoid nested Options.",5,[[]]],[11,"should_ignore","","check to see if the should ignore flag is set for the field.",5,[[]]],[0,"utils","identity_derive","",null,null],[5,"extract_option_segment","identity_derive::utils","checks to see if a field\'s type is `Option`. This logic is…",null,[[["path",3]],[["pathsegment",3],["option",4]]]],[5,"should_ignore","","checks to see if the `should_ignore` attribute has been…",null,[[["field",3]]]],[5,"parse_from_into","","",null,[[["deriveinput",3]]]],[17,"PARENS","","",null,null],[24,"Diff","identity_derive","Entry point for the `Diff` derive proc macro. `Diff`…",null,null],[11,"from","identity_derive::model","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"clone","","",3,[[],["inputmodel",4]]],[11,"clone","","",0,[[],["inputenum",3]]],[11,"clone","","",1,[[],["inputstruct",3]]],[11,"clone","","",2,[[],["evariant",3]]],[11,"clone","","",4,[[],["svariant",4]]],[11,"clone","","",5,[[],["datafields",4]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]]],"p":[[3,"InputEnum"],[3,"InputStruct"],[3,"EVariant"],[4,"InputModel"],[4,"SVariant"],[4,"DataFields"],[13,"Named"],[13,"Unnamed"]]},\
"identity_did":{"doc":"Agnostic implementation of the Decentralized Identifiers…","i":[[3,"DID","identity_did::did","A Decentralized Identifier (DID).",null,null],[12,"data","","",0,null],[12,"core","","",0,null],[4,"Error","","",null,null],[13,"InvalidAuthority","","",1,null],[13,"InvalidFragment","","",1,null],[13,"InvalidMethodId","","",1,null],[13,"InvalidMethodName","","",1,null],[13,"InvalidPath","","",1,null],[13,"InvalidQuery","","",1,null],[13,"InvalidScheme","","",1,null],[6,"Result","","",null,null],[14,"did","","A helper macro to assist with the construction of [`DID`]s.",null,null],[0,"diff","identity_did","",null,null],[3,"DiffDocument","identity_did::diff","",null,null],[12,"id","","",2,null],[12,"controller","","",2,null],[12,"also_known_as","","",2,null],[12,"verification_method","","",2,null],[12,"authentication","","",2,null],[12,"assertion_method","","",2,null],[12,"key_agreement","","",2,null],[12,"capability_delegation","","",2,null],[12,"capability_invocation","","",2,null],[12,"service","","",2,null],[12,"properties","","",2,null],[3,"DiffMethod","","",null,null],[12,"id","","",3,null],[12,"controller","","",3,null],[12,"key_type","","",3,null],[12,"key_data","","",3,null],[12,"properties","","",3,null],[3,"DiffService","","",null,null],[12,"id","","",4,null],[12,"type_","","",4,null],[12,"service_endpoint","","",4,null],[12,"properties","","",4,null],[4,"DiffMethodData","","",null,null],[13,"PublicKeyBase58","","",5,null],[13,"PublicKeyHex","","",5,null],[13,"PublicKeyJwk","","",5,null],[4,"DiffMethodRef","","",null,null],[13,"Embed","","",6,null],[13,"Refer","","",6,null],[0,"did_key","","",null,null],[0,"document","","",null,null],[3,"DiffDocument","identity_did::diff::document","",null,null],[12,"id","","",2,null],[12,"controller","","",2,null],[12,"also_known_as","","",2,null],[12,"verification_method","","",2,null],[12,"authentication","","",2,null],[12,"assertion_method","","",2,null],[12,"key_agreement","","",2,null],[12,"capability_delegation","","",2,null],[12,"capability_invocation","","",2,null],[12,"service","","",2,null],[12,"properties","","",2,null],[0,"method","identity_did::diff","",null,null],[3,"DiffMethod","identity_did::diff::method","",null,null],[12,"id","","",3,null],[12,"controller","","",3,null],[12,"key_type","","",3,null],[12,"key_data","","",3,null],[12,"properties","","",3,null],[0,"method_data","identity_did::diff","",null,null],[4,"DiffMethodData","identity_did::diff::method_data","",null,null],[13,"PublicKeyBase58","","",5,null],[13,"PublicKeyHex","","",5,null],[13,"PublicKeyJwk","","",5,null],[0,"method_ref","identity_did::diff","",null,null],[4,"DiffMethodRef","identity_did::diff::method_ref","",null,null],[13,"Embed","","",6,null],[13,"Refer","","",6,null],[0,"method_type","identity_did::diff","",null,null],[0,"ordered_set","","",null,null],[0,"service","","",null,null],[3,"DiffService","identity_did::diff::service","",null,null],[12,"id","","",4,null],[12,"type_","","",4,null],[12,"service_endpoint","","",4,null],[12,"properties","","",4,null],[0,"document","identity_did","",null,null],[3,"DocumentBuilder","identity_did::document","A `DocumentBuilder` is used to generate a customized…",null,null],[12,"id","","",7,null],[12,"controller","","",7,null],[12,"also_known_as","","",7,null],[12,"verification_method","","",7,null],[12,"authentication","","",7,null],[12,"assertion_method","","",7,null],[12,"key_agreement","","",7,null],[12,"capability_delegation","","",7,null],[12,"capability_invocation","","",7,null],[12,"service","","",7,null],[12,"properties","","",7,null],[3,"Document","","A DID Document",null,null],[12,"id","","",8,null],[12,"controller","","",8,null],[12,"also_known_as","","",8,null],[12,"verification_method","","",8,null],[12,"authentication","","",8,null],[12,"assertion_method","","",8,null],[12,"key_agreement","","",8,null],[12,"capability_delegation","","",8,null],[12,"capability_invocation","","",8,null],[12,"service","","",8,null],[12,"properties","","",8,null],[0,"builder","","",null,null],[3,"DocumentBuilder","identity_did::document::builder","A `DocumentBuilder` is used to generate a customized…",null,null],[12,"id","","",7,null],[12,"controller","","",7,null],[12,"also_known_as","","",7,null],[12,"verification_method","","",7,null],[12,"authentication","","",7,null],[12,"assertion_method","","",7,null],[12,"key_agreement","","",7,null],[12,"capability_delegation","","",7,null],[12,"capability_invocation","","",7,null],[12,"service","","",7,null],[12,"properties","","",7,null],[11,"new","identity_did::document","Creates a new `DocumentBuilder`.",7,[[]]],[11,"id","","Sets the `id` value of the generated `Document`.",7,[[["did",3]]]],[11,"controller","","Sets the `controller` value of the generated `Document`.",7,[[["did",3]]]],[11,"also_known_as","","Adds a value to the `alsoKnownAs` set of the generated…",7,[[["url",3]]]],[11,"verification_method","","Adds a value to the `verificationMethod` set of the…",7,[[["method",3]]]],[11,"authentication","","Adds a value to the `authentication` set of the generated…",7,[[]]],[11,"assertion_method","","Adds a value to the `assertionMethod` set of the generated…",7,[[]]],[11,"key_agreement","","Adds a value to the `keyAgreement` set of the generated…",7,[[]]],[11,"capability_delegation","","Adds a value to the `capabilityDelegation` set of the…",7,[[]]],[11,"capability_invocation","","Adds a value to the `capabilityInvocation` set of the…",7,[[]]],[11,"service","","Adds a value to the `service` set of the generated…",7,[[["service",3]]]],[11,"build","","Returns a new `Document` based on the `DocumentBuilder`…",7,[[],[["result",6],["document",3]]]],[0,"document","","",null,null],[3,"Document","identity_did::document::document","A DID Document",null,null],[12,"id","","",8,null],[12,"controller","","",8,null],[12,"also_known_as","","",8,null],[12,"verification_method","","",8,null],[12,"authentication","","",8,null],[12,"assertion_method","","",8,null],[12,"key_agreement","","",8,null],[12,"capability_delegation","","",8,null],[12,"capability_invocation","","",8,null],[12,"service","","",8,null],[12,"properties","","",8,null],[11,"builder","identity_did::document","Creates a `DocumentBuilder` to configure a new `Document`.",8,[[],["documentbuilder",3]]],[11,"from_builder","","Returns a new `Document` based on the `DocumentBuilder`…",8,[[["documentbuilder",3]],["result",6]]],[11,"id","","Returns a reference to the `Document` id.",8,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the `Document` id.",8,[[],["did",3]]],[11,"controller","","Returns a reference to the `Document` controller.",8,[[],[["did",3],["option",4]]]],[11,"controller_mut","","Returns a mutable reference to the `Document` controller.",8,[[],[["did",3],["option",4]]]],[11,"also_known_as","","Returns a reference to the `Document` alsoKnownAs set.",8,[[]]],[11,"also_known_as_mut","","Returns a mutable reference to the `Document` alsoKnownAs…",8,[[],["vec",3]]],[11,"verification_method","","Returns a reference to the `Document` verificationMethod…",8,[[],["orderedset",3]]],[11,"verification_method_mut","","Returns a mutable reference to the `Document`…",8,[[],["orderedset",3]]],[11,"authentication","","Returns a reference to the `Document` authentication set.",8,[[],["orderedset",3]]],[11,"authentication_mut","","Returns a mutable reference to the `Document`…",8,[[],["orderedset",3]]],[11,"assertion_method","","Returns a reference to the `Document` assertionMethod set.",8,[[],["orderedset",3]]],[11,"assertion_method_mut","","Returns a mutable reference to the `Document`…",8,[[],["orderedset",3]]],[11,"key_agreement","","Returns a reference to the `Document` keyAgreement set.",8,[[],["orderedset",3]]],[11,"key_agreement_mut","","Returns a mutable reference to the `Document` keyAgreement…",8,[[],["orderedset",3]]],[11,"capability_delegation","","Returns a reference to the `Document` capabilityDelegation…",8,[[],["orderedset",3]]],[11,"capability_delegation_mut","","Returns a mutable reference to the `Document`…",8,[[],["orderedset",3]]],[11,"capability_invocation","","Returns a reference to the `Document` capabilityInvocation…",8,[[],["orderedset",3]]],[11,"capability_invocation_mut","","Returns a mutable reference to the `Document`…",8,[[],["orderedset",3]]],[11,"service","","Returns a reference to the `Document` service set.",8,[[],["orderedset",3]]],[11,"service_mut","","Returns a mutable reference to the `Document` service set.",8,[[],["orderedset",3]]],[11,"properties","","Returns a reference to the custom `Document` properties.",8,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom `Document`…",8,[[]]],[11,"map","","Maps `Document<T>` to `Document<U>` by applying a function…",8,[[],["document",3]]],[11,"try_map","","A fallible version of `Document::map(..)`.",8,[[],[["document",3],["result",6]]]],[11,"insert_method","","Adds a new [`Method<U>`][`Method`] to the Document.",8,[[["methodscope",4],["method",3]]]],[11,"remove_method","","Removes all references to the specified…",8,[[["did",3]]]],[11,"methods","","Returns an iterator over all verification methods in the…",8,[[]]],[11,"resolve","","Returns the first verification [`method`][`Method`] with…",8,[[],[["method",3],["option",4]]]],[11,"try_resolve","","Returns the first verification [`method`][`Method`] with…",8,[[],[["result",6],["method",3]]]],[11,"resolve_mut","","Returns a mutable reference to the first verification…",8,[[],[["option",4],["method",3]]]],[11,"try_resolve_mut","","Returns a mutable reference to the first verification…",8,[[],[["result",6],["method",3]]]],[11,"resolve_method","","",8,[[["methodquery",3]],[["method",3],["option",4]]]],[11,"resolve_method_mut","","",8,[[["methodquery",3]],[["option",4],["method",3]]]],[0,"error","identity_did","Errors that may occur when working with Decentralized…",null,null],[4,"Error","identity_did::error","This type represents all possible errors that can occur in…",null,null],[13,"CoreError","","Caused by errors from the `identity_core` crate.",9,null],[13,"DIDError","","Caused by errors from the `did_url` crate.",9,null],[13,"OrderedSetDuplicate","","",9,null],[13,"QueryMethodNotFound","","",9,null],[13,"BuilderInvalidDocumentId","","",9,null],[13,"BuilderInvalidServiceId","","",9,null],[13,"BuilderInvalidServiceType","","",9,null],[13,"BuilderInvalidServiceEndpoint","","",9,null],[13,"BuilderInvalidMethodId","","",9,null],[13,"BuilderInvalidMethodController","","",9,null],[13,"BuilderInvalidMethodType","","",9,null],[13,"BuilderInvalidMethodData","","",9,null],[13,"InvalidMethodFragment","","",9,null],[13,"InvalidMethodType","","",9,null],[13,"InvalidMethodDuplicate","","",9,null],[13,"UnknownMethodScope","","",9,null],[13,"UnknownMethodType","","",9,null],[13,"UnknownSignatureType","","",9,null],[13,"InvalidKeyData","","",9,null],[13,"InvalidKeyDataBase16","","",9,null],[13,"InvalidKeyDataBase58","","",9,null],[13,"MissingResolutionDID","","",9,null],[13,"MissingResolutionMetadata","","",9,null],[13,"MissingResolutionDocument","","",9,null],[13,"MissingResolutionData","","",9,null],[13,"InvalidDIDQuery","","",9,null],[13,"InvalidDIDFragment","","",9,null],[13,"InvalidServiceProtocol","","",9,null],[6,"Result","","Alias for a `Result` with the error type [`Error`].",null,null],[0,"resolution","identity_did","Types and traits for DID Document resolution.",null,null],[3,"Dereference","identity_did::resolution","The output returned from DID URL dereferencing.",null,null],[12,"metadata","","Metadata regarding the base resolution process.",10,null],[12,"content","","The output resource of a successful dereference.",10,null],[12,"content_metadata","","Content-specific metadata.",10,null],[3,"DocumentMetadata","","Metadata associated with a resolved DID Document.",null,null],[12,"created","","The timestamp of the Create operation.",11,null],[12,"updated","","The timestamp of the last Update operation.",11,null],[12,"properties","","Additional document metadata properties.",11,null],[3,"InputMetadata","","Input options used to configure a DID resolution process.",null,null],[12,"accept","","The MIME type of the preferred representation of the DID…",12,null],[12,"properties","","Additional input metadata properties.",12,null],[3,"Resolution","","The output returned from DID resolution.",null,null],[12,"metadata","","Resolution-specific metadata.",13,null],[12,"document","","The DID Document of a successful resolution.",13,null],[12,"document_metadata","","Document-specific metadata.",13,null],[3,"ResolutionMetadata","","Metadata associated with a DID resolution process.",null,null],[12,"error","","The error code from the resolution process, if an error…",14,null],[12,"content_type","","The MIME type of the returned document stream.",14,null],[12,"duration","","The elapsed time of the resolution operation.",14,null],[12,"resolved","","The parsed DID that was used for resolution.",14,null],[12,"properties","","Additional resolution metadata properties.",14,null],[3,"MetaDocument","","A resolved [`Document`] and associated [`DocumentMetadata`].",null,null],[12,"data","","A resolved DID Document.",15,null],[12,"meta","","Information regarding the associated Documents resolution…",15,null],[4,"ErrorKind","","Types of errors that be returned from a DID resolution…",null,null],[13,"InvalidDID","","The DID supplied to the DID resolution function does not…",16,null],[13,"NotSupported","","The DID resolver does not support the specified method.",16,null],[13,"NotFound","","The DID resolver was unable to return the DID document…",16,null],[4,"PrimaryResource","","A primary resource returned from a DID URL dereferencing…",null,null],[13,"Document","","A dereferenced DID Document.",17,null],[13,"Service","","A dereferenced DID Document service endpoint.",17,null],[4,"Resource","","A resource returned from a DID URL dereferencing process.",null,null],[13,"Primary","","A dereferenced primary resource.",18,null],[13,"Secondary","","A dereferenced secondary resource.",18,null],[4,"SecondaryResource","","A secondary resource returned from a DID URL dereferencing…",null,null],[13,"VerificationDID","","A DID Document Method Id.",19,null],[13,"VerificationKey","","A DID Document Verification Method.",19,null],[13,"Service","","A DID Document Service.",19,null],[5,"dereference","","Dereferences a DID URL into a primary or secondary resource.",null,[[["inputmetadata",3]]]],[5,"resolve","","Resolves a DID into a DID Document by using the \\\"Read\\\"…",null,[[["inputmetadata",3]]]],[0,"dereference","","",null,null],[3,"Dereference","identity_did::resolution::dereference","The output returned from DID URL dereferencing.",null,null],[12,"metadata","","Metadata regarding the base resolution process.",10,null],[12,"content","","The output resource of a successful dereference.",10,null],[12,"content_metadata","","Content-specific metadata.",10,null],[11,"new","identity_did::resolution","Creates a new [`Dereference`].",10,[[]]],[0,"document_metadata","","",null,null],[3,"DocumentMetadata","identity_did::resolution::document_metadata","Metadata associated with a resolved DID Document.",null,null],[12,"created","","The timestamp of the Create operation.",11,null],[12,"updated","","The timestamp of the last Update operation.",11,null],[12,"properties","","Additional document metadata properties.",11,null],[11,"new","identity_did::resolution","Creates a new [`DocumentMetadata`].",11,[[]]],[0,"error_kind","","",null,null],[4,"ErrorKind","identity_did::resolution::error_kind","Types of errors that be returned from a DID resolution…",null,null],[13,"InvalidDID","","The DID supplied to the DID resolution function does not…",16,null],[13,"NotSupported","","The DID resolver does not support the specified method.",16,null],[13,"NotFound","","The DID resolver was unable to return the DID document…",16,null],[0,"impls","identity_did::resolution","",null,null],[3,"ResolveContext","identity_did::resolution::impls","",null,null],[12,"0","","",20,null],[12,"1","","",20,null],[3,"DerefContext","","",null,null],[12,"0","","",21,null],[12,"1","","",21,null],[5,"resolve","","Resolves a DID into a DID Document by using the \\\"Read\\\"…",null,[[["inputmetadata",3]]]],[5,"dereference","","Dereferences a DID URL into a primary or secondary resource.",null,[[["inputmetadata",3]]]],[5,"dereference_primary","","",null,[[["document",3],["did",3]],[["result",6],["option",4]]]],[5,"dereference_document","","",null,[[["document",3]],[["option",4],["result",6]]]],[5,"service_endpoint_ctor","","",null,[[["url",3],["did",3]],[["result",6],["url",3]]]],[11,"new","","",20,[[]]],[11,"set_document","","",20,[[["document",3]]]],[11,"set_metadata","","",20,[[["documentmetadata",3]]]],[11,"set_resolved","","",20,[[["did",3]]]],[11,"set_error","","",20,[[["errorkind",4]]]],[11,"finish_error","","",20,[[["errorkind",4]],["resolution",3]]],[11,"finish","","",20,[[],["resolution",3]]],[11,"new","","",21,[[]]],[11,"set_content","","",21,[[]]],[11,"set_metadata","","",21,[[["documentmetadata",3]]]],[11,"set_error","","",21,[[["errorkind",4]]]],[11,"finish_error","","",21,[[["errorkind",4]],["dereference",3]]],[11,"finish","","",21,[[],["dereference",3]]],[0,"input_metadata","identity_did::resolution","",null,null],[3,"InputMetadata","identity_did::resolution::input_metadata","Input options used to configure a DID resolution process.",null,null],[12,"accept","","The MIME type of the preferred representation of the DID…",12,null],[12,"properties","","Additional input metadata properties.",12,null],[17,"MIME_DID","","The content type of a JSON DID Document.",null,null],[17,"MIME_DID_LD","","The content type of a JSON-LD DID Document.",null,null],[11,"new","identity_did::resolution","Creates a new [`InputMetadata`].",12,[[]]],[0,"resolution","","",null,null],[3,"Resolution","identity_did::resolution::resolution","The output returned from DID resolution.",null,null],[12,"metadata","","Resolution-specific metadata.",13,null],[12,"document","","The DID Document of a successful resolution.",13,null],[12,"document_metadata","","Document-specific metadata.",13,null],[11,"new","identity_did::resolution","Creates a new [`Resolution`].",13,[[]]],[0,"resolution_metadata","","",null,null],[3,"ResolutionMetadata","identity_did::resolution::resolution_metadata","Metadata associated with a DID resolution process.",null,null],[12,"error","","The error code from the resolution process, if an error…",14,null],[12,"content_type","","The MIME type of the returned document stream.",14,null],[12,"duration","","The elapsed time of the resolution operation.",14,null],[12,"resolved","","The parsed DID that was used for resolution.",14,null],[12,"properties","","Additional resolution metadata properties.",14,null],[11,"new","identity_did::resolution","Creates a new [`ResolutionMetadata`].",14,[[]]],[0,"resource","","",null,null],[4,"Resource","identity_did::resolution::resource","A resource returned from a DID URL dereferencing process.",null,null],[13,"Primary","","A dereferenced primary resource.",18,null],[13,"Secondary","","A dereferenced secondary resource.",18,null],[4,"PrimaryResource","","A primary resource returned from a DID URL dereferencing…",null,null],[13,"Document","","A dereferenced DID Document.",17,null],[13,"Service","","A dereferenced DID Document service endpoint.",17,null],[4,"SecondaryResource","","A secondary resource returned from a DID URL dereferencing…",null,null],[13,"VerificationDID","","A DID Document Method Id.",19,null],[13,"VerificationKey","","A DID Document Verification Method.",19,null],[13,"Service","","A DID Document Service.",19,null],[0,"traits","identity_did::resolution","",null,null],[3,"MetaDocument","identity_did::resolution::traits","A resolved [`Document`] and associated [`DocumentMetadata`].",null,null],[12,"data","","A resolved DID Document.",15,null],[12,"meta","","Information regarding the associated Documents resolution…",15,null],[8,"ResolverMethod","","A trait for generic DID Resolvers.",null,null],[10,"is_supported","","Returns `true` if the given `did` is supported by this DID…",22,[[["did",3]]]],[10,"read","","Performs the \\\"Read\\\" operation of the DID method.",22,[[["inputmetadata",3],["did",3]],[["box",3],["pin",3]]]],[17,"MIME_DID","identity_did::resolution","The content type of a JSON DID Document.",null,null],[17,"MIME_DID_LD","","The content type of a JSON-LD DID Document.",null,null],[8,"ResolverMethod","","A trait for generic DID Resolvers.",null,null],[10,"is_supported","","Returns `true` if the given `did` is supported by this DID…",22,[[["did",3]]]],[10,"read","","Performs the \\\"Read\\\" operation of the DID method.",22,[[["inputmetadata",3],["did",3]],[["box",3],["pin",3]]]],[0,"service","identity_did","",null,null],[3,"ServiceBuilder","identity_did::service","A `ServiceBuilder` is used to generate a customized…",null,null],[12,"id","","",23,null],[12,"type_","","",23,null],[12,"service_endpoint","","",23,null],[12,"properties","","",23,null],[3,"Service","","A DID Document Service",null,null],[12,"id","","",24,null],[12,"type_","","",24,null],[12,"service_endpoint","","",24,null],[12,"properties","","",24,null],[0,"builder","","",null,null],[3,"ServiceBuilder","identity_did::service::builder","A `ServiceBuilder` is used to generate a customized…",null,null],[12,"id","","",23,null],[12,"type_","","",23,null],[12,"service_endpoint","","",23,null],[12,"properties","","",23,null],[11,"new","identity_did::service","Creates a new `ServiceBuilder`.",23,[[]]],[11,"id","","Sets the `id` value of the generated `Service`.",23,[[["did",3]]]],[11,"type_","","Sets the `type` value of the generated `Service`.",23,[[]]],[11,"service_endpoint","","Sets the `serviceEndpoint` value of the generated `Service`.",23,[[["url",3]]]],[11,"build","","Returns a new `Service` based on the `ServiceBuilder`…",23,[[],[["result",6],["service",3]]]],[0,"service","","",null,null],[3,"Service","identity_did::service::service","A DID Document Service",null,null],[12,"id","","",24,null],[12,"type_","","",24,null],[12,"service_endpoint","","",24,null],[12,"properties","","",24,null],[11,"builder","identity_did::service","Creates a `ServiceBuilder` to configure a new `Service`.",24,[[],["servicebuilder",3]]],[11,"from_builder","","Returns a new `Service` based on the `ServiceBuilder`…",24,[[["servicebuilder",3]],["result",6]]],[11,"id","","Returns a reference to the `Service` id.",24,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the `Service` id.",24,[[],["did",3]]],[11,"type_","","Returns a reference to the `Service` type.",24,[[]]],[11,"type_mut","","Returns a mutable reference to the `Service` type.",24,[[],["string",3]]],[11,"service_endpoint","","Returns a reference to the `Service` endpoint.",24,[[],["url",3]]],[11,"service_endpoint_mut","","Returns a mutable reference to the `Service` endpoint.",24,[[],["url",3]]],[11,"properties","","Returns a reference to the custom `Service` properties.",24,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom `Service`…",24,[[]]],[0,"utils","identity_did","",null,null],[3,"DIDKey","identity_did::utils","A helper struct for comparing types only by `DID`.",null,null],[12,"0","","",25,null],[3,"OrderedSet","","An ordered set based on a `Vec<T>`.",null,null],[12,"0","","",26,null],[0,"did_key","","",null,null],[3,"DIDKey","identity_did::utils::did_key","A helper struct for comparing types only by `DID`.",null,null],[12,"0","","",25,null],[11,"new","identity_did::utils","Create a new `DIDKey`.",25,[[]]],[11,"into_inner","","Consumes the `DIDKey` and returns the inner `T`.",25,[[]]],[11,"as_did","","Returns a reference to the `DID`.",25,[[],["did",3]]],[0,"ordered_set","","",null,null],[3,"OrderedSet","identity_did::utils::ordered_set","An ordered set based on a `Vec<T>`.",null,null],[12,"0","","",26,null],[11,"new","identity_did::utils","Creates a new `OrderedSet`.",26,[[]]],[11,"with_capacity","","Creates a new `OrderedSet` with the specified capacity.",26,[[]]],[11,"len","","Returns the number of elements in the `OrderedSet`.",26,[[]]],[11,"is_empty","","Returns `true` if the `OrderedSet` contains no elements.",26,[[]]],[11,"iter","","Returns an iterator over the slice of elements.",26,[[],["iter",3]]],[11,"head","","Returns the first element in the set, or `None` if the set…",26,[[],["option",4]]],[11,"head_mut","","Returns a mutable referece to the first element in the…",26,[[],["option",4]]],[11,"tail","","Returns the last element in the set, or `None` if the set…",26,[[],["option",4]]],[11,"tail_mut","","Returns a mutable referece the last element in the set, or…",26,[[],["option",4]]],[11,"as_slice","","Returns a slice containing all elements in the `OrderedSet`.",26,[[]]],[11,"into_vec","","Consumes the `OrderedSet` and returns the elements as a…",26,[[],["vec",3]]],[11,"clear","","Clears the `OrderedSet`, removing all values.",26,[[]]],[11,"contains","","Returns `true` if the `OrderedSet` contains the given value.",26,[[]]],[11,"append","","Adds a new value to the end of the `OrderedSet`; returns…",26,[[]]],[11,"prepend","","Adds a new value to the start of the `OrderedSet`; returns…",26,[[]]],[11,"replace","","Replaces a `current` value with the given `update` value;…",26,[[]]],[11,"update","","Updates an existing value in the `OrderedSet`; returns…",26,[[]]],[11,"remove","","Removes all matching items from the set.",26,[[]]],[11,"change","","",26,[[]]],[11,"query","","",26,[[],["option",4]]],[11,"query_mut","","",26,[[],["option",4]]],[0,"verifiable","identity_did","",null,null],[3,"DocumentSigner","identity_did::verifiable","",null,null],[12,"document","","",27,null],[12,"secret","","",27,null],[12,"method","","",27,null],[12,"merkle_key","","",27,null],[3,"DocumentVerifier","","",null,null],[12,"document","","",28,null],[3,"Properties","","A generic container for a set of properties (`T`) and a…",null,null],[12,"properties","","",29,null],[12,"proof","","",29,null],[0,"document","","",null,null],[3,"DocumentSigner","identity_did::verifiable::document","",null,null],[12,"document","","",27,null],[12,"secret","","",27,null],[12,"method","","",27,null],[12,"merkle_key","","",27,null],[3,"DocumentVerifier","","",null,null],[12,"document","","",28,null],[11,"into_verifiable","identity_did::document","",8,[[],[["document",3],["properties",3]]]],[11,"into_verifiable2","","",8,[[["signature",3]],[["document",3],["properties",3]]]],[11,"proof","","",8,[[],[["signature",3],["option",4]]]],[11,"proof_mut","","",8,[[],[["signature",3],["option",4]]]],[11,"set_proof","","",8,[[["signature",3]]]],[11,"sign_this","","",8,[[],["result",6]]],[11,"verify_this","","",8,[[],["result",6]]],[11,"signer","","Creates a new [`DocumentSigner`] that can be used to…",8,[[["secretkey",3]],["documentsigner",3]]],[11,"verifier","","Creates a new [`DocumentVerifier`] that can be used to…",8,[[],["documentverifier",3]]],[11,"new","identity_did::verifiable","",27,[[["document",3],["secretkey",3]]]],[11,"method","","",27,[[]]],[11,"merkle_key","","",27,[[]]],[11,"sign","","Signs the provided data with the configured verification…",27,[[],["result",6]]],[11,"new","","",28,[[["document",3]]]],[11,"verify","","Verifies the signature of the provided data.",28,[[],["result",6]]],[0,"properties","","",null,null],[3,"Properties","identity_did::verifiable::properties","A generic container for a set of properties (`T`) and a…",null,null],[12,"properties","","",29,null],[12,"proof","","",29,null],[11,"new","identity_did::verifiable","Creates a new [`Properties`] object.",29,[[]]],[11,"with_proof","","Creates a new [`Properties`] object with the given `proof`.",29,[[["signature",3]]]],[11,"proof","","Returns a reference to the [`proof`][`Signature`] object.",29,[[],[["signature",3],["option",4]]]],[11,"proof_mut","","Returns a mutable reference to the [`proof`][`Signature`]…",29,[[],[["signature",3],["option",4]]]],[11,"set_proof","","Sets the value of the [`proof`][`Signature`] object.",29,[[["signature",3]]]],[0,"traits","","",null,null],[8,"Revocation","identity_did::verifiable::traits","",null,null],[11,"revocation","","Returns a [`set`][`BitSet`] of Merkle Key Collection…",30,[[],[["result",6],["option",4]]]],[8,"Revocation","identity_did::verifiable","",null,null],[11,"revocation","identity_did::verifiable::traits","Returns a [`set`][`BitSet`] of Merkle Key Collection…",30,[[],[["result",6],["option",4]]]],[0,"verification","identity_did","",null,null],[3,"MethodBuilder","identity_did::verification","A `MethodBuilder` is used to generate a customized `Method`.",null,null],[12,"id","","",31,null],[12,"controller","","",31,null],[12,"key_type","","",31,null],[12,"key_data","","",31,null],[12,"properties","","",31,null],[3,"Method","","A DID Document Verification Method",null,null],[12,"id","","",32,null],[12,"controller","","",32,null],[12,"key_type","","",32,null],[12,"key_data","","",32,null],[12,"properties","","",32,null],[3,"MethodQuery","","Specifies the conditions of a DID document method…",null,null],[12,"0","","",33,null],[4,"MethodData","","Supported verification method data formats.",null,null],[13,"PublicKeyBase58","","",34,null],[13,"PublicKeyHex","","",34,null],[13,"PublicKeyJwk","","",34,null],[4,"MethodRef","","A reference to a verification method, either a `DID` or…",null,null],[13,"Embed","","",35,null],[13,"Refer","","",35,null],[4,"MethodScope","","Verification method group used to refine the scope of a…",null,null],[13,"VerificationMethod","","",36,null],[13,"Authentication","","",36,null],[13,"AssertionMethod","","",36,null],[13,"KeyAgreement","","",36,null],[13,"CapabilityDelegation","","",36,null],[13,"CapabilityInvocation","","",36,null],[4,"MethodType","","Supported verification method types.",null,null],[13,"Ed25519VerificationKey2018","","",37,null],[13,"MerkleKeyCollection2021","","",37,null],[0,"builder","","",null,null],[3,"MethodBuilder","identity_did::verification::builder","A `MethodBuilder` is used to generate a customized `Method`.",null,null],[12,"id","","",31,null],[12,"controller","","",31,null],[12,"key_type","","",31,null],[12,"key_data","","",31,null],[12,"properties","","",31,null],[11,"new","identity_did::verification","Creates a new `MethodBuilder`.",31,[[]]],[11,"id","","Sets the `id` value of the generated verification `Method`.",31,[[["did",3]]]],[11,"controller","","Sets the `controller` value of the generated verification…",31,[[["did",3]]]],[11,"key_type","","Sets the `type` value of the generated verification…",31,[[["methodtype",4]]]],[11,"key_data","","Sets the `data` value of the generated verification…",31,[[["methoddata",4]]]],[11,"build","","Returns a new `Method` based on the `MethodBuilder`…",31,[[],[["result",6],["method",3]]]],[0,"method","","",null,null],[3,"Method","identity_did::verification::method","A DID Document Verification Method",null,null],[12,"id","","",32,null],[12,"controller","","",32,null],[12,"key_type","","",32,null],[12,"key_data","","",32,null],[12,"properties","","",32,null],[11,"builder","identity_did::verification","Creates a `MethodBuilder` to configure a new `Method`.",32,[[],["methodbuilder",3]]],[11,"from_builder","","Returns a new `Method` based on the `MethodBuilder`…",32,[[["methodbuilder",3]],["result",6]]],[11,"id","","Returns a reference to the verification `Method` id.",32,[[],["did",3]]],[11,"id_mut","","Returns a mutable reference to the verification `Method` id.",32,[[],["did",3]]],[11,"controller","","Returns a reference to the verification `Method` controller.",32,[[],["did",3]]],[11,"controller_mut","","Returns a mutable reference to the verification `Method`…",32,[[],["did",3]]],[11,"key_type","","Returns a reference to the verification `Method` type.",32,[[],["methodtype",4]]],[11,"key_type_mut","","Returns a mutable reference to the verification `Method`…",32,[[],["methodtype",4]]],[11,"key_data","","Returns a reference to the verification `Method` data.",32,[[],["methoddata",4]]],[11,"key_data_mut","","Returns a mutable reference to the verification `Method`…",32,[[],["methoddata",4]]],[11,"properties","","Returns a reference to the custom verification `Method`…",32,[[]]],[11,"properties_mut","","Returns a mutable reference to the custom verification…",32,[[]]],[11,"try_into_fragment","","",32,[[],[["result",6],["string",3]]]],[11,"into_ref","","Creates a new [`MethodRef`] from `self`.",32,[[],["methodref",4]]],[0,"method_data","","",null,null],[4,"MethodData","identity_did::verification::method_data","Supported verification method data formats.",null,null],[13,"PublicKeyBase58","","",34,null],[13,"PublicKeyHex","","",34,null],[13,"PublicKeyJwk","","",34,null],[11,"new_b16","identity_did::verification","Creates a new `MethodData` variant with base16-encoded…",34,[[]]],[11,"new_b58","","Creates a new `MethodData` variant with base58-encoded…",34,[[]]],[11,"try_decode","","Returns a `Vec<u8>` containing the decoded bytes of the…",34,[[],[["result",6],["vec",3]]]],[0,"method_query","","",null,null],[3,"MethodQuery","identity_did::verification::method_query","Specifies the conditions of a DID document method…",null,null],[12,"0","","",33,null],[11,"matches","identity_did::verification","",33,[[["did",3]]]],[11,"fragment","","",33,[[],["option",4]]],[0,"method_ref","","",null,null],[4,"MethodRef","identity_did::verification::method_ref","A reference to a verification method, either a `DID` or…",null,null],[13,"Embed","","",35,null],[13,"Refer","","",35,null],[11,"id","identity_did::verification","Returns a reference to the `MethodRef` id.",35,[[],["did",3]]],[11,"controller","","Returns a reference to the `MethodRef` controller.",35,[[],[["did",3],["option",4]]]],[11,"is_embedded","","Returns a `bool` indicating if the `MethodRef` is an…",35,[[]]],[11,"is_referred","","Returns a `bool` indicating if the `MethodRef` is a `DID`…",35,[[]]],[11,"try_into_embedded","","Returns the inner `Method` if this is an embedded…",35,[[],[["result",4],["method",3]]]],[11,"try_into_referenced","","Returns the inner `Method` if this is an referenced…",35,[[],[["did",3],["result",4]]]],[0,"method_scope","","",null,null],[4,"MethodScope","identity_did::verification::method_scope","Verification method group used to refine the scope of a…",null,null],[13,"VerificationMethod","","",36,null],[13,"Authentication","","",36,null],[13,"AssertionMethod","","",36,null],[13,"KeyAgreement","","",36,null],[13,"CapabilityDelegation","","",36,null],[13,"CapabilityInvocation","","",36,null],[11,"as_str","identity_did::verification","",36,[[]]],[0,"method_type","","",null,null],[4,"MethodType","identity_did::verification::method_type","Supported verification method types.",null,null],[13,"Ed25519VerificationKey2018","","",37,null],[13,"MerkleKeyCollection2021","","",37,null],[11,"as_str","identity_did::verification","",37,[[]]],[11,"from","identity_did::did","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","identity_did::diff","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",6,[[]]],[11,"from","identity_did::document","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",8,[[]]],[11,"from","identity_did::error","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","identity_did::resolution","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"erased_serialize","","",10,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",16,[[]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"erased_serialize","","",17,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",19,[[]]],[11,"from","identity_did::resolution::impls","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","identity_did::service","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",24,[[]]],[11,"from","identity_did::utils","",25,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"hash","","",25,[[],["hash",3]]],[11,"equivalent","","",25,[[]]],[11,"encode_hex","","",25,[[]]],[11,"encode_hex_upper","","",25,[[]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"from","identity_did::verifiable","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"erased_serialize","","",29,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",29,[[]]],[11,"vzip","","",29,[[]]],[11,"from","identity_did::verification","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"equivalent","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"erased_serialize","","",34,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"erased_serialize","","",35,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"equivalent","","",36,[[]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"erased_serialize","","",37,[[["serializer",8]],[["result",4],["ok",3],["error",3]]]],[11,"equivalent","","",37,[[]]],[11,"vzip","","",37,[[]]],[11,"eq","identity_did::did","",1,[[["error",4]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["did",3]]]],[11,"from_str","","",0,[[],[["result",4],["did",3]]]],[11,"cmp","","",0,[[["did",3]],["ordering",4]]],[11,"cmp","","",1,[[["error",4]],["ordering",4]]],[11,"as_ref","","",0,[[]]],[11,"partial_cmp","","",0,[[["did",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",1,[[["error",4]],[["ordering",4],["option",4]]]],[11,"deserialize","","",0,[[],[["result",4],["did",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",1,[[],["error",4]]],[11,"clone","","",0,[[],["did",3]]],[11,"try_from","","",0,[[["string",3]],[["result",4],["did",3]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"diff","","",0,[[["did",3]],[["error",4],["result",4]]]],[11,"merge","","",0,[[],[["did",3],["error",4],["result",4]]]],[11,"from_diff","","",0,[[],[["did",3],["error",4],["result",4]]]],[11,"into_diff","","",0,[[],[["error",4],["result",4]]]],[11,"revocation","identity_did::verification","",32,[[],[["result",6],["option",4]]]],[11,"as_mut","identity_did::utils","",25,[[]]],[11,"as_ref","identity_did::service","",24,[[],["did",3]]],[11,"as_ref","identity_did::utils","",25,[[]]],[11,"as_ref","identity_did::verification","",32,[[],["did",3]]],[11,"as_ref","","",35,[[],["did",3]]],[11,"from","identity_did::error","",9,[[["error",4]]]],[11,"from","","",9,[[["error",4]]]],[11,"from","identity_did::resolution","",18,[[["primaryresource",4]]]],[11,"from","","",18,[[["secondaryresource",4]]]],[11,"from","","",17,[[["document",3]]]],[11,"from","","",17,[[["url",3]]]],[11,"from","","",19,[[["did",3]]]],[11,"from","","",19,[[["method",3]]]],[11,"from","","",19,[[["methodref",4]]]],[11,"from","","",19,[[["service",3]]]],[11,"from","","",19,[[["didkey",3]]]],[11,"from","identity_did::utils","",25,[[]]],[11,"from","identity_did::verification","",33,[[]]],[11,"from","","",33,[[["string",3]]]],[11,"from","","",33,[[["did",3]]]],[11,"from","","",33,[[["signature",3]]]],[11,"from","","",35,[[["method",3]]]],[11,"from","","",35,[[["did",3]]]],[11,"clone","identity_did::diff","",2,[[],["diffdocument",3]]],[11,"clone","","",3,[[],["diffmethod",3]]],[11,"clone","","",5,[[],["diffmethoddata",4]]],[11,"clone","","",6,[[],["diffmethodref",4]]],[11,"clone","","",4,[[],["diffservice",3]]],[11,"clone","identity_did::document","",7,[[],["documentbuilder",3]]],[11,"clone","","",8,[[],["document",3]]],[11,"clone","identity_did::resolution","",10,[[],["dereference",3]]],[11,"clone","","",11,[[],["documentmetadata",3]]],[11,"clone","","",16,[[],["errorkind",4]]],[11,"clone","","",12,[[],["inputmetadata",3]]],[11,"clone","","",13,[[],["resolution",3]]],[11,"clone","","",14,[[],["resolutionmetadata",3]]],[11,"clone","","",18,[[],["resource",4]]],[11,"clone","","",17,[[],["primaryresource",4]]],[11,"clone","","",19,[[],["secondaryresource",4]]],[11,"clone","","",15,[[],["metadocument",3]]],[11,"clone","identity_did::service","",23,[[],["servicebuilder",3]]],[11,"clone","","",24,[[],["service",3]]],[11,"clone","identity_did::utils","",25,[[],["didkey",3]]],[11,"clone","","",26,[[],["orderedset",3]]],[11,"clone","identity_did::verifiable","",29,[[],["properties",3]]],[11,"clone","identity_did::verification","",31,[[],["methodbuilder",3]]],[11,"clone","","",32,[[],["method",3]]],[11,"clone","","",34,[[],["methoddata",4]]],[11,"clone","","",33,[[],["methodquery",3]]],[11,"clone","","",35,[[],["methodref",4]]],[11,"clone","","",36,[[],["methodscope",4]]],[11,"clone","","",37,[[],["methodtype",4]]],[11,"default","identity_did::document","",7,[[]]],[11,"default","identity_did::resolution","",10,[[],["dereference",3]]],[11,"default","","",11,[[],["documentmetadata",3]]],[11,"default","","",12,[[],["inputmetadata",3]]],[11,"default","","",13,[[],["resolution",3]]],[11,"default","","",14,[[],["resolutionmetadata",3]]],[11,"default","identity_did::service","",23,[[],["servicebuilder",3]]],[11,"default","identity_did::utils","",26,[[]]],[11,"default","identity_did::verifiable","",29,[[],["properties",3]]],[11,"default","identity_did::verification","",31,[[],["methodbuilder",3]]],[11,"default","","",36,[[]]],[11,"cmp","identity_did::resolution","",16,[[["errorkind",4]],["ordering",4]]],[11,"cmp","identity_did::utils","",25,[[],["ordering",4]]],[11,"cmp","","",26,[[["orderedset",3]],["ordering",4]]],[11,"cmp","identity_did::verifiable","",29,[[["properties",3]],["ordering",4]]],[11,"cmp","identity_did::verification","",33,[[["methodquery",3]],["ordering",4]]],[11,"cmp","","",36,[[["methodscope",4]],["ordering",4]]],[11,"cmp","","",37,[[["methodtype",4]],["ordering",4]]],[11,"eq","identity_did::diff","",2,[[["diffdocument",3]]]],[11,"ne","","",2,[[["diffdocument",3]]]],[11,"eq","","",3,[[["diffmethod",3]]]],[11,"ne","","",3,[[["diffmethod",3]]]],[11,"eq","","",5,[[["diffmethoddata",4]]]],[11,"ne","","",5,[[["diffmethoddata",4]]]],[11,"eq","","",6,[[["diffmethodref",4]]]],[11,"ne","","",6,[[["diffmethodref",4]]]],[11,"eq","","",4,[[["diffservice",3]]]],[11,"ne","","",4,[[["diffservice",3]]]],[11,"eq","identity_did::document","",8,[[["document",3]]]],[11,"ne","","",8,[[["document",3]]]],[11,"eq","identity_did::resolution","",10,[[["dereference",3]]]],[11,"ne","","",10,[[["dereference",3]]]],[11,"eq","","",11,[[["documentmetadata",3]]]],[11,"ne","","",11,[[["documentmetadata",3]]]],[11,"eq","","",16,[[["errorkind",4]]]],[11,"eq","","",12,[[["inputmetadata",3]]]],[11,"ne","","",12,[[["inputmetadata",3]]]],[11,"eq","","",13,[[["resolution",3]]]],[11,"ne","","",13,[[["resolution",3]]]],[11,"eq","","",14,[[["resolutionmetadata",3]]]],[11,"ne","","",14,[[["resolutionmetadata",3]]]],[11,"eq","","",18,[[["resource",4]]]],[11,"ne","","",18,[[["resource",4]]]],[11,"eq","","",17,[[["primaryresource",4]]]],[11,"ne","","",17,[[["primaryresource",4]]]],[11,"eq","","",19,[[["secondaryresource",4]]]],[11,"ne","","",19,[[["secondaryresource",4]]]],[11,"eq","","",15,[[["metadocument",3]]]],[11,"ne","","",15,[[["metadocument",3]]]],[11,"eq","identity_did::service","",24,[[["service",3]]]],[11,"ne","","",24,[[["service",3]]]],[11,"eq","identity_did::utils","",25,[[]]],[11,"eq","","",26,[[["orderedset",3]]]],[11,"ne","","",26,[[["orderedset",3]]]],[11,"eq","identity_did::verifiable","",29,[[["properties",3]]]],[11,"ne","","",29,[[["properties",3]]]],[11,"eq","identity_did::verification","",32,[[["method",3]]]],[11,"ne","","",32,[[["method",3]]]],[11,"eq","","",34,[[["methoddata",4]]]],[11,"ne","","",34,[[["methoddata",4]]]],[11,"eq","","",33,[[["methodquery",3]]]],[11,"ne","","",33,[[["methodquery",3]]]],[11,"eq","","",35,[[["methodref",4]]]],[11,"ne","","",35,[[["methodref",4]]]],[11,"eq","","",36,[[["methodscope",4]]]],[11,"eq","","",37,[[["methodtype",4]]]],[11,"partial_cmp","identity_did::resolution","",16,[[["errorkind",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","identity_did::utils","",25,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",26,[[["orderedset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",26,[[["orderedset",3]]]],[11,"le","","",26,[[["orderedset",3]]]],[11,"gt","","",26,[[["orderedset",3]]]],[11,"ge","","",26,[[["orderedset",3]]]],[11,"partial_cmp","identity_did::verifiable","",29,[[["properties",3]],[["ordering",4],["option",4]]]],[11,"lt","","",29,[[["properties",3]]]],[11,"le","","",29,[[["properties",3]]]],[11,"gt","","",29,[[["properties",3]]]],[11,"ge","","",29,[[["properties",3]]]],[11,"partial_cmp","identity_did::verification","",33,[[["methodquery",3]],[["ordering",4],["option",4]]]],[11,"lt","","",33,[[["methodquery",3]]]],[11,"le","","",33,[[["methodquery",3]]]],[11,"gt","","",33,[[["methodquery",3]]]],[11,"ge","","",33,[[["methodquery",3]]]],[11,"partial_cmp","","",36,[[["methodscope",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",37,[[["methodtype",4]],[["ordering",4],["option",4]]]],[11,"deref","identity_did::utils","",25,[[]]],[11,"deref","","",26,[[]]],[11,"deref","identity_did::verifiable","",29,[[]]],[11,"deref_mut","identity_did::utils","",25,[[]]],[11,"deref_mut","identity_did::verifiable","",29,[[]]],[11,"fmt","identity_did::diff","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::document","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::error","",9,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::resolution","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::resolution::impls","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::resolution","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::service","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::utils","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_did::verifiable","",29,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::verification","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::document","",8,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_did::error","",9,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::service","",24,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_did::utils","",25,[[["formatter",3]],["result",6]]],[11,"fmt","identity_did::verification","",32,[[["formatter",3]],["fmtresult",6]]],[11,"hash","identity_did::resolution","",16,[[]]],[11,"hash","identity_did::utils","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","identity_did::verification","",33,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"borrow","identity_did::utils","",25,[[],["did",3]]],[11,"try_from","","",26,[[["vec",3]],["result",6]]],[11,"from_str","identity_did::verification","",36,[[],["result",6]]],[11,"from_str","","",37,[[],["result",6]]],[11,"from_iter","identity_did::utils","",26,[[]]],[11,"source","identity_did::error","",9,[[],[["option",4],["error",8]]]],[11,"serialize","identity_did::diff","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","identity_did::document","",8,[[],["result",4]]],[11,"serialize","identity_did::resolution","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","identity_did::service","",24,[[],["result",4]]],[11,"serialize","identity_did::utils","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","identity_did::verifiable","",29,[[],["result",4]]],[11,"serialize","identity_did::verification","",32,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"deserialize","identity_did::diff","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","identity_did::document","",8,[[],["result",4]]],[11,"deserialize","identity_did::resolution","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","identity_did::service","",24,[[],["result",4]]],[11,"deserialize","identity_did::utils","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","identity_did::verifiable","",29,[[],["result",4]]],[11,"deserialize","identity_did::verification","",32,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"diff","identity_did::utils","",25,[[],["result",6]]],[11,"merge","","",25,[[],["result",6]]],[11,"from_diff","","",25,[[],["result",6]]],[11,"into_diff","","",25,[[],["result",6]]],[11,"diff","identity_did::document","",8,[[],["result",6]]],[11,"merge","","",8,[[],["result",6]]],[11,"from_diff","","",8,[[],["result",6]]],[11,"into_diff","","",8,[[],["result",6]]],[11,"diff","identity_did::verification","",32,[[],["result",6]]],[11,"merge","","",32,[[],["result",6]]],[11,"from_diff","","",32,[[],["result",6]]],[11,"into_diff","","",32,[[],["result",6]]],[11,"diff","","",34,[[],["result",6]]],[11,"merge","","",34,[[],["result",6]]],[11,"from_diff","","",34,[[],["result",6]]],[11,"into_diff","","",34,[[],["result",6]]],[11,"diff","","",35,[[],["result",6]]],[11,"merge","","",35,[[],["result",6]]],[11,"from_diff","","",35,[[],["result",6]]],[11,"into_diff","","",35,[[],["result",6]]],[11,"diff","","",37,[[],["result",6]]],[11,"merge","","",37,[[],["result",6]]],[11,"from_diff","","",37,[[],["result",6]]],[11,"into_diff","","",37,[[],["result",6]]],[11,"diff","identity_did::utils","",26,[[],["result",6]]],[11,"merge","","",26,[[],["result",6]]],[11,"from_diff","","",26,[[],["result",6]]],[11,"into_diff","","",26,[[],["result",6]]],[11,"diff","identity_did::service","",24,[[],["result",6]]],[11,"merge","","",24,[[],["result",6]]],[11,"from_diff","","",24,[[],["result",6]]],[11,"into_diff","","",24,[[],["result",6]]],[11,"signature","identity_did::document","",8,[[],[["signature",3],["option",4]]]],[11,"signature","identity_did::verifiable","",29,[[],[["signature",3],["option",4]]]],[11,"signature_mut","identity_did::document","",8,[[],[["signature",3],["option",4]]]],[11,"signature_mut","identity_did::verifiable","",29,[[],[["signature",3],["option",4]]]],[11,"set_signature","identity_did::document","",8,[[["signature",3]]]],[11,"set_signature","identity_did::verifiable","",29,[[["signature",3]]]],[18,"SCHEME","identity_did::did","The URL scheme for Decentralized Identifiers.",0,null],[11,"parse","","Parses a [`DID`] from the provided `input`.",0,[[],[["result",4],["error",4],["did",3]]]],[11,"inspect","","Returns a wrapped `DID` with a more detailed `Debug`…",0,[[],["inspect",3]]],[11,"as_str","","Returns the serialized [`DID`].",0,[[]]],[11,"into_string","","Consumes the [`DID`] and returns the serialization.",0,[[],["string",3]]],[11,"scheme","","Returns the [`DID`] scheme. See [`DID::SCHEME`].",0,[[]]],[11,"authority","","Returns the [`DID`] authority.",0,[[]]],[11,"method","","Returns the [`DID`] method name.",0,[[]]],[11,"method_id","","Returns the [`DID`] method-specific ID.",0,[[]]],[11,"path","","Returns the [`DID`] path.",0,[[]]],[11,"query","","Returns the [`DID`] method query, if any.",0,[[],["option",4]]],[11,"fragment","","Returns the [`DID`] method fragment, if any.",0,[[],["option",4]]],[11,"query_pairs","","Parses the [`DID`] query and returns an iterator of (key,…",0,[[],["parse",3]]],[11,"set_method","","Change the method of the [`DID`].",0,[[]]],[11,"set_method_id","","Change the method-specific-id of the [`DID`].",0,[[]]],[11,"set_path","","Change the path of the [`DID`].",0,[[]]],[11,"set_query","","Change the query of the [`DID`].",0,[[["option",4]]]],[11,"set_fragment","","Change the fragment of the [`DID`].",0,[[["option",4]]]],[11,"join","","Creates a new [`DID`] by joining `self` with the relative…",0,[[],[["result",4],["error",4],["did",3]]]],[11,"as_str","","",1,[[]]]],"p":[[3,"DID"],[4,"Error"],[3,"DiffDocument"],[3,"DiffMethod"],[3,"DiffService"],[4,"DiffMethodData"],[4,"DiffMethodRef"],[3,"DocumentBuilder"],[3,"Document"],[4,"Error"],[3,"Dereference"],[3,"DocumentMetadata"],[3,"InputMetadata"],[3,"Resolution"],[3,"ResolutionMetadata"],[3,"MetaDocument"],[4,"ErrorKind"],[4,"PrimaryResource"],[4,"Resource"],[4,"SecondaryResource"],[3,"ResolveContext"],[3,"DerefContext"],[8,"ResolverMethod"],[3,"ServiceBuilder"],[3,"Service"],[3,"DIDKey"],[3,"OrderedSet"],[3,"DocumentSigner"],[3,"DocumentVerifier"],[3,"Properties"],[8,"Revocation"],[3,"MethodBuilder"],[3,"Method"],[3,"MethodQuery"],[4,"MethodData"],[4,"MethodRef"],[4,"MethodScope"],[4,"MethodType"]]},\
"identity_diff":{"doc":"This module implements a `Diff` trait type. The Diff trait…","i":[[3,"DiffHashMap","identity_diff","A `DiffHashMap` type which represents a Diffed `HashMap`.…",null,null],[12,"0","","",0,null],[3,"DiffHashSet","","",null,null],[12,"0","","",1,null],[3,"DiffString","","The Diff Type for a `String` type.",null,null],[12,"0","","",2,null],[3,"DiffVec","","The Diff Type for `Vec`.",null,null],[12,"0","","",3,null],[4,"Error","","",null,null],[13,"DiffError","","",4,null],[13,"MergeError","","",4,null],[13,"ConversionError","","",4,null],[4,"DiffOption","","A `DiffOption<T>` type which represents a Diffed…",null,null],[13,"Some","","",5,null],[13,"None","","",5,null],[0,"error","","",null,null],[4,"Error","identity_diff::error","",null,null],[13,"DiffError","","",4,null],[13,"MergeError","","",4,null],[13,"ConversionError","","",4,null],[6,"Result","","",null,null],[11,"diff","identity_diff","",4,[[]]],[11,"merge","","",4,[[]]],[11,"convert","","",4,[[]]],[0,"hashmap","","",null,null],[3,"DiffHashMap","identity_diff::hashmap","A `DiffHashMap` type which represents a Diffed `HashMap`.…",null,null],[12,"0","","",0,null],[4,"InnerValue","","Inner value of the `DiffHashMap` type.",null,null],[13,"Change","","",6,null],[12,"key","identity_diff::hashmap::InnerValue","",7,null],[12,"value","","",7,null],[13,"Add","identity_diff::hashmap","",6,null],[12,"key","identity_diff::hashmap::InnerValue","",8,null],[12,"value","","",8,null],[13,"Remove","identity_diff::hashmap","",6,null],[12,"key","identity_diff::hashmap::InnerValue","",9,null],[0,"hashset","identity_diff","",null,null],[3,"DiffHashSet","identity_diff::hashset","",null,null],[12,"0","","",1,null],[4,"InnerValue","","",null,null],[13,"Add","","",10,null],[13,"Remove","","",10,null],[12,"remove","identity_diff::hashset::InnerValue","",11,null],[0,"macros","identity_diff","",null,null],[3,"Diffi8","identity_diff::macros","",null,null],[3,"Diffi16","","",null,null],[3,"Diffi32","","",null,null],[3,"Diffi64","","",null,null],[3,"Diffi128","","",null,null],[3,"DiffiSize","","",null,null],[3,"Diffu8","","",null,null],[3,"Diffu16","","",null,null],[3,"Diffu32","","",null,null],[3,"Diffu64","","",null,null],[3,"Diffu128","","",null,null],[3,"DiffuSize","","",null,null],[3,"DiffF32","","",null,null],[3,"DiffF64","","",null,null],[3,"Diffbool","","",null,null],[3,"Diffchar","","",null,null],[3,"Diffunit","","",null,null],[0,"object","identity_diff","",null,null],[6,"DiffObject","identity_diff::object","",null,null],[6,"ObjectSrc","","",null,null],[6,"ObjectDst","","",null,null],[0,"option","identity_diff","",null,null],[4,"DiffOption","identity_diff::option","A `DiffOption<T>` type which represents a Diffed…",null,null],[13,"Some","","",5,null],[13,"None","","",5,null],[0,"string","identity_diff","",null,null],[3,"DiffString","identity_diff::string","The Diff Type for a `String` type.",null,null],[12,"0","","",2,null],[0,"traits","identity_diff","",null,null],[8,"Diff","identity_diff::traits","The primary `Diff` Trait type.",null,null],[16,"Type","","The Corresponding Diff Type for the implemented Type.",12,null],[10,"diff","","Finds the difference between two types; `self` and `other`…",12,[[],["result",6]]],[10,"merge","","Merges a `Self::Type` with `Self`",12,[[],["result",6]]],[10,"from_diff","","Converts a `diff` of type `Self::Type` to a `Self`.",12,[[],["result",6]]],[10,"into_diff","","Converts a type of `Self` to a `diff` of `Self::Type`.",12,[[],["result",6]]],[0,"url","identity_diff","",null,null],[0,"value","","",null,null],[3,"DiffValue","identity_diff::value","The Diff Type for `serde_json::Value`.",null,null],[12,"0","","",13,null],[0,"vec","identity_diff","",null,null],[3,"DiffVec","identity_diff::vec","The Diff Type for `Vec`.",null,null],[12,"0","","",3,null],[4,"InnerVec","","The Inner value for the `DiffVec` type. Is `untagged` by…",null,null],[13,"Change","","logs a change in a `Vec` type.",14,null],[12,"index","identity_diff::vec::InnerVec","",15,null],[12,"item","","",15,null],[13,"Remove","identity_diff::vec","Logs a remove event in a `Vec` type.",14,null],[12,"count","identity_diff::vec::InnerVec","",16,null],[13,"Add","identity_diff::vec","logs an Add event in a `Vec` type.",14,null],[6,"Result","identity_diff","",null,null],[6,"DiffObject","","",null,null],[8,"Diff","","The primary `Diff` Trait type.",null,null],[16,"Type","","The Corresponding Diff Type for the implemented Type.",12,null],[10,"diff","","Finds the difference between two types; `self` and `other`…",12,[[],["result",6]]],[10,"merge","","Merges a `Self::Type` with `Self`",12,[[],["result",6]]],[10,"from_diff","","Converts a `diff` of type `Self::Type` to a `Self`.",12,[[],["result",6]]],[10,"into_diff","","Converts a type of `Self` to a `diff` of `Self::Type`.",12,[[],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","identity_diff::hashmap","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","identity_diff::hashset","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","identity_diff::macros","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"equivalent","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"equivalent","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"equivalent","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"equivalent","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"equivalent","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"equivalent","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"equivalent","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"equivalent","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"equivalent","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"equivalent","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"equivalent","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"equivalent","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"equivalent","","",33,[[]]],[11,"from","identity_diff::value","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"equivalent","","",13,[[]]],[11,"from","identity_diff::vec","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","identity_diff","",5,[[["option",4]]]],[11,"into","","",5,[[],["option",4]]],[11,"clone","identity_diff::hashmap","",6,[[],["innervalue",4]]],[11,"clone","identity_diff","",0,[[],["diffhashmap",3]]],[11,"clone","","",1,[[],["diffhashset",3]]],[11,"clone","identity_diff::hashset","",10,[[],["innervalue",4]]],[11,"clone","identity_diff::macros","",17,[[],["diffi8",3]]],[11,"clone","","",18,[[],["diffi16",3]]],[11,"clone","","",19,[[],["diffi32",3]]],[11,"clone","","",20,[[],["diffi64",3]]],[11,"clone","","",21,[[],["diffi128",3]]],[11,"clone","","",22,[[],["diffisize",3]]],[11,"clone","","",23,[[],["diffu8",3]]],[11,"clone","","",24,[[],["diffu16",3]]],[11,"clone","","",25,[[],["diffu32",3]]],[11,"clone","","",26,[[],["diffu64",3]]],[11,"clone","","",27,[[],["diffu128",3]]],[11,"clone","","",28,[[],["diffusize",3]]],[11,"clone","","",29,[[],["difff32",3]]],[11,"clone","","",30,[[],["difff64",3]]],[11,"clone","","",31,[[],["diffbool",3]]],[11,"clone","","",32,[[],["diffchar",3]]],[11,"clone","","",33,[[],["diffunit",3]]],[11,"clone","identity_diff","",5,[[],["diffoption",4]]],[11,"clone","","",2,[[],["diffstring",3]]],[11,"clone","identity_diff::value","",13,[[],["diffvalue",3]]],[11,"clone","identity_diff","",3,[[],["diffvec",3]]],[11,"clone","identity_diff::vec","",14,[[],["innervec",4]]],[11,"default","identity_diff","",0,[[]]],[11,"default","identity_diff::macros","",17,[[],["diffi8",3]]],[11,"default","","",18,[[],["diffi16",3]]],[11,"default","","",19,[[],["diffi32",3]]],[11,"default","","",20,[[],["diffi64",3]]],[11,"default","","",21,[[],["diffi128",3]]],[11,"default","","",22,[[],["diffisize",3]]],[11,"default","","",23,[[],["diffu8",3]]],[11,"default","","",24,[[],["diffu16",3]]],[11,"default","","",25,[[],["diffu32",3]]],[11,"default","","",26,[[],["diffu64",3]]],[11,"default","","",27,[[],["diffu128",3]]],[11,"default","","",28,[[],["diffusize",3]]],[11,"default","","",29,[[],["difff32",3]]],[11,"default","","",30,[[],["difff64",3]]],[11,"default","","",31,[[],["diffbool",3]]],[11,"default","","",32,[[],["diffchar",3]]],[11,"default","","",33,[[],["diffunit",3]]],[11,"default","identity_diff","",5,[[]]],[11,"default","","",2,[[],["diffstring",3]]],[11,"default","identity_diff::value","",13,[[]]],[11,"default","identity_diff","",3,[[]]],[11,"cmp","identity_diff::macros","",17,[[["diffi8",3]],["ordering",4]]],[11,"cmp","","",18,[[["diffi16",3]],["ordering",4]]],[11,"cmp","","",19,[[["diffi32",3]],["ordering",4]]],[11,"cmp","","",20,[[["diffi64",3]],["ordering",4]]],[11,"cmp","","",21,[[["diffi128",3]],["ordering",4]]],[11,"cmp","","",22,[[["diffisize",3]],["ordering",4]]],[11,"cmp","","",23,[[["diffu8",3]],["ordering",4]]],[11,"cmp","","",24,[[["diffu16",3]],["ordering",4]]],[11,"cmp","","",25,[[["diffu32",3]],["ordering",4]]],[11,"cmp","","",26,[[["diffu64",3]],["ordering",4]]],[11,"cmp","","",27,[[["diffu128",3]],["ordering",4]]],[11,"cmp","","",28,[[["diffusize",3]],["ordering",4]]],[11,"cmp","","",31,[[["diffbool",3]],["ordering",4]]],[11,"cmp","","",32,[[["diffchar",3]],["ordering",4]]],[11,"cmp","","",33,[[["diffunit",3]],["ordering",4]]],[11,"cmp","identity_diff","",2,[[["diffstring",3]],["ordering",4]]],[11,"eq","identity_diff::hashmap","",6,[[["innervalue",4]]]],[11,"ne","","",6,[[["innervalue",4]]]],[11,"eq","identity_diff","",0,[[["diffhashmap",3]]]],[11,"ne","","",0,[[["diffhashmap",3]]]],[11,"eq","","",1,[[["diffhashset",3]]]],[11,"ne","","",1,[[["diffhashset",3]]]],[11,"eq","identity_diff::hashset","",10,[[["innervalue",4]]]],[11,"ne","","",10,[[["innervalue",4]]]],[11,"eq","identity_diff::macros","",17,[[["diffi8",3]]]],[11,"ne","","",17,[[["diffi8",3]]]],[11,"eq","","",18,[[["diffi16",3]]]],[11,"ne","","",18,[[["diffi16",3]]]],[11,"eq","","",19,[[["diffi32",3]]]],[11,"ne","","",19,[[["diffi32",3]]]],[11,"eq","","",20,[[["diffi64",3]]]],[11,"ne","","",20,[[["diffi64",3]]]],[11,"eq","","",21,[[["diffi128",3]]]],[11,"ne","","",21,[[["diffi128",3]]]],[11,"eq","","",22,[[["diffisize",3]]]],[11,"ne","","",22,[[["diffisize",3]]]],[11,"eq","","",23,[[["diffu8",3]]]],[11,"ne","","",23,[[["diffu8",3]]]],[11,"eq","","",24,[[["diffu16",3]]]],[11,"ne","","",24,[[["diffu16",3]]]],[11,"eq","","",25,[[["diffu32",3]]]],[11,"ne","","",25,[[["diffu32",3]]]],[11,"eq","","",26,[[["diffu64",3]]]],[11,"ne","","",26,[[["diffu64",3]]]],[11,"eq","","",27,[[["diffu128",3]]]],[11,"ne","","",27,[[["diffu128",3]]]],[11,"eq","","",28,[[["diffusize",3]]]],[11,"ne","","",28,[[["diffusize",3]]]],[11,"eq","","",29,[[["difff32",3]]]],[11,"ne","","",29,[[["difff32",3]]]],[11,"eq","","",30,[[["difff64",3]]]],[11,"ne","","",30,[[["difff64",3]]]],[11,"eq","","",31,[[["diffbool",3]]]],[11,"ne","","",31,[[["diffbool",3]]]],[11,"eq","","",32,[[["diffchar",3]]]],[11,"ne","","",32,[[["diffchar",3]]]],[11,"eq","","",33,[[["diffunit",3]]]],[11,"ne","","",33,[[["diffunit",3]]]],[11,"eq","identity_diff","",5,[[["diffoption",4]]]],[11,"ne","","",5,[[["diffoption",4]]]],[11,"eq","","",2,[[["diffstring",3]]]],[11,"ne","","",2,[[["diffstring",3]]]],[11,"eq","identity_diff::value","",13,[[["diffvalue",3]]]],[11,"ne","","",13,[[["diffvalue",3]]]],[11,"eq","identity_diff","",3,[[["diffvec",3]]]],[11,"ne","","",3,[[["diffvec",3]]]],[11,"eq","identity_diff::vec","",14,[[["innervec",4]]]],[11,"ne","","",14,[[["innervec",4]]]],[11,"partial_cmp","identity_diff::macros","",17,[[["diffi8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",17,[[["diffi8",3]]]],[11,"le","","",17,[[["diffi8",3]]]],[11,"gt","","",17,[[["diffi8",3]]]],[11,"ge","","",17,[[["diffi8",3]]]],[11,"partial_cmp","","",18,[[["diffi16",3]],[["ordering",4],["option",4]]]],[11,"lt","","",18,[[["diffi16",3]]]],[11,"le","","",18,[[["diffi16",3]]]],[11,"gt","","",18,[[["diffi16",3]]]],[11,"ge","","",18,[[["diffi16",3]]]],[11,"partial_cmp","","",19,[[["diffi32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",19,[[["diffi32",3]]]],[11,"le","","",19,[[["diffi32",3]]]],[11,"gt","","",19,[[["diffi32",3]]]],[11,"ge","","",19,[[["diffi32",3]]]],[11,"partial_cmp","","",20,[[["diffi64",3]],[["ordering",4],["option",4]]]],[11,"lt","","",20,[[["diffi64",3]]]],[11,"le","","",20,[[["diffi64",3]]]],[11,"gt","","",20,[[["diffi64",3]]]],[11,"ge","","",20,[[["diffi64",3]]]],[11,"partial_cmp","","",21,[[["diffi128",3]],[["ordering",4],["option",4]]]],[11,"lt","","",21,[[["diffi128",3]]]],[11,"le","","",21,[[["diffi128",3]]]],[11,"gt","","",21,[[["diffi128",3]]]],[11,"ge","","",21,[[["diffi128",3]]]],[11,"partial_cmp","","",22,[[["diffisize",3]],[["ordering",4],["option",4]]]],[11,"lt","","",22,[[["diffisize",3]]]],[11,"le","","",22,[[["diffisize",3]]]],[11,"gt","","",22,[[["diffisize",3]]]],[11,"ge","","",22,[[["diffisize",3]]]],[11,"partial_cmp","","",23,[[["diffu8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",23,[[["diffu8",3]]]],[11,"le","","",23,[[["diffu8",3]]]],[11,"gt","","",23,[[["diffu8",3]]]],[11,"ge","","",23,[[["diffu8",3]]]],[11,"partial_cmp","","",24,[[["diffu16",3]],[["ordering",4],["option",4]]]],[11,"lt","","",24,[[["diffu16",3]]]],[11,"le","","",24,[[["diffu16",3]]]],[11,"gt","","",24,[[["diffu16",3]]]],[11,"ge","","",24,[[["diffu16",3]]]],[11,"partial_cmp","","",25,[[["diffu32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["diffu32",3]]]],[11,"le","","",25,[[["diffu32",3]]]],[11,"gt","","",25,[[["diffu32",3]]]],[11,"ge","","",25,[[["diffu32",3]]]],[11,"partial_cmp","","",26,[[["diffu64",3]],[["ordering",4],["option",4]]]],[11,"lt","","",26,[[["diffu64",3]]]],[11,"le","","",26,[[["diffu64",3]]]],[11,"gt","","",26,[[["diffu64",3]]]],[11,"ge","","",26,[[["diffu64",3]]]],[11,"partial_cmp","","",27,[[["diffu128",3]],[["ordering",4],["option",4]]]],[11,"lt","","",27,[[["diffu128",3]]]],[11,"le","","",27,[[["diffu128",3]]]],[11,"gt","","",27,[[["diffu128",3]]]],[11,"ge","","",27,[[["diffu128",3]]]],[11,"partial_cmp","","",28,[[["diffusize",3]],[["ordering",4],["option",4]]]],[11,"lt","","",28,[[["diffusize",3]]]],[11,"le","","",28,[[["diffusize",3]]]],[11,"gt","","",28,[[["diffusize",3]]]],[11,"ge","","",28,[[["diffusize",3]]]],[11,"partial_cmp","","",29,[[["difff32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",29,[[["difff32",3]]]],[11,"le","","",29,[[["difff32",3]]]],[11,"gt","","",29,[[["difff32",3]]]],[11,"ge","","",29,[[["difff32",3]]]],[11,"partial_cmp","","",30,[[["difff64",3]],[["ordering",4],["option",4]]]],[11,"lt","","",30,[[["difff64",3]]]],[11,"le","","",30,[[["difff64",3]]]],[11,"gt","","",30,[[["difff64",3]]]],[11,"ge","","",30,[[["difff64",3]]]],[11,"partial_cmp","","",31,[[["diffbool",3]],[["ordering",4],["option",4]]]],[11,"lt","","",31,[[["diffbool",3]]]],[11,"le","","",31,[[["diffbool",3]]]],[11,"gt","","",31,[[["diffbool",3]]]],[11,"ge","","",31,[[["diffbool",3]]]],[11,"partial_cmp","","",32,[[["diffchar",3]],[["ordering",4],["option",4]]]],[11,"lt","","",32,[[["diffchar",3]]]],[11,"le","","",32,[[["diffchar",3]]]],[11,"gt","","",32,[[["diffchar",3]]]],[11,"ge","","",32,[[["diffchar",3]]]],[11,"partial_cmp","","",33,[[["diffunit",3]],[["ordering",4],["option",4]]]],[11,"lt","","",33,[[["diffunit",3]]]],[11,"le","","",33,[[["diffunit",3]]]],[11,"gt","","",33,[[["diffunit",3]]]],[11,"ge","","",33,[[["diffunit",3]]]],[11,"partial_cmp","identity_diff","",2,[[["diffstring",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["diffstring",3]]]],[11,"le","","",2,[[["diffstring",3]]]],[11,"gt","","",2,[[["diffstring",3]]]],[11,"ge","","",2,[[["diffstring",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff::hashmap","",6,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff","",1,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff::hashset","",10,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff::macros","",17,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",18,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",19,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",20,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",21,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",22,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",23,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",24,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",25,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",26,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",27,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",28,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",29,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",30,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",31,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",32,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",33,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff","",5,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",2,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff::value","",13,[[["formatter",3]],["result",6]]],[11,"fmt","identity_diff","",3,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff::vec","",14,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_diff","",4,[[["formatter",3]],["result",6]]],[11,"hash","identity_diff::macros","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","identity_diff","",2,[[]]],[11,"serialize","identity_diff::hashmap","",6,[[],["result",4]]],[11,"serialize","identity_diff","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","identity_diff::hashset","",10,[[],["result",4]]],[11,"serialize","identity_diff::macros","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","identity_diff","",5,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","identity_diff::value","",13,[[],["result",4]]],[11,"serialize","identity_diff","",3,[[],["result",4]]],[11,"serialize","identity_diff::vec","",14,[[],["result",4]]],[11,"deserialize","identity_diff::hashmap","",6,[[],["result",4]]],[11,"deserialize","identity_diff","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","identity_diff::hashset","",10,[[],["result",4]]],[11,"deserialize","identity_diff::macros","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","identity_diff","",5,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","identity_diff::value","",13,[[],["result",4]]],[11,"deserialize","identity_diff","",3,[[],["result",4]]],[11,"deserialize","identity_diff::vec","",14,[[],["result",4]]]],"p":[[3,"DiffHashMap"],[3,"DiffHashSet"],[3,"DiffString"],[3,"DiffVec"],[4,"Error"],[4,"DiffOption"],[4,"InnerValue"],[13,"Change"],[13,"Add"],[13,"Remove"],[4,"InnerValue"],[13,"Remove"],[8,"Diff"],[3,"DiffValue"],[4,"InnerVec"],[13,"Change"],[13,"Remove"],[3,"Diffi8"],[3,"Diffi16"],[3,"Diffi32"],[3,"Diffi64"],[3,"Diffi128"],[3,"DiffiSize"],[3,"Diffu8"],[3,"Diffu16"],[3,"Diffu32"],[3,"Diffu64"],[3,"Diffu128"],[3,"DiffuSize"],[3,"DiffF32"],[3,"DiffF64"],[3,"Diffbool"],[3,"Diffchar"],[3,"Diffunit"]]},\
"identity_iota":{"doc":"The IOTA Identity Library","i":[[0,"chain","identity_iota","",null,null],[3,"AuthChain","identity_iota::chain","",null,null],[12,"history","","",0,null],[12,"current","","",0,null],[3,"DiffChain","","",null,null],[12,"inner","","",1,null],[3,"DocumentChain","","",null,null],[12,"diff_chain","","",2,null],[12,"auth_chain","","",2,null],[12,"document","","",2,null],[0,"auth","","",null,null],[3,"AuthChain","identity_iota::chain::auth","",null,null],[12,"history","","",0,null],[12,"current","","",0,null],[11,"try_from_messages","identity_iota::chain","Constructs a new `AuthChain` from a slice of `Message`s.",0,[[["did",3]],["result",6]]],[11,"new","","Creates a new `AuthChain` with the given `Document` as the…",0,[[["document",3]],["result",6]]],[11,"current","","Returns a reference to the latest document in the auth…",0,[[],["document",3]]],[11,"current_mut","","Returns a mutable reference to the latest document in the…",0,[[],["document",3]]],[11,"current_message_id","","Returns the Tangle message Id of the latest auth document.",0,[[],["messageid",3]]],[11,"try_push","","Adds a new document to the auth chain.",0,[[["document",3]],["result",6]]],[11,"is_valid","","Returns `true` if the `Document` can be added to the auth…",0,[[["document",3]]]],[11,"check_validity","","Checks if the `Document` can be added to the auth chain.",0,[[["document",3]],["result",6]]],[0,"diff","","",null,null],[3,"DiffChain","identity_iota::chain::diff","",null,null],[12,"inner","","",1,null],[11,"try_from_messages","identity_iota::chain","Constructs a new `DiffChain` for the given `AuthChain`…",1,[[["authchain",3]],["result",6]]],[11,"new","","Creates a new `DiffChain`.",1,[[]]],[11,"len","","Returns the total number of diffs in the chain.",1,[[]]],[11,"is_empty","","Returns `true` if the diff chain is empty.",1,[[]]],[11,"clear","","Empties the diff chain, removing all diffs.",1,[[]]],[11,"iter","","Returns an iterator yielding references to `DocumentDiff`s.",1,[[],[["documentdiff",3],["iter",3]]]],[11,"current_message_id","","Returns the `MessageId` of the latest diff if the chain,…",1,[[],[["messageid",3],["option",4]]]],[11,"try_push","","Adds a new diff to the diff chain.",1,[[["authchain",3],["documentdiff",3]],["result",6]]],[11,"push_unchecked","","Adds a new diff to the diff chain with performing…",1,[[["documentdiff",3]]]],[11,"is_valid","","Returns `true` if the `DocumentDiff` can be added to the…",1,[[["authchain",3],["documentdiff",3]]]],[11,"check_validity","","Checks if the `DocumentDiff` can be added to the diff chain.",1,[[["authchain",3],["documentdiff",3]],["result",6]]],[0,"document","","",null,null],[3,"DocumentChain","identity_iota::chain::document","",null,null],[12,"diff_chain","","",2,null],[12,"auth_chain","","",2,null],[12,"document","","",2,null],[11,"__diff_message_id","identity_iota::chain","",2,[[["authchain",3],["diffchain",3]],["messageid",3]]],[11,"__fold","","",2,[[["authchain",3],["diffchain",3]],[["document",3],["result",6]]]],[11,"new","","Creates a new `DocumentChain` from given the `AuthChain`.",2,[[["authchain",3]]]],[11,"with_diff_chain","","Creates a new `DocumentChain` from given the `AuthChain`…",2,[[["diffchain",3],["authchain",3]],["result",6]]],[11,"id","","Returns a reference to the DID identifying the document…",2,[[],["did",3]]],[11,"auth","","Returns a reference to the `AuthChain`.",2,[[],["authchain",3]]],[11,"auth_mut","","Returns a mutable reference to the `AuthChain`.",2,[[],["authchain",3]]],[11,"diff","","Returns a reference to the `DiffChain`.",2,[[],["diffchain",3]]],[11,"diff_mut","","Returns a mutable reference to the `DiffChain`.",2,[[],["diffchain",3]]],[11,"fold","","",2,[[],[["document",3],["result",6]]]],[11,"current","","Returns a reference to the latest document in the chain.",2,[[],["document",3]]],[11,"current_mut","","Returns a mutable reference to the latest document in the…",2,[[],["document",3]]],[11,"auth_message_id","","Returns the Tangle message Id of the latest auth document.",2,[[],["messageid",3]]],[11,"diff_message_id","","Returns the Tangle message Id of the latest diff or auth…",2,[[],["messageid",3]]],[11,"try_push_auth","","Adds a new auth document to the chain.",2,[[["document",3]],["result",6]]],[11,"try_push_diff","","Adds a new diff to the current diff chain.",2,[[["documentdiff",3]],["result",6]]],[0,"client","identity_iota","",null,null],[3,"Client","identity_iota::client","",null,null],[12,"client","","",3,null],[12,"network","","",3,null],[3,"ClientBuilder","","A `ClientBuilder` is used to generated a customized…",null,null],[12,"network","","",4,null],[12,"nodes","","",4,null],[3,"TxnPrinter","","",null,null],[12,"0","","",5,null],[12,"1","","",5,null],[4,"Network","","",null,null],[13,"Mainnet","","",6,null],[13,"Devnet","","",6,null],[13,"Comnet","","",6,null],[0,"client","","",null,null],[3,"Client","identity_iota::client::client","",null,null],[12,"client","","",3,null],[12,"network","","",3,null],[5,"create_transfer","","",null,[[],[["result",6],["transfer",3]]]],[5,"__dbg_transactions","","",null,[[["findtransactionsresponse",3]],[["vec",3],["string",3]]]],[5,"__dbg_trytes","","",null,[[["gettrytesresponse",3]],[["vec",3],["txnprinter",3]]]],[11,"new","identity_iota::client","Creates a new `Client`  with default settings.",3,[[],["result",6]]],[11,"builder","","Creates a `ClientBuilder` to configure a new `Client`.",3,[[],["clientbuilder",3]]],[11,"from_network","","Creates a new `Client` with default settings for the given…",3,[[["network",4]],["result",6]]],[11,"from_builder","","Creates a new `Client` based on the `ClientBuilder`…",3,[[["clientbuilder",3]],["result",6]]],[11,"network","","Returns the `Client` Tangle network.",3,[[],["network",4]]],[11,"default_node_url","","Returns the default node URL of the `Client` network.",3,[[],["url",3]]],[11,"explorer_url","","Returns the web explorer URL of the `Client` network.",3,[[],["url",3]]],[11,"transaction_url","","Returns the web explorer URL of the given `transaction`.",3,[[["bundledtransaction",3]],["url",3]]],[11,"transaction_hash","","Returns the hash of the Tangle transaction as a…",3,[[["bundledtransaction",3]],["string",3]]],[11,"publish_document","","Publishes an DID Document to the Tangle; returns the…",3,[[["document",3]]]],[11,"publish_diff","","Publishes a `DocumentDiff` to the Tangle; returns the…",3,[[["documentdiff",3],["messageid",3]]]],[11,"read_document","","",3,[[["did",3]]]],[11,"read_document_chain","","",3,[[["did",3]]]],[11,"send_transfer","","",3,[[["transfer",3]]]],[11,"check_network","","",3,[[["did",3]],["result",6]]],[0,"client_builder","","",null,null],[3,"ClientBuilder","identity_iota::client::client_builder","A `ClientBuilder` is used to generated a customized…",null,null],[12,"network","","",4,null],[12,"nodes","","",4,null],[11,"new","identity_iota::client","Creates a new `ClientBuilder`.",4,[[]]],[11,"network","","Sets the network of the generated `Client`.",4,[[["network",4]]]],[11,"node","","Adds an IOTA node to the generated `Client`.",4,[[]]],[11,"nodes","","Adds an iterator of IOTA nodes to the generated `Client`.",4,[[]]],[11,"build","","Creates a new `Client` based on the `ClientBuilder`…",4,[[],[["result",6],["client",3]]]],[0,"network","","",null,null],[3,"EXPLORER_MAIN","identity_iota::client::network","",null,null],[12,"__private_field","","",7,null],[3,"EXPLORER_DEV","","",null,null],[12,"__private_field","","",8,null],[3,"EXPLORER_COM","","",null,null],[12,"__private_field","","",9,null],[3,"NODE_MAIN","","",null,null],[12,"__private_field","","",10,null],[3,"NODE_DEV","","",null,null],[12,"__private_field","","",11,null],[3,"NODE_COM","","",null,null],[12,"__private_field","","",12,null],[4,"Network","","",null,null],[13,"Mainnet","","",6,null],[13,"Devnet","","",6,null],[13,"Comnet","","",6,null],[11,"from_name","identity_iota::client","",6,[[]]],[11,"matches_did","","",6,[[["did",3]]]],[11,"node_url","","Returns the default node URL of the Tangle network.",6,[[],["url",3]]],[11,"explorer_url","","Returns the web explorer URL of the Tangle network.",6,[[],["url",3]]],[11,"as_str","","Returns the name of the network as a static `str`.",6,[[]]],[0,"resolver","","",null,null],[0,"txn_printer","","",null,null],[3,"TxnPrinter","identity_iota::client::txn_printer","",null,null],[12,"0","","",5,null],[12,"1","","",5,null],[4,"__Full","","",null,null],[4,"__Mini","","",null,null],[4,"__Hash","","",null,null],[11,"full","identity_iota::client","",5,[[["bundledtransaction",3]]]],[11,"mini","","",5,[[["bundledtransaction",3]]]],[11,"hash","","",5,[[["bundledtransaction",3]]]],[0,"credential","identity_iota","",null,null],[3,"CredentialValidation","identity_iota::credential","",null,null],[12,"credential","","",13,null],[12,"issuer","","",13,null],[12,"subjects","","",13,null],[12,"verified","","",13,null],[3,"CredentialValidator","","",null,null],[12,"client","","",14,null],[3,"DocumentValidation","","",null,null],[12,"did","","",15,null],[12,"document","","",15,null],[12,"metadata","","",15,null],[12,"verified","","",15,null],[3,"PresentationValidation","","",null,null],[12,"presentation","","",16,null],[12,"holder","","",16,null],[12,"credentials","","",16,null],[12,"verified","","",16,null],[0,"validator","","",null,null],[3,"CredentialValidation","identity_iota::credential::validator","",null,null],[12,"credential","","",13,null],[12,"issuer","","",13,null],[12,"subjects","","",13,null],[12,"verified","","",13,null],[3,"PresentationValidation","","",null,null],[12,"presentation","","",16,null],[12,"holder","","",16,null],[12,"credentials","","",16,null],[12,"verified","","",16,null],[3,"DocumentValidation","","",null,null],[12,"did","","",15,null],[12,"document","","",15,null],[12,"metadata","","",15,null],[12,"verified","","",15,null],[3,"CredentialValidator","","",null,null],[12,"client","","",14,null],[11,"new","identity_iota::credential","Creates a new `CredentialValidator`.",14,[[["client",3]]]],[11,"check","","Deserializes the given JSON-encoded `VerifiableCredential`…",14,[[]]],[11,"check_presentation","","Deserializes the given JSON-encoded…",14,[[]]],[11,"validate_credential","","Validates the `VerifiableCredential` proof and all…",14,[[["verifiablecredential",3]]]],[11,"validate_presentation","","Validates the `VerifiablePresentation` proof and all…",14,[[["verifiablepresentation",3]]]],[11,"validate_document","","",14,[[]]],[0,"did","identity_iota","",null,null],[3,"Document","identity_iota::did","A DID Document adhering to the IOTA DID method…",null,null],[12,"document","","",17,null],[12,"message_id","","",17,null],[3,"DocumentDiff","","",null,null],[12,"did","","",18,null],[12,"diff","","",18,null],[12,"previous_message_id","","",18,null],[12,"proof","","",18,null],[12,"message_id","","",18,null],[3,"Method","","",null,null],[12,"0","","",19,null],[3,"Properties","","Additional properties stored in an IOTA DID Document.",null,null],[12,"created","","",20,null],[12,"updated","","",20,null],[12,"immutable","","",20,null],[12,"previous_message_id","","",20,null],[12,"properties","","",20,null],[3,"DID","","A DID URL adhering to the IOTA DID method specification.",null,null],[12,"0","","",21,null],[0,"macros","","",null,null],[0,"doc","","",null,null],[0,"diff","identity_iota::did::doc","",null,null],[3,"DocumentDiff","identity_iota::did::doc::diff","",null,null],[12,"did","","",18,null],[12,"diff","","",18,null],[12,"previous_message_id","","",18,null],[12,"proof","","",18,null],[12,"message_id","","",18,null],[11,"new","identity_iota::did","",18,[[["messageid",3],["document",3]],["result",6]]],[11,"id","","Returns the DID of associated DID Document.",18,[[],["did",3]]],[11,"diff","","Returns the raw contents of the DID Document diff.",18,[[]]],[11,"previous_message_id","","Returns the Tangle message id of the previous DID Document…",18,[[],["messageid",3]]],[11,"proof","","Returns a reference to the DID Document proof.",18,[[],[["signature",3],["option",4]]]],[11,"merge","","Returns a new DID Document which is the result of merging…",18,[[["document",3]],[["document",3],["result",6]]]],[11,"publish","","Publishes the DID Document diff to the Tangle",18,[[["messageid",3]]]],[0,"document","identity_iota::did::doc","",null,null],[3,"Document","identity_iota::did::doc::document","A DID Document adhering to the IOTA DID method…",null,null],[12,"document","","",17,null],[12,"message_id","","",17,null],[6,"Properties","","",null,null],[6,"BaseDocument","","",null,null],[6,"Signer","","",null,null],[6,"Verifier","","",null,null],[11,"from_keypair","identity_iota::did","Creates a new DID Document from the given KeyPair.",17,[[["keypair",3]],["result",6]]],[11,"from_authentication","","Creates a new DID Document from the given verification…",17,[[["method",3]],["result",6]]],[11,"from_authentication_unchecked","","Creates a new DID Document from the given verification…",17,[[["method",3]]]],[11,"try_from_core","","Converts a generic DID `Document` to an IOTA DID Document.",17,[[["coredocument",3]],["result",6]]],[11,"check_authentication","","",17,[[["coremethod",3]],["result",6]]],[11,"as_document","","Returns a reference to the underlying…",17,[[],["coredocument",3]]],[11,"as_document_mut","","Returns a mutable reference to the underlying…",17,[[],["coredocument",3]]],[11,"id","","Returns the DID document [`id`][`DID`].",17,[[],["did",3]]],[11,"authentication","","Returns the default authentication method of the DID…",17,[[],["method",3]]],[11,"authentication_id","","",17,[[]]],[11,"created","","Returns the timestamp of when the DID document was created.",17,[[],["timestamp",3]]],[11,"set_created","","Sets the timestamp of when the DID document was created.",17,[[["timestamp",3]]]],[11,"updated","","Returns the timestamp of the last DID document update.",17,[[],["timestamp",3]]],[11,"set_updated","","Sets the timestamp of the last DID document update.",17,[[["timestamp",3]]]],[11,"previous_message_id","","Returns the Tangle message id of the previous DID…",17,[[],["messageid",3]]],[11,"set_previous_message_id","","Sets the Tangle message id the previous DID document.",17,[[]]],[11,"immutable","","Returns true if the DID Document is flagged as immutable.",17,[[]]],[11,"set_immutable","","Sets the value of the `immutable` flag.",17,[[]]],[11,"properties","","Returns a reference to the custom DID Document properties.",17,[[],["object",6]]],[11,"properties_mut","","Returns a mutable reference to the custom DID Document…",17,[[],["object",6]]],[11,"insert_method","","Adds a new Verification Method to the DID Document.",17,[[["method",3],["methodscope",4]]]],[11,"remove_method","","Removes all references to the specified Verification Method.",17,[[["did",3]],["result",6]]],[11,"sign","","Signs the DID document with the default authentication…",17,[[["secretkey",3]],["result",6]]],[11,"verify","","Verifies the signature of the DID document.",17,[[],["result",6]]],[11,"sign_data","","Signs the provided data with the default authentication…",17,[[["secretkey",3]],["result",6]]],[11,"verify_data","","Verifies the signature of the provided data.",17,[[],["result",6]]],[11,"diff","","Creates a `DocumentDiff` representing the changes between…",17,[[["messageid",3],["secretkey",3]],[["result",6],["documentdiff",3]]]],[11,"merge","","Verifies a `DocumentDiff` signature and merges the changes…",17,[[["documentdiff",3]],["result",6]]],[11,"publish","","Publishes the DID Document to the Tangle",17,[[]]],[11,"diff_address","","Returns the Tangle address of the DID diff chain.",17,[[["messageid",3]],[["result",6],["string",3]]]],[0,"method","identity_iota::did::doc","",null,null],[3,"Method","identity_iota::did::doc::method","",null,null],[12,"0","","",19,null],[18,"TAG","identity_iota::did","The default verification method tag.",19,null],[11,"create_merkle_key","","Creates a new Merkle Key Collection Method from the given…",19,[[["did",3],["keycollection",3]],["result",6]]],[11,"from_keypair","","Creates a new [`Method`] object from the given `keypair`.",19,[[["keypair",3]],["result",6]]],[11,"from_did","","Creates a new [`Method`] object from the given `did` and…",19,[[["did",3],["keypair",3]],["result",6]]],[11,"try_from_core","","Converts a generic Verification Method to an IOTA…",19,[[["coremethod",3]],["result",6]]],[11,"try_from_mut","","Converts a mutable `Method` reference to a mutable IOTA…",19,[[["coremethod",3]],["result",6]]],[11,"new_unchecked_ref","","Converts a `Method` reference to an IOTA Verification…",19,[[["coremethod",3]]]],[11,"check_validity","","Checks if the given verification method is valid according…",19,[[["coremethod",3]],["result",6]]],[11,"is_valid","","Returns a `bool` indicating if the given verification…",19,[[["coremethod",3]]]],[11,"id","","Returns the method `id` property.",19,[[],["did",3]]],[11,"controller","","Returns the method `controller` property.",19,[[],["did",3]]],[11,"revoke_merkle_key","","Revokes the public key of a Merkle Key Collection at the…",19,[[],["result",6]]],[0,"properties","identity_iota::did::doc","",null,null],[3,"Properties","identity_iota::did::doc::properties","Additional properties stored in an IOTA DID Document.",null,null],[12,"created","","",20,null],[12,"updated","","",20,null],[12,"immutable","","",20,null],[12,"previous_message_id","","",20,null],[12,"properties","","",20,null],[11,"new","identity_iota::did","",20,[[]]],[0,"url","","",null,null],[0,"did","identity_iota::did::url","",null,null],[3,"DID","identity_iota::did::url::did","A DID URL adhering to the IOTA DID method specification.",null,null],[12,"0","","",21,null],[17,"BLAKE2B_256_LEN","","",null,null],[18,"SCHEME","identity_iota::did","The URL scheme for Decentralized Identifiers.",21,null],[18,"METHOD","","The DID method name.",21,null],[18,"DEFAULT_NETWORK","","The default Tangle network.",21,null],[11,"try_from_borrowed","","Converts a borrowed `DID` to an IOTA DID.",21,[[["coredid",3]],["result",6]]],[11,"try_from_owned","","Converts an owned `DID` to an IOTA DID.",21,[[["coredid",3]],["result",6]]],[11,"new_unchecked_ref","","Converts a `DID` reference to an IOTA DID reference…",21,[[["coredid",3]]]],[11,"parse","","Parses an IOTA DID from the given `input`.",21,[[],["result",6]]],[11,"new","","Creates a new IOTA DID with a tag derived from the given…",21,[[],["result",6]]],[11,"with_network","","Creates a new IOTA DID from the given `public` key and…",21,[[],["result",6]]],[11,"with_network_and_shard","","Creates a new IOTA DID from the given `public` key,…",21,[[],["result",6]]],[11,"join","","Creates a new `DID` by joining `self` with the relative…",21,[[],["result",6]]],[11,"set_path","","Sets the `path` component of the DID Url.",21,[[]]],[11,"set_query","","Sets the `query` component of the DID Url.",21,[[["option",4]]]],[11,"set_fragment","","Sets the `fragment` component of the DID Url.",21,[[["option",4]]]],[11,"check_method","","Checks if the given `DID` has a valid IOTA DID `method`.",21,[[["coredid",3]],["result",6]]],[11,"check_method_id","","Checks if the given `DID` has a valid IOTA DID `method_id`.",21,[[["coredid",3]],["result",6]]],[11,"check_validity","","Checks if the given `DID` is valid according to the IOTA…",21,[[["coredid",3]],["result",6]]],[11,"is_valid","","Returns a `bool` indicating if the given `DID` is valid…",21,[[["coredid",3]]]],[11,"network","","Returns the Tangle `network` of the `DID`.",21,[[]]],[11,"shard","","Returns the Tangle network `shard` of the `DID`.",21,[[],["option",4]]],[11,"tag","","Returns the unique Tangle tag of the `DID`.",21,[[]]],[11,"address","","Returns the Tangle address of the DID auth chain.",21,[[],["string",3]]],[11,"normalize","","",21,[[["coredid",3]],["coredid",3]]],[0,"segments","identity_iota::did::url","",null,null],[6,"Signer","identity_iota::did","",null,null],[6,"Verifier","","",null,null],[0,"error","identity_iota","",null,null],[4,"Error","identity_iota::error","",null,null],[13,"CoreError","","",22,null],[13,"DiffError","","",22,null],[13,"CredError","","",22,null],[13,"InvalidDID","","",22,null],[13,"InvalidDoc","","",22,null],[13,"ClientError","","",22,null],[13,"TernaryError","","",22,null],[13,"InvalidDocumentMessageId","","",22,null],[13,"InvalidDocumentAuthAuthority","","",22,null],[13,"InvalidDocumentAuthFragment","","",22,null],[13,"InvalidDocumentAuthType","","",22,null],[13,"InvalidDIDNetwork","","",22,null],[13,"InvalidTryteConversion","","",22,null],[13,"InvalidTransactionBundle","","",22,null],[13,"InvalidTransactionHashes","","",22,null],[13,"InvalidTransactionTrytes","","",22,null],[13,"InvalidBundleTail","","",22,null],[13,"InvalidPresentationHolder","","",22,null],[13,"ChainError","","",22,null],[12,"error","identity_iota::error::Error","",23,null],[13,"MissingMethodFragment","identity_iota::error","",22,null],[13,"MissingAuthenticationMethod","","",22,null],[13,"CannotRemoveAuthMethod","","",22,null],[13,"CannotRevokeMethod","","",22,null],[6,"Result","","",null,null],[0,"tangle","identity_iota","",null,null],[3,"Message","identity_iota::tangle","",null,null],[12,"address","","",24,null],[12,"message","","",24,null],[12,"tail_hash","","",24,null],[12,"timestamp","","",24,null],[3,"MessageId","","",null,null],[12,"0","","",25,null],[3,"MessageIndex","","",null,null],[12,"inner","","",26,null],[0,"message","","",null,null],[3,"Message","identity_iota::tangle::message","",null,null],[12,"address","","",24,null],[12,"message","","",24,null],[12,"tail_hash","","",24,null],[12,"timestamp","","",24,null],[11,"try_from_bundle","identity_iota::tangle","",24,[[["bundledtransaction",3],["vec",3]],["result",6]]],[11,"message_str","","Returns the contents of the message as a tryte-encoded…",24,[[],["string",3]]],[11,"message_utf8","","Returns the contents of the message as a utf8-encoded…",24,[[],[["result",6],["string",3]]]],[11,"message_id","","Returns the `MessageId` identifying the Tangle message.",24,[[],["messageid",3]]],[11,"try_extract_document","","",24,[[["did",3]],[["document",3],["option",4]]]],[11,"try_extract_diff","","",24,[[["did",3]],[["documentdiff",3],["option",4]]]],[0,"message_id","","",null,null],[3,"MessageId","identity_iota::tangle::message_id","",null,null],[12,"0","","",25,null],[5,"maybe_trytes","","",null,[[]]],[18,"NONE","identity_iota::tangle","",25,null],[11,"new","","",25,[[]]],[11,"is_none","","",25,[[]]],[11,"is_some","","",25,[[]]],[11,"as_str","","",25,[[]]],[0,"message_index","","",null,null],[3,"MessageIndex","identity_iota::tangle::message_index","",null,null],[12,"inner","","",26,null],[6,"__Index","","",null,null],[11,"new","identity_iota::tangle","Creates a new `MessageIndex`.",26,[[]]],[11,"size","","Returns the total size of the index.",26,[[]]],[11,"remove_where","","",26,[[],["option",4]]],[11,"insert","","",26,[[]]],[11,"extend","","",26,[[]]],[0,"traits","","",null,null],[8,"TangleRef","identity_iota::tangle::traits","",null,null],[10,"message_id","","",27,[[],["messageid",3]]],[10,"set_message_id","","",27,[[["messageid",3]]]],[10,"previous_message_id","","",27,[[],["messageid",3]]],[10,"set_previous_message_id","","",27,[[["messageid",3]]]],[8,"TangleRef","identity_iota::tangle","",null,null],[10,"message_id","","",27,[[],["messageid",3]]],[10,"set_message_id","","",27,[[["messageid",3]]]],[10,"previous_message_id","","",27,[[],["messageid",3]]],[10,"set_previous_message_id","","",27,[[["messageid",3]]]],[0,"utils","identity_iota","",null,null],[5,"txn_hash","identity_iota::utils","",null,[[["bundledtransaction",3]],["hash",3]]],[5,"txn_hash_trytes","","",null,[[["bundledtransaction",3]],["string",3]]],[5,"encode_trits","","",null,[[["trits",3]],["string",3]]],[5,"create_address_from_trits","","",null,[[],[["address",3],["result",6]]]],[5,"to_tryte","","",null,[[]]],[5,"utf8_to_trytes","","",null,[[],["string",3]]],[5,"trytes_to_utf8","","",null,[[],[["result",6],["string",3]]]],[5,"bundles_from_trytes","","",null,[[["bundledtransaction",3],["vec",3]],[["vec",3],["vec",3]]]],[5,"cmp_trits","","",null,[[["trits",3]],["ordering",4]]],[5,"cmp_transaction","","",null,[[["bundledtransaction",3]]]],[14,"did","identity_iota","Creates a new IOTA DID from a `public` key and optional…",null,null],[14,"try_did","","A fallible version of the `did` macro.",null,null],[11,"from","identity_iota::chain","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",2,[[]]],[11,"from","identity_iota::client","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"equivalent","","",6,[[]]],[11,"vzip","","",6,[[]]],[11,"from","identity_iota::client::network","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","identity_iota::client::txn_printer","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","identity_iota::credential","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",16,[[]]],[11,"from","identity_iota::did","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"erased_serialize","","",17,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"erased_serialize","","",20,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"equivalent","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"from","identity_iota::error","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"as_fail","","",22,[[],["fail",8]]],[11,"from","identity_iota::tangle","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"equivalent","","",25,[[]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"message_id","identity_iota::did","",18,[[],["messageid",3]]],[11,"set_message_id","","",18,[[["messageid",3]]]],[11,"previous_message_id","","",18,[[],["messageid",3]]],[11,"set_previous_message_id","","",18,[[["messageid",3]]]],[11,"message_id","","",17,[[],["messageid",3]]],[11,"set_message_id","","",17,[[["messageid",3]]]],[11,"previous_message_id","","",17,[[],["messageid",3]]],[11,"set_previous_message_id","","",17,[[["messageid",3]]]],[11,"as_ref","","",21,[[],["coredid",3]]],[11,"from","identity_iota::client","",6,[[["did",3]]]],[11,"from","","",6,[[["network",4]],["network",4]]],[11,"from","identity_iota::did","",17,[[["verifiableproperties",3],["coredocument",3],["object",6]]]],[11,"from","identity_iota::error","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","","",22,[[["error",4]]]],[11,"from","identity_iota::tangle","",25,[[["string",3]]]],[11,"clone","identity_iota::client","",3,[[],["client",3]]],[11,"clone","","",4,[[],["clientbuilder",3]]],[11,"clone","","",6,[[],["network",4]]],[11,"clone","identity_iota::credential","",13,[[],["credentialvalidation",3]]],[11,"clone","","",16,[[],["presentationvalidation",3]]],[11,"clone","","",15,[[],["documentvalidation",3]]],[11,"clone","","",14,[[],["credentialvalidator",3]]],[11,"clone","identity_iota::did","",18,[[],["documentdiff",3]]],[11,"clone","","",17,[[],["document",3]]],[11,"clone","","",19,[[],["method",3]]],[11,"clone","","",20,[[],["properties",3]]],[11,"clone","","",21,[[],["did",3]]],[11,"clone","identity_iota::tangle","",25,[[],["messageid",3]]],[11,"clone","","",26,[[],["messageindex",3]]],[11,"default","identity_iota::chain","",1,[[]]],[11,"default","identity_iota::client","",4,[[]]],[11,"default","","",6,[[]]],[11,"default","identity_iota::did","",20,[[]]],[11,"default","identity_iota::tangle","",25,[[]]],[11,"default","","",26,[[]]],[11,"cmp","identity_iota::client","",6,[[["network",4]],["ordering",4]]],[11,"cmp","identity_iota::did","",21,[[["did",3]],["ordering",4]]],[11,"cmp","identity_iota::tangle","",25,[[["messageid",3]],["ordering",4]]],[11,"eq","identity_iota::client","",6,[[["network",4]]]],[11,"eq","identity_iota::credential","",13,[[["credentialvalidation",3]]]],[11,"ne","","",13,[[["credentialvalidation",3]]]],[11,"eq","","",16,[[["presentationvalidation",3]]]],[11,"ne","","",16,[[["presentationvalidation",3]]]],[11,"eq","","",15,[[["documentvalidation",3]]]],[11,"ne","","",15,[[["documentvalidation",3]]]],[11,"eq","identity_iota::did","",18,[[["documentdiff",3]]]],[11,"ne","","",18,[[["documentdiff",3]]]],[11,"eq","","",17,[[["document",3]]]],[11,"ne","","",17,[[["document",3]]]],[11,"eq","","",19,[[["method",3]]]],[11,"ne","","",19,[[["method",3]]]],[11,"eq","","",20,[[["properties",3]]]],[11,"ne","","",20,[[["properties",3]]]],[11,"eq","","",21,[[["did",3]]]],[11,"ne","","",21,[[["did",3]]]],[11,"eq","identity_iota::tangle","",25,[[["messageid",3]]]],[11,"ne","","",25,[[["messageid",3]]]],[11,"eq","","",25,[[]]],[11,"partial_cmp","identity_iota::client","",6,[[["network",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","identity_iota::did","",21,[[["did",3]],[["ordering",4],["option",4]]]],[11,"lt","","",21,[[["did",3]]]],[11,"le","","",21,[[["did",3]]]],[11,"gt","","",21,[[["did",3]]]],[11,"ge","","",21,[[["did",3]]]],[11,"partial_cmp","identity_iota::tangle","",25,[[["messageid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["messageid",3]]]],[11,"le","","",25,[[["messageid",3]]]],[11,"gt","","",25,[[["messageid",3]]]],[11,"ge","","",25,[[["messageid",3]]]],[11,"deref","identity_iota::client::network","",7,[[],["url",3]]],[11,"deref","","",8,[[],["url",3]]],[11,"deref","","",9,[[],["url",3]]],[11,"deref","","",10,[[],["url",3]]],[11,"deref","","",11,[[],["url",3]]],[11,"deref","","",12,[[],["url",3]]],[11,"deref","identity_iota::did","",17,[[]]],[11,"deref","","",19,[[]]],[11,"deref","","",21,[[]]],[11,"deref","identity_iota::tangle","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"fmt","identity_iota::chain","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::client","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::credential","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::did","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",19,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_iota::error","",22,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::tangle","",24,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::chain","",0,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",1,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",2,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_iota::client","",5,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::did","",17,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",19,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",21,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","identity_iota::error","",22,[[["formatter",3]],["result",6]]],[11,"fmt","identity_iota::tangle","",25,[[["formatter",3]],["result",6]]],[11,"hash","identity_iota::client","",6,[[]]],[11,"hash","identity_iota::did","",21,[[]]],[11,"try_from","","",17,[[["coredocument",3]],["result",6]]],[11,"try_from","","",19,[[["coremethod",3]],["result",6]]],[11,"try_from","","",21,[[["coredid",3]],["result",6]]],[11,"from_str","","",21,[[],["result",6]]],[11,"from_iter","identity_iota::tangle","",26,[[]]],[11,"source","identity_iota::error","",22,[[],[["option",4],["error",8]]]],[11,"initialize","identity_iota::client::network","",7,[[]]],[11,"initialize","","",8,[[]]],[11,"initialize","","",9,[[]]],[11,"initialize","","",10,[[]]],[11,"initialize","","",11,[[]]],[11,"initialize","","",12,[[]]],[11,"serialize","identity_iota::chain","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","identity_iota::credential","",13,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","identity_iota::did","",18,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","identity_iota::tangle","",25,[[],["result",4]]],[11,"deserialize","identity_iota::chain","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","identity_iota::did","",18,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","identity_iota::tangle","",25,[[],["result",4]]],[11,"signature","identity_iota::did","",18,[[],[["signature",3],["option",4]]]],[11,"signature","","",17,[[],[["signature",3],["option",4]]]],[11,"signature_mut","","",18,[[],[["option",4],["signature",3]]]],[11,"signature_mut","","",17,[[],[["option",4],["signature",3]]]],[11,"set_signature","","",18,[[["signature",3]]]],[11,"set_signature","","",17,[[["signature",3]]]],[11,"is_supported","identity_iota::client","",3,[[["coredid",3]]]],[11,"read","","",3,[[["coredid",3],["inputmetadata",3]],[["pin",3],["box",3]]]],[11,"revocation","identity_iota::did","",19,[[],[["option",4],["didresult",6]]]]],"p":[[3,"AuthChain"],[3,"DiffChain"],[3,"DocumentChain"],[3,"Client"],[3,"ClientBuilder"],[3,"TxnPrinter"],[4,"Network"],[3,"EXPLORER_MAIN"],[3,"EXPLORER_DEV"],[3,"EXPLORER_COM"],[3,"NODE_MAIN"],[3,"NODE_DEV"],[3,"NODE_COM"],[3,"CredentialValidation"],[3,"CredentialValidator"],[3,"DocumentValidation"],[3,"PresentationValidation"],[3,"Document"],[3,"DocumentDiff"],[3,"Method"],[3,"Properties"],[3,"DID"],[4,"Error"],[13,"ChainError"],[3,"Message"],[3,"MessageId"],[3,"MessageIndex"],[8,"TangleRef"],[4,"__Full"],[4,"__Mini"],[4,"__Hash"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);