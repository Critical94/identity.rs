(function() {var implementors = {};
implementors["identity_core"] = [{"text":"impl Serialize for Context","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for OneOrMany&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Timestamp","synthetic":false,"types":[]},{"text":"impl Serialize for Url","synthetic":false,"types":[]},{"text":"impl Serialize for Signature","synthetic":false,"types":[]},{"text":"impl Serialize for SignatureData","synthetic":false,"types":[]},{"text":"impl Serialize for SignatureOptions","synthetic":false,"types":[]},{"text":"impl Serialize for SignatureValue","synthetic":false,"types":[]}];
implementors["identity_credential"] = [{"text":"impl&lt;T&gt; Serialize for Credential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Evidence","synthetic":false,"types":[]},{"text":"impl Serialize for IssuerData","synthetic":false,"types":[]},{"text":"impl Serialize for Issuer","synthetic":false,"types":[]},{"text":"impl Serialize for Policy","synthetic":false,"types":[]},{"text":"impl Serialize for Refresh","synthetic":false,"types":[]},{"text":"impl Serialize for Schema","synthetic":false,"types":[]},{"text":"impl Serialize for Status","synthetic":false,"types":[]},{"text":"impl Serialize for Subject","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for VerifiableCredential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Serialize for Presentation&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Serialize for VerifiablePresentation&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["identity_did"] = [{"text":"impl&lt;T, U, V&gt; Serialize for DiffDocument&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Diff + Serialize + for&lt;'__de&gt; Deserialize&lt;'__de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Diff + Serialize + for&lt;'__de&gt; Deserialize&lt;'__de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Diff + Serialize + for&lt;'__de&gt; Deserialize&lt;'__de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for DiffMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Diff,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for DiffMethodData","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for DiffMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Diff,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for DiffService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Diff,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U, V&gt; Serialize for Document&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Dereference","synthetic":false,"types":[]},{"text":"impl Serialize for DocumentMetadata","synthetic":false,"types":[]},{"text":"impl Serialize for ErrorKind","synthetic":false,"types":[]},{"text":"impl Serialize for InputMetadata","synthetic":false,"types":[]},{"text":"impl Serialize for Resolution","synthetic":false,"types":[]},{"text":"impl Serialize for ResolutionMetadata","synthetic":false,"types":[]},{"text":"impl Serialize for Resource","synthetic":false,"types":[]},{"text":"impl Serialize for PrimaryResource","synthetic":false,"types":[]},{"text":"impl Serialize for SecondaryResource","synthetic":false,"types":[]},{"text":"impl Serialize for MetaDocument","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for Service&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for DIDKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for Properties&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for Method&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for MethodData","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for MethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for MethodType","synthetic":false,"types":[]}];
implementors["identity_diff"] = [{"text":"impl&lt;K, V:&nbsp;Diff&gt; Serialize for InnerValue&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Diff, V:&nbsp;Diff&gt; Serialize for DiffHashMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Diff&gt; Serialize for DiffHashSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Diff&gt; Serialize for InnerValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Diffi8","synthetic":false,"types":[]},{"text":"impl Serialize for Diffi16","synthetic":false,"types":[]},{"text":"impl Serialize for Diffi32","synthetic":false,"types":[]},{"text":"impl Serialize for Diffi64","synthetic":false,"types":[]},{"text":"impl Serialize for Diffi128","synthetic":false,"types":[]},{"text":"impl Serialize for DiffiSize","synthetic":false,"types":[]},{"text":"impl Serialize for Diffu8","synthetic":false,"types":[]},{"text":"impl Serialize for Diffu16","synthetic":false,"types":[]},{"text":"impl Serialize for Diffu32","synthetic":false,"types":[]},{"text":"impl Serialize for Diffu64","synthetic":false,"types":[]},{"text":"impl Serialize for Diffu128","synthetic":false,"types":[]},{"text":"impl Serialize for DiffuSize","synthetic":false,"types":[]},{"text":"impl Serialize for DiffF32","synthetic":false,"types":[]},{"text":"impl Serialize for DiffF64","synthetic":false,"types":[]},{"text":"impl Serialize for Diffbool","synthetic":false,"types":[]},{"text":"impl Serialize for Diffchar","synthetic":false,"types":[]},{"text":"impl Serialize for Diffunit","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Diff&gt; Serialize for DiffOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for DiffString","synthetic":false,"types":[]},{"text":"impl Serialize for DiffValue","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Diff&gt; Serialize for DiffVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Diff&gt; Serialize for InnerVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["identity_iota"] = [{"text":"impl&lt;T&gt; Serialize for CredentialValidation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Serialize for PresentationValidation&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for DocumentValidation","synthetic":false,"types":[]},{"text":"impl Serialize for IotaDID","synthetic":false,"types":[]},{"text":"impl Serialize for IotaDocument","synthetic":false,"types":[]},{"text":"impl Serialize for DocumentDiff","synthetic":false,"types":[]},{"text":"impl Serialize for Properties","synthetic":false,"types":[]},{"text":"impl Serialize for MessageId","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()