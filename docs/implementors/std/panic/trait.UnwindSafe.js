(function() {var implementors = {};
implementors["identity_core"] = [{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OneOrMany&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for OneOrManyIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JcsEd25519Signature2020","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureData","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for Key&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Secret","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Hash&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for MTree&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Proof&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Node&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["identity_credential"] = [{"text":"impl&lt;T&gt; UnwindSafe for CredentialBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Credential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Evidence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Policy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Refresh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subject","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VerifiableCredential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Issuer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BASE_CONTEXT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IssuerData","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for PresentationBuilder&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Presentation&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for VerifiablePresentation&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["identity_derive"] = [{"text":"impl UnwindSafe for InputEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVariant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputModel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SVariant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataFields","synthetic":true,"types":[]}];
implementors["identity_did"] = [{"text":"impl&lt;T, U, V&gt; UnwindSafe for DiffDocument&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: for&lt;'de&gt; Deserialize&lt;'de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: for&lt;'de&gt; Deserialize&lt;'de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Diff&gt;::Type: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffMethodData","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V&gt; UnwindSafe for DocumentBuilder&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V&gt; UnwindSafe for Document&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dereference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocumentMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Resolution","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolutionMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimaryResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Resource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DerefContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ServiceBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Service&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DIDKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for LdSuite&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Properties&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MethodBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Method&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MethodQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for MethodWrap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MethodIdent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodScope","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodType","synthetic":true,"types":[]}];
implementors["identity_diff"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for DiffHashMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffHashSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffString","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DiffOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for InnerValue&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InnerValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffi8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffi16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffi32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffi64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffi128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffiSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffu8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffu16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffu32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffu64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffu128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffuSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffF32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffF64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffbool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffchar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diffunit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InnerVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["identity_iota"] = [{"text":"impl UnwindSafe for AuthChain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffChain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocumentChain","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TxnPrinter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Network","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EXPLORER_MAIN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EXPLORER_DEV","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EXPLORER_COM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NODE_MAIN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NODE_DEV","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NODE_COM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __Full","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __Mini","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __Hash","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;()&gt; !UnwindSafe for CredentialValidation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CredentialValidator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocumentValidation","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;(), U&nbsp;=&nbsp;()&gt; !UnwindSafe for PresentationValidation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IotaDID","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IotaDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IotaDocumentBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocumentDiff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MessageIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()