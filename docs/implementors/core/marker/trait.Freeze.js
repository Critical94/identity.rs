(function() {var implementors = {};
implementors["identity_core"] = [{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Url","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OneOrMany&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OneOrManyIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for JcsEd25519Signature2020","synthetic":true,"types":[]},{"text":"impl !Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for SignatureValue","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureData","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for Key&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Secret","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Hash&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for MTree&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Proof&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Node&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["identity_credential"] = [{"text":"impl&lt;T&gt; Freeze for CredentialBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Credential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Evidence","synthetic":true,"types":[]},{"text":"impl Freeze for Policy","synthetic":true,"types":[]},{"text":"impl Freeze for Refresh","synthetic":true,"types":[]},{"text":"impl Freeze for Schema","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for Subject","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !Freeze for VerifiableCredential&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Issuer","synthetic":true,"types":[]},{"text":"impl Freeze for BASE_CONTEXT","synthetic":true,"types":[]},{"text":"impl Freeze for IssuerData","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for PresentationBuilder&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !Freeze for Presentation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !Freeze for VerifiablePresentation&lt;T, U&gt;","synthetic":true,"types":[]}];
implementors["identity_derive"] = [{"text":"impl Freeze for InputEnum","synthetic":true,"types":[]},{"text":"impl Freeze for InputStruct","synthetic":true,"types":[]},{"text":"impl Freeze for EVariant","synthetic":true,"types":[]},{"text":"impl Freeze for InputModel","synthetic":true,"types":[]},{"text":"impl Freeze for SVariant","synthetic":true,"types":[]},{"text":"impl Freeze for DataFields","synthetic":true,"types":[]}];
implementors["identity_did"] = [{"text":"impl&lt;T, U, V&gt; Freeze for DiffDocument&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DiffMethodData","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V&gt; Freeze for DocumentBuilder&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V&gt; Freeze for Document&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Dereference","synthetic":true,"types":[]},{"text":"impl Freeze for DocumentMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for InputMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for Resolution","synthetic":true,"types":[]},{"text":"impl Freeze for ResolutionMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for MetaDocument","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for PrimaryResource","synthetic":true,"types":[]},{"text":"impl Freeze for Resource","synthetic":true,"types":[]},{"text":"impl Freeze for SecondaryResource","synthetic":true,"types":[]},{"text":"impl Freeze for ResolveContext","synthetic":true,"types":[]},{"text":"impl Freeze for DerefContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ServiceBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Service&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DIDKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OrderedSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for LdSuite&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;()&gt; !Freeze for Properties&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MethodBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Method&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MethodQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for MethodWrap&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MethodData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MethodIdent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MethodScope","synthetic":true,"types":[]},{"text":"impl Freeze for MethodType","synthetic":true,"types":[]}];
implementors["identity_diff"] = [{"text":"impl&lt;K, V&gt; Freeze for DiffHashMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffHashSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DiffString","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiffOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for InnerValue&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InnerValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Diffi8","synthetic":true,"types":[]},{"text":"impl Freeze for Diffi16","synthetic":true,"types":[]},{"text":"impl Freeze for Diffi32","synthetic":true,"types":[]},{"text":"impl Freeze for Diffi64","synthetic":true,"types":[]},{"text":"impl Freeze for Diffi128","synthetic":true,"types":[]},{"text":"impl Freeze for DiffiSize","synthetic":true,"types":[]},{"text":"impl Freeze for Diffu8","synthetic":true,"types":[]},{"text":"impl Freeze for Diffu16","synthetic":true,"types":[]},{"text":"impl Freeze for Diffu32","synthetic":true,"types":[]},{"text":"impl Freeze for Diffu64","synthetic":true,"types":[]},{"text":"impl Freeze for Diffu128","synthetic":true,"types":[]},{"text":"impl Freeze for DiffuSize","synthetic":true,"types":[]},{"text":"impl Freeze for DiffF32","synthetic":true,"types":[]},{"text":"impl Freeze for DiffF64","synthetic":true,"types":[]},{"text":"impl Freeze for Diffbool","synthetic":true,"types":[]},{"text":"impl Freeze for Diffchar","synthetic":true,"types":[]},{"text":"impl Freeze for Diffunit","synthetic":true,"types":[]},{"text":"impl Freeze for DiffValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InnerVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["identity_iota"] = [{"text":"impl !Freeze for AuthChain","synthetic":true,"types":[]},{"text":"impl Freeze for DiffChain","synthetic":true,"types":[]},{"text":"impl !Freeze for DocumentChain","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl Freeze for ClientBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TxnPrinter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Network","synthetic":true,"types":[]},{"text":"impl Freeze for EXPLORER_MAIN","synthetic":true,"types":[]},{"text":"impl Freeze for EXPLORER_DEV","synthetic":true,"types":[]},{"text":"impl Freeze for EXPLORER_COM","synthetic":true,"types":[]},{"text":"impl Freeze for NODE_MAIN","synthetic":true,"types":[]},{"text":"impl Freeze for NODE_DEV","synthetic":true,"types":[]},{"text":"impl Freeze for NODE_COM","synthetic":true,"types":[]},{"text":"impl Freeze for __Full","synthetic":true,"types":[]},{"text":"impl Freeze for __Mini","synthetic":true,"types":[]},{"text":"impl Freeze for __Hash","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;()&gt; !Freeze for CredentialValidation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CredentialValidator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for DocumentValidation","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;(), U&nbsp;=&nbsp;()&gt; !Freeze for PresentationValidation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IotaDID","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for IotaDocument","synthetic":true,"types":[]},{"text":"impl Freeze for IotaDocumentBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for DocumentDiff","synthetic":true,"types":[]},{"text":"impl Freeze for Properties","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for MessageId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MessageIndex&lt;T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()